load("@rules_go//go:def.bzl", "go_library", "go_test")

config_setting(
    name = "linux-x86-64",
    constraint_values = [
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
)

config_setting(
    name = "macos-aarch64",
    constraint_values = [
        "@platforms//cpu:aarch64",
        "@platforms//os:macos",
    ],
)

go_library(
    name = "gmsk",
    srcs = [
        "basindtype_enum.go",
        "boundkey_enum.go",
        "branchdir_enum.go",
        "callbackcode_enum.go",
        "capis.go",
        "checkconvexitytype_enum.go",
        "compresstype_enum.go",
        "conetype_enum.go",
        "dataformat_enum.go",
        "dinfitem_enum.go",
        "domaintype_enum.go",
        "dparam_enum.go",
        "env.go",
        "error.go",
        "feature_enum.go",
        "iinfitem_enum.go",
        "inftype_enum.go",
        "intpnthotstart_enum.go",
        "iomode_enum.go",
        "iparam_enum.go",
        "liinfitem_enum.go",
        "mark_enum.go",
        "miocontsoltype_enum.go",
        "miodatapermmethod_enum.go",
        "miomode_enum.go",
        "mionodeseltype_enum.go",
        "miovarseltype_enum.go",
        "miqcqoreformmethod_enum.go",
        "mpsformat_enum.go",
        "nametype_enum.go",
        "objsense_enum.go",
        "onoffkey_enum.go",
        "optimizertype_enum.go",
        "orderingtype_enum.go",
        "other_funcs.go",
        "parametertype_enum.go",
        "presolvemode_enum.go",
        "problemitem_enum.go",
        "problemtype_enum.go",
        "prosta_enum.go",
        "purify_enum.go",
        "rescodes.go",
        "rescodetype_enum.go",
        "scalingmethod_enum.go",
        "scalingtype_enum.go",
        "sensitivitytype_enum.go",
        "simdegen_enum.go",
        "simdupvec_enum.go",
        "simhotstart_enum.go",
        "simreform_enum.go",
        "simseltype_enum.go",
        "solformat_enum.go",
        "solitem_enum.go",
        "solsta_enum.go",
        "soltype_enum.go",
        "solveform_enum.go",
        "sparam_enum.go",
        "stakey_enum.go",
        "startpointtype_enum.go",
        "streamtype_enum.go",
        "symmattype_enum.go",
        "task_apenddomain.go",
        "task_append.go",
        "task_get.go",
        "task_getlist_or_slice.go",
        "task_getnum.go",
        "task_getnumnz.go",
        "task_name.go",
        "task_other.go",
        "task_put.go",
        "task_putlist_or_slice.go",
        "task_putmaxnum.go",
        "task_slicetrip.go",
        "transpose_enum.go",
        "uplo_enum.go",
        "variabletype_enum.go",
        "xmlwriteroutputtype_enum.go",
    ],
    cdeps = ["@mosek"],
    cgo = True,
    importpath = "github.com/fardream/gmsk",
    visibility = ["//visibility:public"],
)

go_test(
    name = "gmsk_test",
    size = "small",
    srcs = [
        "error_test.go",
        "example_acc1_test.go",
        "example_acc2_test.go",
        "example_blas_lapack_test.go",
        "example_ceo1_test.go",
        "example_cqo1_test.go",
        "example_djc1_test.go",
        "example_gp1_test.go",
        "example_helloworld_test.go",
        "example_lo1_test.go",
        "example_logistic_test.go",
        "example_mico1_test.go",
        "example_milo1_test.go",
        "example_mioinitsol_test.go",
        "example_portfolio_1_basic_test.go",
        "example_portfolio_2_frontier_test.go",
        "example_portfolio_3_impact_test.go",
        "example_portfolio_4_transcost_test.go",
        "example_portfolio_5_card_test.go",
        "example_portfolio_6_factor_test.go",
        "example_pow1_test.go",
        "example_qcqo1_test.go",
        "example_qo1_test.go",
        "example_reoptimization_test.go",
        "example_sdo1_test.go",
        "example_sdo2_test.go",
        "example_sdo_lmi_test.go",
        "type_test.go",
        "writedata_test.go",
    ],
    deps = [":gmsk"],
)
