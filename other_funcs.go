// Automatically generated by github.com/fardream/gen-gmsk
// function deinitions

package gmsk

// #include <stdlib.h> // for C.free
// #include <mosek.h>
import "C"

import (
	"unsafe"

	"github.com/fardream/gmsk/res"
)

// CallbackCodeToStr is wrapping [MSK_callbackcodetostr]
//
// [MSK_callbackcodetostr] returns MSKrescodee and has following parameters
//   - code: MSKcallbackcodee
//   - callbackcodestr: char *
//
// [MSK_callbackcodetostr]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.callbackcodetostr
func CallbackCodeToStr(
	code CallbackCode,
) (r res.Code, callbackcodestr string) {
	c_callbackcodestr := (*C.char)(C.calloc(MAX_STR_LEN+1, 1))
	defer C.free(unsafe.Pointer(c_callbackcodestr))

	r = res.Code(
		C.MSK_callbackcodetostr(
			C.MSKcallbackcodee(code),
			c_callbackcodestr,
		),
	)

	if r.IsOk() {
		callbackcodestr = C.GoString(c_callbackcodestr)
	}

	return
}

// GetBuildInfo is wrapping [MSK_getbuildinfo]
//
// [MSK_getbuildinfo] returns MSKrescodee and has following parameters
//   - buildstate: char *
//   - builddate: char *
//
// [MSK_getbuildinfo]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getbuildinfo
func GetBuildInfo() (r res.Code, buildstate, builddate string) {
	c_buildstate := (*C.char)(C.calloc(MAX_STR_LEN+1, 1))
	defer C.free(unsafe.Pointer(c_buildstate))
	c_builddate := (*C.char)(C.calloc(MAX_STR_LEN+1, 1))
	defer C.free(unsafe.Pointer(c_builddate))

	r = res.Code(
		C.MSK_getbuildinfo(
			c_buildstate,
			c_builddate,
		),
	)

	if r.IsOk() {
		buildstate = C.GoString(c_buildstate)
		builddate = C.GoString(c_builddate)
	}

	return
}

// GetCodeDesc is wrapping [MSK_getcodedesc] and
// gets description for [res.Code]. The first returned value is symbol, and the second returned value is
// the description. The process may fail.
//
// [MSK_getcodedesc] returns MSKrescodee and has following parameters
//   - code: MSKrescodee
//   - symname: char *
//   - str: char *
//
// [MSK_getcodedesc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getcodedesc
func GetCodeDesc(
	code res.Code,
) (r res.Code, symname, str string) {
	c_symname := (*C.char)(C.calloc(MAX_STR_LEN+1, 1))
	defer C.free(unsafe.Pointer(c_symname))
	c_str := (*C.char)(C.calloc(MAX_STR_LEN+1, 1))
	defer C.free(unsafe.Pointer(c_str))

	r = res.Code(
		C.MSK_getcodedesc(
			C.MSKrescodee(code),
			c_symname,
			c_str,
		),
	)

	if r.IsOk() {
		symname = C.GoString(c_symname)
		str = C.GoString(c_str)
	}

	return
}

// GetResponseClass is wrapping [MSK_getresponseclass]
//
// [MSK_getresponseclass] returns MSKrescodee and has following parameters
//   - r: MSKrescodee
//   - rc: MSKrescodetypee *
//
// [MSK_getresponseclass]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getresponseclass
func GetResponseClass(
	r res.Code,
) (rescode res.Code, rc ResCodeType) {
	rescode = res.Code(
		C.MSK_getresponseclass(
			C.MSKrescodee(r),
			(*C.MSKrescodetypee)(&rc),
		),
	)

	return
}

// GetVersion is wrapping [MSK_getversion]
//
// [MSK_getversion] returns MSKrescodee and has following parameters
//   - major: MSKint32t *
//   - minor: MSKint32t *
//   - revision: MSKint32t *
//
// [MSK_getversion]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getversion
func GetVersion() (r res.Code, major, minor, revision int32) {
	r = res.Code(
		C.MSK_getversion(
			(*C.MSKint32t)(&major),
			(*C.MSKint32t)(&minor),
			(*C.MSKint32t)(&revision),
		),
	)

	return
}

// IsInfinity is wrapping [MSK_isinfinity]
//
// [MSK_isinfinity] returns MSKbooleant and has following parameters
//   - value: MSKrealt
//
// [MSK_isinfinity]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.isinfinity
func IsInfinity(
	value float64,
) bool {
	return intToBool(
		C.MSK_isinfinity(
			C.MSKrealt(value),
		),
	)
}

// LicenseCleanUp is wrapping [MSK_licensecleanup]
//
// [MSK_licensecleanup] returns MSKrescodee and has following parameters
//
// [MSK_licensecleanup]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.licensecleanup
func LicenseCleanUp() res.Code {
	return res.Code(
		C.MSK_licensecleanup(),
	)
}

// Symnamtovalue is wrapping [MSK_symnamtovalue]
//
// [MSK_symnamtovalue] returns MSKbooleant and has following parameters
//   - name: const char *
//   - value: char *
//
// [MSK_symnamtovalue]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.symnamtovalue
func Symnamtovalue(
	name string,
	value *byte,
) bool {
	c_name := C.CString(name)
	defer C.free(unsafe.Pointer(c_name))

	return intToBool(
		C.MSK_symnamtovalue(
			c_name,
			(*C.char)(unsafe.Pointer(value)),
		),
	)
}

// Utf8towchar is wrapping [MSK_utf8towchar]
//
// [MSK_utf8towchar] returns MSKrescodee and has following parameters
//   - outputlen: size_t
//   - len: size_t *
//   - conv: size_t *
//   - output: MSKwchart *
//   - input: const char *
//
// [MSK_utf8towchar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.utf8towchar
func Utf8towchar(
	outputlen uint64,
	len *uint64,
	conv *uint64,
	output *int32,
	input string,
) res.Code {
	c_input := C.CString(input)
	defer C.free(unsafe.Pointer(c_input))

	return res.Code(
		C.MSK_utf8towchar(
			C.size_t(outputlen),
			(*C.size_t)(len),
			(*C.size_t)(conv),
			(*C.MSKwchart)(output),
			c_input,
		),
	)
}

// Wchartoutf8 is wrapping [MSK_wchartoutf8]
//
// [MSK_wchartoutf8] returns MSKrescodee and has following parameters
//   - outputlen: size_t
//   - len: size_t *
//   - conv: size_t *
//   - output: char *
//   - input: const MSKwchart *
//
// [MSK_wchartoutf8]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.wchartoutf8
func Wchartoutf8(
	outputlen uint64,
	len *uint64,
	conv *uint64,
	output *byte,
	input *int32,
) res.Code {
	return res.Code(
		C.MSK_wchartoutf8(
			C.size_t(outputlen),
			(*C.size_t)(len),
			(*C.size_t)(conv),
			(*C.char)(unsafe.Pointer(output)),
			(*C.MSKwchart)(input),
		),
	)
}
