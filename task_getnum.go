// Automatically generated by github.com/fardream/gen-gmsk
// function deinitions

package gmsk

// #include <stdlib.h> // for C.free
// #include <mosek.h>
import "C"

import (
	"github.com/fardream/gmsk/res"
)

// GetNumAcc is wrapping [MSK_getnumacc],
// Obtains the number of affine conic constraints.
//
// Returns:
//
//   - `num` The number of affine conic constraints.
//
// [MSK_getnumacc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getnumacc
func (task *Task) GetNumAcc() (r res.Code, num int64) {
	r = res.Code(
		C.MSK_getnumacc(
			task.task,
			(*C.MSKint64t)(&num),
		),
	)

	return
}

// GetNumAfe is wrapping [MSK_getnumafe],
// Obtains the number of affine expressions.
//
// Returns:
//
//   - `numafe` Number of affine expressions.
//
// [MSK_getnumafe]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getnumafe
func (task *Task) GetNumAfe() (r res.Code, numafe int64) {
	r = res.Code(
		C.MSK_getnumafe(
			task.task,
			(*C.MSKint64t)(&numafe),
		),
	)

	return
}

// GetNumAnz is wrapping [MSK_getnumanz],
// Obtains the number of non-zeros in the coefficient matrix.
//
// Returns:
//
//   - `numanz` Number of non-zero elements in the linear constraint matrix.
//
// [MSK_getnumanz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getnumanz
func (task *Task) GetNumAnz() (r res.Code, numanz int32) {
	r = res.Code(
		C.MSK_getnumanz(
			task.task,
			(*C.MSKint32t)(&numanz),
		),
	)

	return
}

// GetNumAnz64 is wrapping [MSK_getnumanz64],
// Obtains the number of non-zeros in the coefficient matrix.
//
// Returns:
//
//   - `numanz` Number of non-zero elements in the linear constraint matrix.
//
// [MSK_getnumanz64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getnumanz64
func (task *Task) GetNumAnz64() (r res.Code, numanz int64) {
	r = res.Code(
		C.MSK_getnumanz64(
			task.task,
			(*C.MSKint64t)(&numanz),
		),
	)

	return
}

// GetNumBarABlockTriplets is wrapping [MSK_getnumbarablocktriplets],
// Obtains an upper bound on the number of scalar elements in the block triplet form of bara.
//
// Returns:
//
//   - `num` An upper bound on the number of elements in the block triplet form of bara.
//
// [MSK_getnumbarablocktriplets]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getnumbarablocktriplets
func (task *Task) GetNumBarABlockTriplets() (r res.Code, num int64) {
	r = res.Code(
		C.MSK_getnumbarablocktriplets(
			task.task,
			(*C.MSKint64t)(&num),
		),
	)

	return
}

// GetNumBarANz is wrapping [MSK_getnumbaranz],
// Get the number of nonzero elements in barA.
//
// Returns:
//
//   - `nz` The number of nonzero block elements in barA.
//
// [MSK_getnumbaranz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getnumbaranz
func (task *Task) GetNumBarANz() (r res.Code, nz int64) {
	r = res.Code(
		C.MSK_getnumbaranz(
			task.task,
			(*C.MSKint64t)(&nz),
		),
	)

	return
}

// GetNumBarCBlockTriplets is wrapping [MSK_getnumbarcblocktriplets],
// Obtains an upper bound on the number of elements in the block triplet form of barc.
//
// Returns:
//
//   - `num` An upper bound on the number of elements in the block triplet form of barc.
//
// [MSK_getnumbarcblocktriplets]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getnumbarcblocktriplets
func (task *Task) GetNumBarCBlockTriplets() (r res.Code, num int64) {
	r = res.Code(
		C.MSK_getnumbarcblocktriplets(
			task.task,
			(*C.MSKint64t)(&num),
		),
	)

	return
}

// GetNumBarCNz is wrapping [MSK_getnumbarcnz],
// Obtains the number of nonzero elements in barc.
//
// Returns:
//
//   - `nz` The number of nonzero elements in barc.
//
// [MSK_getnumbarcnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getnumbarcnz
func (task *Task) GetNumBarCNz() (r res.Code, nz int64) {
	r = res.Code(
		C.MSK_getnumbarcnz(
			task.task,
			(*C.MSKint64t)(&nz),
		),
	)

	return
}

// GetNumBarvar is wrapping [MSK_getnumbarvar],
// Obtains the number of semidefinite variables.
//
// Returns:
//
//   - `numbarvar` Number of semidefinite variables in the problem.
//
// [MSK_getnumbarvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getnumbarvar
func (task *Task) GetNumBarvar() (r res.Code, numbarvar int32) {
	r = res.Code(
		C.MSK_getnumbarvar(
			task.task,
			(*C.MSKint32t)(&numbarvar),
		),
	)

	return
}

// GetNumCon is wrapping [MSK_getnumcon],
// Obtains the number of constraints.
//
// Returns:
//
//   - `numcon` Number of constraints.
//
// [MSK_getnumcon]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getnumcon
func (task *Task) GetNumCon() (r res.Code, numcon int32) {
	r = res.Code(
		C.MSK_getnumcon(
			task.task,
			(*C.MSKint32t)(&numcon),
		),
	)

	return
}

// GetNumCone is wrapping [MSK_getnumcone],
// Obtains the number of cones.
//
// Returns:
//
//   - `numcone` Number of conic constraints.
//
// Deprecated: [MSK_getnumcone]/GetNumCone is deprecated by mosek and will be removed in a future release.
//
// [MSK_getnumcone]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getnumcone
func (task *Task) GetNumCone() (r res.Code, numcone int32) {
	r = res.Code(
		C.MSK_getnumcone(
			task.task,
			(*C.MSKint32t)(&numcone),
		),
	)

	return
}

// GetNumConemem is wrapping [MSK_getnumconemem],
// Obtains the number of members in a cone.
//
// Arguments:
//
//   - `k` Index of the cone.
//   - `nummem` Number of member variables in the cone.
//
// Deprecated: [MSK_getnumconemem]/GetNumConemem is deprecated by mosek and will be removed in a future release.
//
// [MSK_getnumconemem]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getnumconemem
func (task *Task) GetNumConemem(
	k int32,
) (r res.Code, nummem int32) {
	r = res.Code(
		C.MSK_getnumconemem(
			task.task,
			C.MSKint32t(k),
			(*C.MSKint32t)(&nummem),
		),
	)

	return
}

// GetNumDjc is wrapping [MSK_getnumdjc],
// Obtains the number of disjunctive constraints.
//
// Returns:
//
//   - `num` The number of disjunctive constraints.
//
// [MSK_getnumdjc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getnumdjc
func (task *Task) GetNumDjc() (r res.Code, num int64) {
	r = res.Code(
		C.MSK_getnumdjc(
			task.task,
			(*C.MSKint64t)(&num),
		),
	)

	return
}

// GetNumDomain is wrapping [MSK_getnumdomain],
// Obtain the number of domains defined.
//
// Returns:
//
//   - `numdomain` Number of domains in the task.
//
// [MSK_getnumdomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getnumdomain
func (task *Task) GetNumDomain() (r res.Code, numdomain int64) {
	r = res.Code(
		C.MSK_getnumdomain(
			task.task,
			(*C.MSKint64t)(&numdomain),
		),
	)

	return
}

// GetNumIntvar is wrapping [MSK_getnumintvar],
// Obtains the number of integer-constrained variables.
//
// Returns:
//
//   - `numintvar` Number of integer variables.
//
// [MSK_getnumintvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getnumintvar
func (task *Task) GetNumIntvar() (r res.Code, numintvar int32) {
	r = res.Code(
		C.MSK_getnumintvar(
			task.task,
			(*C.MSKint32t)(&numintvar),
		),
	)

	return
}

// GetNumParam is wrapping [MSK_getnumparam],
// Obtains the number of parameters of a given type.
//
// Arguments:
//
//   - `partype` Parameter type.
//   - `numparam` Returns the number of parameters of the requested type.
//
// [MSK_getnumparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getnumparam
func (task *Task) GetNumParam(
	partype ParameterType,
) (r res.Code, numparam int32) {
	r = res.Code(
		C.MSK_getnumparam(
			task.task,
			C.MSKparametertypee(partype),
			(*C.MSKint32t)(&numparam),
		),
	)

	return
}

// GetNumQConKNz is wrapping [MSK_getnumqconknz],
// Obtains the number of non-zero quadratic terms in a constraint.
//
// Arguments:
//
//   - `k` Index of the constraint for which the number quadratic terms should be obtained.
//
// Returns:
//
//   - `numqcnz` Number of quadratic terms.
//
// [MSK_getnumqconknz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getnumqconknz
func (task *Task) GetNumQConKNz(
	k int32,
) (r res.Code, numqcnz int32) {
	r = res.Code(
		C.MSK_getnumqconknz(
			task.task,
			C.MSKint32t(k),
			(*C.MSKint32t)(&numqcnz),
		),
	)

	return
}

// GetNumQConKNz64 is wrapping [MSK_getnumqconknz64]
//
// [MSK_getnumqconknz64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getnumqconknz64
func (task *Task) GetNumQConKNz64(
	k int32,
) (r res.Code, numqcnz int64) {
	r = res.Code(
		C.MSK_getnumqconknz64(
			task.task,
			C.MSKint32t(k),
			(*C.MSKint64t)(&numqcnz),
		),
	)

	return
}

// GetNumQObjNz is wrapping [MSK_getnumqobjnz],
// Obtains the number of non-zero quadratic terms in the objective.
//
// Returns:
//
//   - `numqonz` Number of non-zero elements in the quadratic objective terms.
//
// [MSK_getnumqobjnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getnumqobjnz
func (task *Task) GetNumQObjNz() (r res.Code, numqonz int32) {
	r = res.Code(
		C.MSK_getnumqobjnz(
			task.task,
			(*C.MSKint32t)(&numqonz),
		),
	)

	return
}

// GetNumQObjNz64 is wrapping [MSK_getnumqobjnz64]
//
// [MSK_getnumqobjnz64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getnumqobjnz64
func (task *Task) GetNumQObjNz64() (r res.Code, numqonz int64) {
	r = res.Code(
		C.MSK_getnumqobjnz64(
			task.task,
			(*C.MSKint64t)(&numqonz),
		),
	)

	return
}

// GetNumSymmat is wrapping [MSK_getnumsymmat],
// Obtains the number of symmetric matrices stored.
//
// Arguments:
//
//   - `num` The number of symmetric sparse matrices.
//
// [MSK_getnumsymmat]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getnumsymmat
func (task *Task) GetNumSymmat() (r res.Code, num int64) {
	r = res.Code(
		C.MSK_getnumsymmat(
			task.task,
			(*C.MSKint64t)(&num),
		),
	)

	return
}

// GetNumVar is wrapping [MSK_getnumvar],
// Obtains the number of variables.
//
// Returns:
//
//   - `numvar` Number of variables.
//
// [MSK_getnumvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getnumvar
func (task *Task) GetNumVar() (r res.Code, numvar int32) {
	r = res.Code(
		C.MSK_getnumvar(
			task.task,
			(*C.MSKint32t)(&numvar),
		),
	)

	return
}
