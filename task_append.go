// Automatically generated by github.com/fardream/gen-gmsk
// function deinitions

package gmsk

// #include <mosek.h>
import "C"

import (
	"unsafe"

	"github.com/fardream/gmsk/res"
)

// We don't know if unsafe will be used or not, so
var _ any = unsafe.Pointer(nil)

// AppendAcc is wrapping MSK_appendacc,
// adds an affine conic constraint to the task, where the afe idx is provided
// by an array or pointer - if the afe idx is sequential, use [Task.AppendAccSeq]
// to avoid allocating an array.
//
// [MSK_appendacc] has following parameters
//   - task: MSKtask_t
//   - domidx: MSKint64t
//   - numafeidx: MSKint64t
//   - afeidxlist: const MSKint64t *
//   - b: const MSKrealt *
//
// [MSK_appendacc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendAcc(
	domidx int64,
	numafeidx int64,
	afeidxlist *int64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_appendacc(
			task.task,
			C.MSKint64t(domidx),
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidxlist),
			(*C.MSKrealt)(b),
		),
	)
}

// AppendAccs is wrapping MSK_appendaccs,
// adds a list of affine conic constraints to the task.
//
// [MSK_appendaccs] has following parameters
//   - task: MSKtask_t
//   - numaccs: MSKint64t
//   - domidxs: const MSKint64t *
//   - numafeidx: MSKint64t
//   - afeidxlist: const MSKint64t *
//   - b: const MSKrealt *
//
// [MSK_appendaccs]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendAccs(
	numaccs int64,
	domidxs *int64,
	numafeidx int64,
	afeidxlist *int64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_appendaccs(
			task.task,
			C.MSKint64t(numaccs),
			(*C.MSKint64t)(domidxs),
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidxlist),
			(*C.MSKrealt)(b),
		),
	)
}

// AppendAccSeq is wrapping MSK_appendaccseq,
// adds an affine conic constraint to the task where the affine idx is sequential.
//
// [MSK_appendaccseq] has following parameters
//   - task: MSKtask_t
//   - domidx: MSKint64t
//   - numafeidx: MSKint64t
//   - afeidxfirst: MSKint64t
//   - b: const MSKrealt *
//
// [MSK_appendaccseq]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendAccSeq(
	domidx int64,
	numafeidx int64,
	afeidxfirst int64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_appendaccseq(
			task.task,
			C.MSKint64t(domidx),
			C.MSKint64t(numafeidx),
			C.MSKint64t(afeidxfirst),
			(*C.MSKrealt)(b),
		),
	)
}

// AppendAccsSeq is wrapping MSK_appendaccsseq,
// append a block of accs to the tas - assuming affine expressions are sequential.
//
// [MSK_appendaccsseq] has following parameters
//   - task: MSKtask_t
//   - numaccs: MSKint64t
//   - domidxs: const MSKint64t *
//   - numafeidx: MSKint64t
//   - afeidxfirst: MSKint64t
//   - b: const MSKrealt *
//
// [MSK_appendaccsseq]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendAccsSeq(
	numaccs int64,
	domidxs *int64,
	numafeidx int64,
	afeidxfirst int64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_appendaccsseq(
			task.task,
			C.MSKint64t(numaccs),
			(*C.MSKint64t)(domidxs),
			C.MSKint64t(numafeidx),
			C.MSKint64t(afeidxfirst),
			(*C.MSKrealt)(b),
		),
	)
}

// AppendAfes is wrapping MSK_appendafes,
// adds affine expressions to the task.
//
// [MSK_appendafes] has following parameters
//   - task: MSKtask_t
//   - num: MSKint64t
//
// [MSK_appendafes]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendAfes(
	num int64,
) res.Code {
	return res.Code(
		C.MSK_appendafes(
			task.task,
			C.MSKint64t(num),
		),
	)
}

// AppendBarvars is wrapping MSK_appendbarvars
//
// [MSK_appendbarvars] has following parameters
//   - task: MSKtask_t
//   - num: MSKint32t
//   - dim: const MSKint32t *
//
// [MSK_appendbarvars]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendBarvars(
	num int32,
	dim *int32,
) res.Code {
	return res.Code(
		C.MSK_appendbarvars(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(dim),
		),
	)
}

// AppendCone is wrapping MSK_appendcone
//
// [MSK_appendcone] has following parameters
//   - task: MSKtask_t
//   - ct: MSKconetypee
//   - conepar: MSKrealt
//   - nummem: MSKint32t
//   - submem: const MSKint32t *
//
// [MSK_appendcone]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendCone(
	ct ConeType,
	conepar float64,
	nummem int32,
	submem *int32,
) res.Code {
	return res.Code(
		C.MSK_appendcone(
			task.task,
			C.MSKconetypee(ct),
			C.MSKrealt(conepar),
			C.MSKint32t(nummem),
			(*C.MSKint32t)(submem),
		),
	)
}

// AppendConeSeq is wrapping MSK_appendconeseq
//
// [MSK_appendconeseq] has following parameters
//   - task: MSKtask_t
//   - ct: MSKconetypee
//   - conepar: MSKrealt
//   - nummem: MSKint32t
//   - j: MSKint32t
//
// [MSK_appendconeseq]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendConeSeq(
	ct ConeType,
	conepar float64,
	nummem int32,
	j int32,
) res.Code {
	return res.Code(
		C.MSK_appendconeseq(
			task.task,
			C.MSKconetypee(ct),
			C.MSKrealt(conepar),
			C.MSKint32t(nummem),
			C.MSKint32t(j),
		),
	)
}

// AppendConesSeq is wrapping MSK_appendconesseq
//
// [MSK_appendconesseq] has following parameters
//   - task: MSKtask_t
//   - num: MSKint32t
//   - ct: const MSKconetypee *
//   - conepar: const MSKrealt *
//   - nummem: const MSKint32t *
//   - j: MSKint32t
//
// [MSK_appendconesseq]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendConesSeq(
	num int32,
	ct *ConeType,
	conepar *float64,
	nummem *int32,
	j int32,
) res.Code {
	return res.Code(
		C.MSK_appendconesseq(
			task.task,
			C.MSKint32t(num),
			(*C.MSKconetypee)(ct),
			(*C.MSKrealt)(conepar),
			(*C.MSKint32t)(nummem),
			C.MSKint32t(j),
		),
	)
}

// AppendCons is wrapping MSK_appendcons,
// add vanilla linear constraints to the task.
//
// [MSK_appendcons] has following parameters
//   - task: MSKtask_t
//   - num: MSKint32t
//
// [MSK_appendcons]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendCons(
	num int32,
) res.Code {
	return res.Code(
		C.MSK_appendcons(
			task.task,
			C.MSKint32t(num),
		),
	)
}

// AppendDjcs is wrapping MSK_appenddjcs,
// adds disjunctive constraints to the task.
//
// [MSK_appenddjcs] has following parameters
//   - task: MSKtask_t
//   - num: MSKint64t
//
// [MSK_appenddjcs]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendDjcs(
	num int64,
) res.Code {
	return res.Code(
		C.MSK_appenddjcs(
			task.task,
			C.MSKint64t(num),
		),
	)
}

// AppendDualexpconedomain is wrapping MSK_appenddualexpconedomain
//
// [MSK_appenddualexpconedomain] has following parameters
//   - task: MSKtask_t
//   - domidx: MSKint64t *
//
// [MSK_appenddualexpconedomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendDualexpconedomain(
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appenddualexpconedomain(
			task.task,
			(*C.MSKint64t)(domidx),
		),
	)
}

// AppendDualgeomeanconedomain is wrapping MSK_appenddualgeomeanconedomain
//
// [MSK_appenddualgeomeanconedomain] has following parameters
//   - task: MSKtask_t
//   - n: MSKint64t
//   - domidx: MSKint64t *
//
// [MSK_appenddualgeomeanconedomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendDualgeomeanconedomain(
	n int64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appenddualgeomeanconedomain(
			task.task,
			C.MSKint64t(n),
			(*C.MSKint64t)(domidx),
		),
	)
}

// AppendDualpowerconedomain is wrapping MSK_appenddualpowerconedomain
//
// [MSK_appenddualpowerconedomain] has following parameters
//   - task: MSKtask_t
//   - n: MSKint64t
//   - nleft: MSKint64t
//   - alpha: const MSKrealt *
//   - domidx: MSKint64t *
//
// [MSK_appenddualpowerconedomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendDualpowerconedomain(
	n int64,
	nleft int64,
	alpha *float64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appenddualpowerconedomain(
			task.task,
			C.MSKint64t(n),
			C.MSKint64t(nleft),
			(*C.MSKrealt)(alpha),
			(*C.MSKint64t)(domidx),
		),
	)
}

// AppendPrimalexpconedomain is wrapping MSK_appendprimalexpconedomain
//
// [MSK_appendprimalexpconedomain] has following parameters
//   - task: MSKtask_t
//   - domidx: MSKint64t *
//
// [MSK_appendprimalexpconedomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendPrimalexpconedomain(
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendprimalexpconedomain(
			task.task,
			(*C.MSKint64t)(domidx),
		),
	)
}

// AppendPrimalgeomeanconedomain is wrapping MSK_appendprimalgeomeanconedomain
//
// [MSK_appendprimalgeomeanconedomain] has following parameters
//   - task: MSKtask_t
//   - n: MSKint64t
//   - domidx: MSKint64t *
//
// [MSK_appendprimalgeomeanconedomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendPrimalgeomeanconedomain(
	n int64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendprimalgeomeanconedomain(
			task.task,
			C.MSKint64t(n),
			(*C.MSKint64t)(domidx),
		),
	)
}

// AppendPrimalpowerconedomain is wrapping MSK_appendprimalpowerconedomain
//
// [MSK_appendprimalpowerconedomain] has following parameters
//   - task: MSKtask_t
//   - n: MSKint64t
//   - nleft: MSKint64t
//   - alpha: const MSKrealt *
//   - domidx: MSKint64t *
//
// [MSK_appendprimalpowerconedomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendPrimalpowerconedomain(
	n int64,
	nleft int64,
	alpha *float64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendprimalpowerconedomain(
			task.task,
			C.MSKint64t(n),
			C.MSKint64t(nleft),
			(*C.MSKrealt)(alpha),
			(*C.MSKint64t)(domidx),
		),
	)
}

// AppendQuadraticconedomain is wrapping MSK_appendquadraticconedomain
//
// [MSK_appendquadraticconedomain] has following parameters
//   - task: MSKtask_t
//   - n: MSKint64t
//   - domidx: MSKint64t *
//
// [MSK_appendquadraticconedomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendQuadraticconedomain(
	n int64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendquadraticconedomain(
			task.task,
			C.MSKint64t(n),
			(*C.MSKint64t)(domidx),
		),
	)
}

// AppendRdomain is wrapping MSK_appendrdomain
//
// [MSK_appendrdomain] has following parameters
//   - task: MSKtask_t
//   - n: MSKint64t
//   - domidx: MSKint64t *
//
// [MSK_appendrdomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendRdomain(
	n int64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendrdomain(
			task.task,
			C.MSKint64t(n),
			(*C.MSKint64t)(domidx),
		),
	)
}

// AppendRminusdomain is wrapping MSK_appendrminusdomain
//
// [MSK_appendrminusdomain] has following parameters
//   - task: MSKtask_t
//   - n: MSKint64t
//   - domidx: MSKint64t *
//
// [MSK_appendrminusdomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendRminusdomain(
	n int64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendrminusdomain(
			task.task,
			C.MSKint64t(n),
			(*C.MSKint64t)(domidx),
		),
	)
}

// AppendRplusdomain is wrapping MSK_appendrplusdomain
//
// [MSK_appendrplusdomain] has following parameters
//   - task: MSKtask_t
//   - n: MSKint64t
//   - domidx: MSKint64t *
//
// [MSK_appendrplusdomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendRplusdomain(
	n int64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendrplusdomain(
			task.task,
			C.MSKint64t(n),
			(*C.MSKint64t)(domidx),
		),
	)
}

// AppendRquadraticconedomain is wrapping MSK_appendrquadraticconedomain
//
// [MSK_appendrquadraticconedomain] has following parameters
//   - task: MSKtask_t
//   - n: MSKint64t
//   - domidx: MSKint64t *
//
// [MSK_appendrquadraticconedomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendRquadraticconedomain(
	n int64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendrquadraticconedomain(
			task.task,
			C.MSKint64t(n),
			(*C.MSKint64t)(domidx),
		),
	)
}

// AppendRzerodomain is wrapping MSK_appendrzerodomain
//
// [MSK_appendrzerodomain] has following parameters
//   - task: MSKtask_t
//   - n: MSKint64t
//   - domidx: MSKint64t *
//
// [MSK_appendrzerodomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendRzerodomain(
	n int64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendrzerodomain(
			task.task,
			C.MSKint64t(n),
			(*C.MSKint64t)(domidx),
		),
	)
}

// AppendSparsesymmat is wrapping MSK_appendsparsesymmat
//
// [MSK_appendsparsesymmat] has following parameters
//   - task: MSKtask_t
//   - dim: MSKint32t
//   - nz: MSKint64t
//   - subi: const MSKint32t *
//   - subj: const MSKint32t *
//   - valij: const MSKrealt *
//   - idx: MSKint64t *
//
// [MSK_appendsparsesymmat]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendSparsesymmat(
	dim int32,
	nz int64,
	subi *int32,
	subj *int32,
	valij *float64,
	idx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendsparsesymmat(
			task.task,
			C.MSKint32t(dim),
			C.MSKint64t(nz),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(valij),
			(*C.MSKint64t)(idx),
		),
	)
}

// AppendSparsesymmatList is wrapping MSK_appendsparsesymmatlist
//
// [MSK_appendsparsesymmatlist] has following parameters
//   - task: MSKtask_t
//   - num: MSKint32t
//   - dims: const MSKint32t *
//   - nz: const MSKint64t *
//   - subi: const MSKint32t *
//   - subj: const MSKint32t *
//   - valij: const MSKrealt *
//   - idx: MSKint64t *
//
// [MSK_appendsparsesymmatlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendSparsesymmatList(
	num int32,
	dims *int32,
	nz *int64,
	subi *int32,
	subj *int32,
	valij *float64,
	idx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendsparsesymmatlist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(dims),
			(*C.MSKint64t)(nz),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(valij),
			(*C.MSKint64t)(idx),
		),
	)
}

// AppendSvecpsdconedomain is wrapping MSK_appendsvecpsdconedomain
//
// [MSK_appendsvecpsdconedomain] has following parameters
//   - task: MSKtask_t
//   - n: MSKint64t
//   - domidx: MSKint64t *
//
// [MSK_appendsvecpsdconedomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendSvecpsdconedomain(
	n int64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendsvecpsdconedomain(
			task.task,
			C.MSKint64t(n),
			(*C.MSKint64t)(domidx),
		),
	)
}

// AppendVars is wrapping MSK_appendvars,
// add variables to the task.
//
// [MSK_appendvars] has following parameters
//   - task: MSKtask_t
//   - num: MSKint32t
//
// [MSK_appendvars]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendVars(
	num int32,
) res.Code {
	return res.Code(
		C.MSK_appendvars(
			task.task,
			C.MSKint32t(num),
		),
	)
}
