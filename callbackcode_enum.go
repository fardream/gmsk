// Automatically generated by github.com/fardream/gen-gmsk
// enum for MSKcallbackcode_enum/CallbackCode

package gmsk

import "strconv"

// CallbackCode is MSKcallbackcode_enum.
//
// Progress callback codes
type CallbackCode uint32

const (
	CALLBACK_BEGIN_BI                 CallbackCode = 0  // The basis identification procedure has been started.
	CALLBACK_BEGIN_CONIC              CallbackCode = 1  // The callback function is called when the conic optimizer is started.
	CALLBACK_BEGIN_DUAL_BI            CallbackCode = 2  // The callback function is called from within the basis identification procedure when the dual phase is started.
	CALLBACK_BEGIN_DUAL_SENSITIVITY   CallbackCode = 3  // Dual sensitivity analysis is started.
	CALLBACK_BEGIN_DUAL_SETUP_BI      CallbackCode = 4  // The callback function is called when the dual BI phase is started.
	CALLBACK_BEGIN_DUAL_SIMPLEX       CallbackCode = 5  // The callback function is called when the dual simplex optimizer started.
	CALLBACK_BEGIN_DUAL_SIMPLEX_BI    CallbackCode = 6  // The callback function is called from within the basis identification procedure when the dual simplex clean-up phase is started.
	CALLBACK_BEGIN_INFEAS_ANA         CallbackCode = 7  // The callback function is called when the infeasibility analyzer is started.
	CALLBACK_BEGIN_INTPNT             CallbackCode = 8  // The callback function is called when the interior-point optimizer is started.
	CALLBACK_BEGIN_LICENSE_WAIT       CallbackCode = 9  // Begin waiting for license.
	CALLBACK_BEGIN_MIO                CallbackCode = 10 // The callback function is called when the mixed-integer optimizer is started.
	CALLBACK_BEGIN_OPTIMIZER          CallbackCode = 11 // The callback function is called when the optimizer is started.
	CALLBACK_BEGIN_PRESOLVE           CallbackCode = 12 // The callback function is called when the presolve is started.
	CALLBACK_BEGIN_PRIMAL_BI          CallbackCode = 13 // The callback function is called from within the basis identification procedure when the primal phase is started.
	CALLBACK_BEGIN_PRIMAL_REPAIR      CallbackCode = 14 // Begin primal feasibility repair.
	CALLBACK_BEGIN_PRIMAL_SENSITIVITY CallbackCode = 15 // Primal sensitivity analysis is started.
	CALLBACK_BEGIN_PRIMAL_SETUP_BI    CallbackCode = 16 // The callback function is called when the primal BI setup is started.
	CALLBACK_BEGIN_PRIMAL_SIMPLEX     CallbackCode = 17 // The callback function is called when the primal simplex optimizer is started.
	CALLBACK_BEGIN_PRIMAL_SIMPLEX_BI  CallbackCode = 18 // The callback function is called from within the basis identification procedure when the primal simplex clean-up phase is started.
	CALLBACK_BEGIN_QCQO_REFORMULATE   CallbackCode = 19 // Begin QCQO reformulation.
	CALLBACK_BEGIN_READ               CallbackCode = 20 // MOSEK has started reading a problem file.
	CALLBACK_BEGIN_ROOT_CUTGEN        CallbackCode = 21 // The callback function is called when root cut generation is started.
	CALLBACK_BEGIN_SIMPLEX            CallbackCode = 22 // The callback function is called when the simplex optimizer is started.
	CALLBACK_BEGIN_SIMPLEX_BI         CallbackCode = 23 // The callback function is called from within the basis identification procedure when the simplex clean-up phase is started.
	CALLBACK_BEGIN_SOLVE_ROOT_RELAX   CallbackCode = 24 // The callback function is called when solution of root relaxation is started.
	CALLBACK_BEGIN_TO_CONIC           CallbackCode = 25 // Begin conic reformulation.
	CALLBACK_BEGIN_WRITE              CallbackCode = 26 // MOSEK has started writing a problem file.
	CALLBACK_CONIC                    CallbackCode = 27 // The callback function is called from within the conic optimizer after the information database has been updated.
	CALLBACK_DUAL_SIMPLEX             CallbackCode = 28 // The callback function is called from within the dual simplex optimizer.
	CALLBACK_END_BI                   CallbackCode = 29 // The callback function is called when the basis identification procedure is terminated.
	CALLBACK_END_CONIC                CallbackCode = 30 // The callback function is called when the conic optimizer is terminated.
	CALLBACK_END_DUAL_BI              CallbackCode = 31 // The callback function is called from within the basis identification procedure when the dual phase is terminated.
	CALLBACK_END_DUAL_SENSITIVITY     CallbackCode = 32 // Dual sensitivity analysis is terminated.
	CALLBACK_END_DUAL_SETUP_BI        CallbackCode = 33 // The callback function is called when the dual BI phase is terminated.
	CALLBACK_END_DUAL_SIMPLEX         CallbackCode = 34 // The callback function is called when the dual simplex optimizer is terminated.
	CALLBACK_END_DUAL_SIMPLEX_BI      CallbackCode = 35 // The callback function is called from within the basis identification procedure when the dual clean-up phase is terminated.
	CALLBACK_END_INFEAS_ANA           CallbackCode = 36 // The callback function is called when the infeasibility analyzer is terminated.
	CALLBACK_END_INTPNT               CallbackCode = 37 // The callback function is called when the interior-point optimizer is terminated.
	CALLBACK_END_LICENSE_WAIT         CallbackCode = 38 // End waiting for license.
	CALLBACK_END_MIO                  CallbackCode = 39 // The callback function is called when the mixed-integer optimizer is terminated.
	CALLBACK_END_OPTIMIZER            CallbackCode = 40 // The callback function is called when the optimizer is terminated.
	CALLBACK_END_PRESOLVE             CallbackCode = 41 // The callback function is called when the presolve is completed.
	CALLBACK_END_PRIMAL_BI            CallbackCode = 42 // The callback function is called from within the basis identification procedure when the primal phase is terminated.
	CALLBACK_END_PRIMAL_REPAIR        CallbackCode = 43 // End primal feasibility repair.
	CALLBACK_END_PRIMAL_SENSITIVITY   CallbackCode = 44 // Primal sensitivity analysis is terminated.
	CALLBACK_END_PRIMAL_SETUP_BI      CallbackCode = 45 // The callback function is called when the primal BI setup is terminated.
	CALLBACK_END_PRIMAL_SIMPLEX       CallbackCode = 46 // The callback function is called when the primal simplex optimizer is terminated.
	CALLBACK_END_PRIMAL_SIMPLEX_BI    CallbackCode = 47 // The callback function is called from within the basis identification procedure when the primal clean-up phase is terminated.
	CALLBACK_END_QCQO_REFORMULATE     CallbackCode = 48 // End QCQO reformulation.
	CALLBACK_END_READ                 CallbackCode = 49 // MOSEK has finished reading a problem file.
	CALLBACK_END_ROOT_CUTGEN          CallbackCode = 50 // The callback function is called when root cut generation is terminated.
	CALLBACK_END_SIMPLEX              CallbackCode = 51 // The callback function is called when the simplex optimizer is terminated.
	CALLBACK_END_SIMPLEX_BI           CallbackCode = 52 // The callback function is called from within the basis identification procedure when the simplex clean-up phase is terminated.
	CALLBACK_END_SOLVE_ROOT_RELAX     CallbackCode = 53 // The callback function is called when solution of root relaxation is terminated.
	CALLBACK_END_TO_CONIC             CallbackCode = 54 // End conic reformulation.
	CALLBACK_END_WRITE                CallbackCode = 55 // MOSEK has finished writing a problem file.
	CALLBACK_IM_BI                    CallbackCode = 56 // The callback function is called from within the basis identification procedure at an intermediate point.
	CALLBACK_IM_CONIC                 CallbackCode = 57 // The callback function is called at an intermediate stage within the conic optimizer where the information database has not been updated.
	CALLBACK_IM_DUAL_BI               CallbackCode = 58 // The callback function is called from within the basis identification procedure at an intermediate point in the dual phase.
	CALLBACK_IM_DUAL_SENSIVITY        CallbackCode = 59 // The callback function is called at an intermediate stage of the dual sensitivity analysis.
	CALLBACK_IM_DUAL_SIMPLEX          CallbackCode = 60 // The callback function is called at an intermediate point in the dual simplex optimizer.
	CALLBACK_IM_INTPNT                CallbackCode = 61 // The callback function is called at an intermediate stage within the interior-point optimizer where the information database has not been updated.
	CALLBACK_IM_LICENSE_WAIT          CallbackCode = 62 // MOSEK is waiting for a license.
	CALLBACK_IM_LU                    CallbackCode = 63 // The callback function is called from within the LU factorization procedure at an intermediate point.
	CALLBACK_IM_MIO                   CallbackCode = 64 // The callback function is called at an intermediate point in the mixed-integer optimizer.
	CALLBACK_IM_MIO_DUAL_SIMPLEX      CallbackCode = 65 // The callback function is called at an intermediate point in the mixed-integer optimizer while running the dual simplex optimizer.
	CALLBACK_IM_MIO_INTPNT            CallbackCode = 66 // The callback function is called at an intermediate point in the mixed-integer optimizer while running the interior-point optimizer.
	CALLBACK_IM_MIO_PRIMAL_SIMPLEX    CallbackCode = 67 // The callback function is called at an intermediate point in the mixed-integer optimizer while running the primal simplex optimizer.
	CALLBACK_IM_ORDER                 CallbackCode = 68 // The callback function is called from within the matrix ordering procedure at an intermediate point.
	CALLBACK_IM_PRESOLVE              CallbackCode = 69 // The callback function is called from within the presolve procedure at an intermediate stage.
	CALLBACK_IM_PRIMAL_BI             CallbackCode = 70 // The callback function is called from within the basis identification procedure at an intermediate point in the primal phase.
	CALLBACK_IM_PRIMAL_SENSIVITY      CallbackCode = 71 // The callback function is called at an intermediate stage of the primal sensitivity analysis.
	CALLBACK_IM_PRIMAL_SIMPLEX        CallbackCode = 72 // The callback function is called at an intermediate point in the primal simplex optimizer.
	CALLBACK_IM_QO_REFORMULATE        CallbackCode = 73 // The callback function is called at an intermediate stage of the conic quadratic reformulation.
	CALLBACK_IM_READ                  CallbackCode = 74 // Intermediate stage in reading.
	CALLBACK_IM_ROOT_CUTGEN           CallbackCode = 75 // The callback is called from within root cut generation at an intermediate stage.
	CALLBACK_IM_SIMPLEX               CallbackCode = 76 // The callback function is called from within the simplex optimizer at an intermediate point.
	CALLBACK_IM_SIMPLEX_BI            CallbackCode = 77 // The callback function is called from within the basis identification procedure at an intermediate point in the simplex clean-up phase.
	CALLBACK_INTPNT                   CallbackCode = 78 // The callback function is called from within the interior-point optimizer after the information database has been updated.
	CALLBACK_NEW_INT_MIO              CallbackCode = 79 // The callback function is called after a new integer solution has been located by the mixed-integer optimizer.
	CALLBACK_PRIMAL_SIMPLEX           CallbackCode = 80 // The callback function is called from within the primal simplex optimizer.
	CALLBACK_READ_OPF                 CallbackCode = 81 // The callback function is called from the OPF reader.
	CALLBACK_READ_OPF_SECTION         CallbackCode = 82 // A chunk of Q non-zeros has been read from a problem file.
	CALLBACK_SOLVING_REMOTE           CallbackCode = 83 // The callback function is called while the task is being solved on a remote server.
	CALLBACK_UPDATE_DUAL_BI           CallbackCode = 84 // The callback function is called from within the basis identification procedure at an intermediate point in the dual phase.
	CALLBACK_UPDATE_DUAL_SIMPLEX      CallbackCode = 85 // The callback function is called in the dual simplex optimizer.
	CALLBACK_UPDATE_DUAL_SIMPLEX_BI   CallbackCode = 86 // The callback function is called from within the basis identification procedure at an intermediate point in the dual simplex clean-up phase.
	CALLBACK_UPDATE_PRESOLVE          CallbackCode = 87 // The callback function is called from within the presolve procedure.
	CALLBACK_UPDATE_PRIMAL_BI         CallbackCode = 88 // The callback function is called from within the basis identification procedure at an intermediate point in the primal phase.
	CALLBACK_UPDATE_PRIMAL_SIMPLEX    CallbackCode = 89 // The callback function is called  in the primal simplex optimizer.
	CALLBACK_UPDATE_PRIMAL_SIMPLEX_BI CallbackCode = 90 // The callback function is called from within the basis identification procedure at an intermediate point in the primal simplex clean-up phase.
	CALLBACK_UPDATE_SIMPLEX           CallbackCode = 91 // The callback function is called from simplex optimizer.
	CALLBACK_WRITE_OPF                CallbackCode = 92 // The callback function is called from the OPF writer.
)

var _CallbackCode_map = map[CallbackCode]string{
	CALLBACK_BEGIN_BI:                 "CALLBACK_BEGIN_BI",
	CALLBACK_BEGIN_CONIC:              "CALLBACK_BEGIN_CONIC",
	CALLBACK_BEGIN_DUAL_BI:            "CALLBACK_BEGIN_DUAL_BI",
	CALLBACK_BEGIN_DUAL_SENSITIVITY:   "CALLBACK_BEGIN_DUAL_SENSITIVITY",
	CALLBACK_BEGIN_DUAL_SETUP_BI:      "CALLBACK_BEGIN_DUAL_SETUP_BI",
	CALLBACK_BEGIN_DUAL_SIMPLEX:       "CALLBACK_BEGIN_DUAL_SIMPLEX",
	CALLBACK_BEGIN_DUAL_SIMPLEX_BI:    "CALLBACK_BEGIN_DUAL_SIMPLEX_BI",
	CALLBACK_BEGIN_INFEAS_ANA:         "CALLBACK_BEGIN_INFEAS_ANA",
	CALLBACK_BEGIN_INTPNT:             "CALLBACK_BEGIN_INTPNT",
	CALLBACK_BEGIN_LICENSE_WAIT:       "CALLBACK_BEGIN_LICENSE_WAIT",
	CALLBACK_BEGIN_MIO:                "CALLBACK_BEGIN_MIO",
	CALLBACK_BEGIN_OPTIMIZER:          "CALLBACK_BEGIN_OPTIMIZER",
	CALLBACK_BEGIN_PRESOLVE:           "CALLBACK_BEGIN_PRESOLVE",
	CALLBACK_BEGIN_PRIMAL_BI:          "CALLBACK_BEGIN_PRIMAL_BI",
	CALLBACK_BEGIN_PRIMAL_REPAIR:      "CALLBACK_BEGIN_PRIMAL_REPAIR",
	CALLBACK_BEGIN_PRIMAL_SENSITIVITY: "CALLBACK_BEGIN_PRIMAL_SENSITIVITY",
	CALLBACK_BEGIN_PRIMAL_SETUP_BI:    "CALLBACK_BEGIN_PRIMAL_SETUP_BI",
	CALLBACK_BEGIN_PRIMAL_SIMPLEX:     "CALLBACK_BEGIN_PRIMAL_SIMPLEX",
	CALLBACK_BEGIN_PRIMAL_SIMPLEX_BI:  "CALLBACK_BEGIN_PRIMAL_SIMPLEX_BI",
	CALLBACK_BEGIN_QCQO_REFORMULATE:   "CALLBACK_BEGIN_QCQO_REFORMULATE",
	CALLBACK_BEGIN_READ:               "CALLBACK_BEGIN_READ",
	CALLBACK_BEGIN_ROOT_CUTGEN:        "CALLBACK_BEGIN_ROOT_CUTGEN",
	CALLBACK_BEGIN_SIMPLEX:            "CALLBACK_BEGIN_SIMPLEX",
	CALLBACK_BEGIN_SIMPLEX_BI:         "CALLBACK_BEGIN_SIMPLEX_BI",
	CALLBACK_BEGIN_SOLVE_ROOT_RELAX:   "CALLBACK_BEGIN_SOLVE_ROOT_RELAX",
	CALLBACK_BEGIN_TO_CONIC:           "CALLBACK_BEGIN_TO_CONIC",
	CALLBACK_BEGIN_WRITE:              "CALLBACK_BEGIN_WRITE",
	CALLBACK_CONIC:                    "CALLBACK_CONIC",
	CALLBACK_DUAL_SIMPLEX:             "CALLBACK_DUAL_SIMPLEX",
	CALLBACK_END_BI:                   "CALLBACK_END_BI",
	CALLBACK_END_CONIC:                "CALLBACK_END_CONIC",
	CALLBACK_END_DUAL_BI:              "CALLBACK_END_DUAL_BI",
	CALLBACK_END_DUAL_SENSITIVITY:     "CALLBACK_END_DUAL_SENSITIVITY",
	CALLBACK_END_DUAL_SETUP_BI:        "CALLBACK_END_DUAL_SETUP_BI",
	CALLBACK_END_DUAL_SIMPLEX:         "CALLBACK_END_DUAL_SIMPLEX",
	CALLBACK_END_DUAL_SIMPLEX_BI:      "CALLBACK_END_DUAL_SIMPLEX_BI",
	CALLBACK_END_INFEAS_ANA:           "CALLBACK_END_INFEAS_ANA",
	CALLBACK_END_INTPNT:               "CALLBACK_END_INTPNT",
	CALLBACK_END_LICENSE_WAIT:         "CALLBACK_END_LICENSE_WAIT",
	CALLBACK_END_MIO:                  "CALLBACK_END_MIO",
	CALLBACK_END_OPTIMIZER:            "CALLBACK_END_OPTIMIZER",
	CALLBACK_END_PRESOLVE:             "CALLBACK_END_PRESOLVE",
	CALLBACK_END_PRIMAL_BI:            "CALLBACK_END_PRIMAL_BI",
	CALLBACK_END_PRIMAL_REPAIR:        "CALLBACK_END_PRIMAL_REPAIR",
	CALLBACK_END_PRIMAL_SENSITIVITY:   "CALLBACK_END_PRIMAL_SENSITIVITY",
	CALLBACK_END_PRIMAL_SETUP_BI:      "CALLBACK_END_PRIMAL_SETUP_BI",
	CALLBACK_END_PRIMAL_SIMPLEX:       "CALLBACK_END_PRIMAL_SIMPLEX",
	CALLBACK_END_PRIMAL_SIMPLEX_BI:    "CALLBACK_END_PRIMAL_SIMPLEX_BI",
	CALLBACK_END_QCQO_REFORMULATE:     "CALLBACK_END_QCQO_REFORMULATE",
	CALLBACK_END_READ:                 "CALLBACK_END_READ",
	CALLBACK_END_ROOT_CUTGEN:          "CALLBACK_END_ROOT_CUTGEN",
	CALLBACK_END_SIMPLEX:              "CALLBACK_END_SIMPLEX",
	CALLBACK_END_SIMPLEX_BI:           "CALLBACK_END_SIMPLEX_BI",
	CALLBACK_END_SOLVE_ROOT_RELAX:     "CALLBACK_END_SOLVE_ROOT_RELAX",
	CALLBACK_END_TO_CONIC:             "CALLBACK_END_TO_CONIC",
	CALLBACK_END_WRITE:                "CALLBACK_END_WRITE",
	CALLBACK_IM_BI:                    "CALLBACK_IM_BI",
	CALLBACK_IM_CONIC:                 "CALLBACK_IM_CONIC",
	CALLBACK_IM_DUAL_BI:               "CALLBACK_IM_DUAL_BI",
	CALLBACK_IM_DUAL_SENSIVITY:        "CALLBACK_IM_DUAL_SENSIVITY",
	CALLBACK_IM_DUAL_SIMPLEX:          "CALLBACK_IM_DUAL_SIMPLEX",
	CALLBACK_IM_INTPNT:                "CALLBACK_IM_INTPNT",
	CALLBACK_IM_LICENSE_WAIT:          "CALLBACK_IM_LICENSE_WAIT",
	CALLBACK_IM_LU:                    "CALLBACK_IM_LU",
	CALLBACK_IM_MIO:                   "CALLBACK_IM_MIO",
	CALLBACK_IM_MIO_DUAL_SIMPLEX:      "CALLBACK_IM_MIO_DUAL_SIMPLEX",
	CALLBACK_IM_MIO_INTPNT:            "CALLBACK_IM_MIO_INTPNT",
	CALLBACK_IM_MIO_PRIMAL_SIMPLEX:    "CALLBACK_IM_MIO_PRIMAL_SIMPLEX",
	CALLBACK_IM_ORDER:                 "CALLBACK_IM_ORDER",
	CALLBACK_IM_PRESOLVE:              "CALLBACK_IM_PRESOLVE",
	CALLBACK_IM_PRIMAL_BI:             "CALLBACK_IM_PRIMAL_BI",
	CALLBACK_IM_PRIMAL_SENSIVITY:      "CALLBACK_IM_PRIMAL_SENSIVITY",
	CALLBACK_IM_PRIMAL_SIMPLEX:        "CALLBACK_IM_PRIMAL_SIMPLEX",
	CALLBACK_IM_QO_REFORMULATE:        "CALLBACK_IM_QO_REFORMULATE",
	CALLBACK_IM_READ:                  "CALLBACK_IM_READ",
	CALLBACK_IM_ROOT_CUTGEN:           "CALLBACK_IM_ROOT_CUTGEN",
	CALLBACK_IM_SIMPLEX:               "CALLBACK_IM_SIMPLEX",
	CALLBACK_IM_SIMPLEX_BI:            "CALLBACK_IM_SIMPLEX_BI",
	CALLBACK_INTPNT:                   "CALLBACK_INTPNT",
	CALLBACK_NEW_INT_MIO:              "CALLBACK_NEW_INT_MIO",
	CALLBACK_PRIMAL_SIMPLEX:           "CALLBACK_PRIMAL_SIMPLEX",
	CALLBACK_READ_OPF:                 "CALLBACK_READ_OPF",
	CALLBACK_READ_OPF_SECTION:         "CALLBACK_READ_OPF_SECTION",
	CALLBACK_SOLVING_REMOTE:           "CALLBACK_SOLVING_REMOTE",
	CALLBACK_UPDATE_DUAL_BI:           "CALLBACK_UPDATE_DUAL_BI",
	CALLBACK_UPDATE_DUAL_SIMPLEX:      "CALLBACK_UPDATE_DUAL_SIMPLEX",
	CALLBACK_UPDATE_DUAL_SIMPLEX_BI:   "CALLBACK_UPDATE_DUAL_SIMPLEX_BI",
	CALLBACK_UPDATE_PRESOLVE:          "CALLBACK_UPDATE_PRESOLVE",
	CALLBACK_UPDATE_PRIMAL_BI:         "CALLBACK_UPDATE_PRIMAL_BI",
	CALLBACK_UPDATE_PRIMAL_SIMPLEX:    "CALLBACK_UPDATE_PRIMAL_SIMPLEX",
	CALLBACK_UPDATE_PRIMAL_SIMPLEX_BI: "CALLBACK_UPDATE_PRIMAL_SIMPLEX_BI",
	CALLBACK_UPDATE_SIMPLEX:           "CALLBACK_UPDATE_SIMPLEX",
	CALLBACK_WRITE_OPF:                "CALLBACK_WRITE_OPF",
}

func (e CallbackCode) String() string {
	if v, ok := _CallbackCode_map[e]; ok {
		return v
	}
	return "CallbackCode(" + strconv.FormatInt(int64(e), 10) + ")"
}
