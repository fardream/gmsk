// Automatically generated by github.com/fardream/gen-gmsk
// function deinitions

package gmsk

// #include <stdlib.h> // for C.free
// #include <mosek.h>
import "C"

import (
	"unsafe"

	"github.com/fardream/gmsk/res"
)

// Axpy is wrapping [MSK_axpy] and
// performs y = a*x + y where x/y are vectors.
//
// [MSK_axpy] returns MSKrescodee and has following parameters
//   - env: MSKenv_t
//   - n: MSKint32t
//   - alpha: MSKrealt
//   - x: const MSKrealt *
//   - y: MSKrealt *
//
// [MSK_axpy]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.axpy
func (env *Env) Axpy(
	n int32,
	alpha float64,
	x *float64,
	y *float64,
) res.Code {
	return res.Code(
		C.MSK_axpy(
			env.getEnv(),
			C.MSKint32t(n),
			C.MSKrealt(alpha),
			(*C.MSKrealt)(x),
			(*C.MSKrealt)(y),
		),
	)
}

// CheckInAll is wrapping [MSK_checkinall]
//
// [MSK_checkinall] returns MSKrescodee and has following parameters
//   - env: MSKenv_t
//
// [MSK_checkinall]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.checkinall
func (env *Env) CheckInAll() res.Code {
	return res.Code(
		C.MSK_checkinall(
			env.getEnv(),
		),
	)
}

// CheckInLicense is wrapping [MSK_checkinlicense]
//
// [MSK_checkinlicense] returns MSKrescodee and has following parameters
//   - env: MSKenv_t
//   - feature: MSKfeaturee
//
// [MSK_checkinlicense]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.checkinlicense
func (env *Env) CheckInLicense(
	feature Feature,
) res.Code {
	return res.Code(
		C.MSK_checkinlicense(
			env.getEnv(),
			C.MSKfeaturee(feature),
		),
	)
}

// CheckMemenv is wrapping [MSK_checkmemenv]
//
// [MSK_checkmemenv] returns MSKrescodee and has following parameters
//   - env: MSKenv_t
//   - file: const char *
//   - line: MSKint32t
//
// [MSK_checkmemenv]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.checkmemenv
func (env *Env) CheckMemenv(
	file string,
	line int32,
) res.Code {
	c_file := C.CString(file)
	defer C.free(unsafe.Pointer(c_file))

	return res.Code(
		C.MSK_checkmemenv(
			env.getEnv(),
			c_file,
			C.MSKint32t(line),
		),
	)
}

// CheckOutlicense is wrapping [MSK_checkoutlicense]
//
// [MSK_checkoutlicense] returns MSKrescodee and has following parameters
//   - env: MSKenv_t
//   - feature: MSKfeaturee
//
// [MSK_checkoutlicense]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.checkoutlicense
func (env *Env) CheckOutlicense(
	feature Feature,
) res.Code {
	return res.Code(
		C.MSK_checkoutlicense(
			env.getEnv(),
			C.MSKfeaturee(feature),
		),
	)
}

// CheckVersion is wrapping [MSK_checkversion]
//
// [MSK_checkversion] returns MSKrescodee and has following parameters
//   - env: MSKenv_t
//   - major: MSKint32t
//   - minor: MSKint32t
//   - revision: MSKint32t
//
// [MSK_checkversion]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.checkversion
func (env *Env) CheckVersion(
	major int32,
	minor int32,
	revision int32,
) res.Code {
	return res.Code(
		C.MSK_checkversion(
			env.getEnv(),
			C.MSKint32t(major),
			C.MSKint32t(minor),
			C.MSKint32t(revision),
		),
	)
}

// Dot is wrapping [MSK_dot] and
// performs a dot product of two vectors
//
// [MSK_dot] returns MSKrescodee and has following parameters
//   - env: MSKenv_t
//   - n: MSKint32t
//   - x: const MSKrealt *
//   - y: const MSKrealt *
//   - xty: MSKrealt *
//
// [MSK_dot]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.dot
func (env *Env) Dot(
	n int32,
	x *float64,
	y *float64,
) (r res.Code, xty float64) {
	r = res.Code(
		C.MSK_dot(
			env.getEnv(),
			C.MSKint32t(n),
			(*C.MSKrealt)(x),
			(*C.MSKrealt)(y),
			(*C.MSKrealt)(&xty),
		),
	)

	return
}

// Echointro is wrapping [MSK_echointro]
//
// [MSK_echointro] returns MSKrescodee and has following parameters
//   - env: MSKenv_t
//   - longver: MSKint32t
//
// [MSK_echointro]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.echointro
func (env *Env) Echointro(
	longver int32,
) res.Code {
	return res.Code(
		C.MSK_echointro(
			env.getEnv(),
			C.MSKint32t(longver),
		),
	)
}

// Expirylicenses is wrapping [MSK_expirylicenses]
//
// [MSK_expirylicenses] returns MSKrescodee and has following parameters
//   - env: MSKenv_t
//   - expiry: MSKint64t *
//
// [MSK_expirylicenses]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.expirylicenses
func (env *Env) Expirylicenses(
	expiry *int64,
) res.Code {
	return res.Code(
		C.MSK_expirylicenses(
			env.getEnv(),
			(*C.MSKint64t)(expiry),
		),
	)
}

// Gemm is wrapping [MSK_gemm] and
// performs a general matrix multiplication
// C = alpha * A * B + beta * C
//
// [MSK_gemm] returns MSKrescodee and has following parameters
//   - env: MSKenv_t
//   - transa: MSKtransposee
//   - transb: MSKtransposee
//   - m: MSKint32t
//   - n: MSKint32t
//   - k: MSKint32t
//   - alpha: MSKrealt
//   - a: const MSKrealt *
//   - b: const MSKrealt *
//   - beta: MSKrealt
//   - c: MSKrealt *
//
// [MSK_gemm]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.gemm
func (env *Env) Gemm(
	transa Transpose,
	transb Transpose,
	m int32,
	n int32,
	k int32,
	alpha float64,
	a *float64,
	b *float64,
	beta float64,
	c *float64,
) res.Code {
	return res.Code(
		C.MSK_gemm(
			env.getEnv(),
			C.MSKtransposee(transa),
			C.MSKtransposee(transb),
			C.MSKint32t(m),
			C.MSKint32t(n),
			C.MSKint32t(k),
			C.MSKrealt(alpha),
			(*C.MSKrealt)(a),
			(*C.MSKrealt)(b),
			C.MSKrealt(beta),
			(*C.MSKrealt)(c),
		),
	)
}

// Gemv is wrapping [MSK_gemv] and
// calculates y = aAx + by, where A is matrix, x,y is vector, and a b are scalars.
//
// [MSK_gemv] returns MSKrescodee and has following parameters
//   - env: MSKenv_t
//   - transa: MSKtransposee
//   - m: MSKint32t
//   - n: MSKint32t
//   - alpha: MSKrealt
//   - a: const MSKrealt *
//   - x: const MSKrealt *
//   - beta: MSKrealt
//   - y: MSKrealt *
//
// [MSK_gemv]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.gemv
func (env *Env) Gemv(
	transa Transpose,
	m int32,
	n int32,
	alpha float64,
	a *float64,
	x *float64,
	beta float64,
	y *float64,
) res.Code {
	return res.Code(
		C.MSK_gemv(
			env.getEnv(),
			C.MSKtransposee(transa),
			C.MSKint32t(m),
			C.MSKint32t(n),
			C.MSKrealt(alpha),
			(*C.MSKrealt)(a),
			(*C.MSKrealt)(x),
			C.MSKrealt(beta),
			(*C.MSKrealt)(y),
		),
	)
}

// GetSymbcondim is wrapping [MSK_getsymbcondim]
//
// [MSK_getsymbcondim] returns MSKrescodee and has following parameters
//   - env: MSKenv_t
//   - num: MSKint32t *
//   - maxlen: size_t *
//
// [MSK_getsymbcondim]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getsymbcondim
func (env *Env) GetSymbcondim(
	num *int32,
	maxlen *uint64,
) res.Code {
	return res.Code(
		C.MSK_getsymbcondim(
			env.getEnv(),
			(*C.MSKint32t)(num),
			(*C.size_t)(maxlen),
		),
	)
}

// Iparvaltosymnam is wrapping [MSK_iparvaltosymnam]
//
// [MSK_iparvaltosymnam] returns MSKrescodee and has following parameters
//   - env: MSKenv_t
//   - whichparam: MSKiparame
//   - whichvalue: MSKint32t
//   - symbolicname: char *
//
// [MSK_iparvaltosymnam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.iparvaltosymnam
func (env *Env) Iparvaltosymnam(
	whichparam IParam,
	whichvalue int32,
	symbolicname *byte,
) res.Code {
	return res.Code(
		C.MSK_iparvaltosymnam(
			env.getEnv(),
			C.MSKiparame(whichparam),
			C.MSKint32t(whichvalue),
			(*C.char)(unsafe.Pointer(symbolicname)),
		),
	)
}

// LinkFiletoenvstream is wrapping [MSK_linkfiletoenvstream]
//
// [MSK_linkfiletoenvstream] returns MSKrescodee and has following parameters
//   - env: MSKenv_t
//   - whichstream: MSKstreamtypee
//   - filename: const char *
//   - append: MSKint32t
//
// [MSK_linkfiletoenvstream]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.linkfiletoenvstream
func (env *Env) LinkFiletoenvstream(
	whichstream StreamType,
	filename string,
	append int32,
) res.Code {
	c_filename := C.CString(filename)
	defer C.free(unsafe.Pointer(c_filename))

	return res.Code(
		C.MSK_linkfiletoenvstream(
			env.getEnv(),
			C.MSKstreamtypee(whichstream),
			c_filename,
			C.MSKint32t(append),
		),
	)
}

// Potrf is wrapping [MSK_potrf] and
// performs Cholesky decomposition of symmetric square matrix a
//
// [MSK_potrf] returns MSKrescodee and has following parameters
//   - env: MSKenv_t
//   - uplo: MSKuploe
//   - n: MSKint32t
//   - a: MSKrealt *
//
// [MSK_potrf]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.potrf
func (env *Env) Potrf(
	uplo UpLo,
	n int32,
	a *float64,
) res.Code {
	return res.Code(
		C.MSK_potrf(
			env.getEnv(),
			C.MSKuploe(uplo),
			C.MSKint32t(n),
			(*C.MSKrealt)(a),
		),
	)
}

// PutLicensecode is wrapping [MSK_putlicensecode]
//
// [MSK_putlicensecode] returns MSKrescodee and has following parameters
//   - env: MSKenv_t
//   - code: const MSKint32t *
//
// [MSK_putlicensecode]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putlicensecode
func (env *Env) PutLicensecode(
	code *int32,
) res.Code {
	return res.Code(
		C.MSK_putlicensecode(
			env.getEnv(),
			(*C.MSKint32t)(code),
		),
	)
}

// PutLicensedebug is wrapping [MSK_putlicensedebug]
//
// [MSK_putlicensedebug] returns MSKrescodee and has following parameters
//   - env: MSKenv_t
//   - licdebug: MSKint32t
//
// [MSK_putlicensedebug]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putlicensedebug
func (env *Env) PutLicensedebug(
	licdebug int32,
) res.Code {
	return res.Code(
		C.MSK_putlicensedebug(
			env.getEnv(),
			C.MSKint32t(licdebug),
		),
	)
}

// PutLicensepath is wrapping [MSK_putlicensepath]
//
// [MSK_putlicensepath] returns MSKrescodee and has following parameters
//   - env: MSKenv_t
//   - licensepath: const char *
//
// [MSK_putlicensepath]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putlicensepath
func (env *Env) PutLicensepath(
	licensepath string,
) res.Code {
	c_licensepath := C.CString(licensepath)
	defer C.free(unsafe.Pointer(c_licensepath))

	return res.Code(
		C.MSK_putlicensepath(
			env.getEnv(),
			c_licensepath,
		),
	)
}

// PutLicensewait is wrapping [MSK_putlicensewait]
//
// [MSK_putlicensewait] returns MSKrescodee and has following parameters
//   - env: MSKenv_t
//   - licwait: MSKint32t
//
// [MSK_putlicensewait]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putlicensewait
func (env *Env) PutLicensewait(
	licwait int32,
) res.Code {
	return res.Code(
		C.MSK_putlicensewait(
			env.getEnv(),
			C.MSKint32t(licwait),
		),
	)
}

// Resetexpirylicenses is wrapping [MSK_resetexpirylicenses]
//
// [MSK_resetexpirylicenses] returns MSKrescodee and has following parameters
//   - env: MSKenv_t
//
// [MSK_resetexpirylicenses]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.resetexpirylicenses
func (env *Env) Resetexpirylicenses() res.Code {
	return res.Code(
		C.MSK_resetexpirylicenses(
			env.getEnv(),
		),
	)
}

// SparseTriangularsolvedense is wrapping [MSK_sparsetriangularsolvedense]
//
// [MSK_sparsetriangularsolvedense] returns MSKrescodee and has following parameters
//   - env: MSKenv_t
//   - transposed: MSKtransposee
//   - n: MSKint32t
//   - lnzc: const MSKint32t *
//   - lptrc: const MSKint64t *
//   - lensubnval: MSKint64t
//   - lsubc: const MSKint32t *
//   - lvalc: const MSKrealt *
//   - b: MSKrealt *
//
// [MSK_sparsetriangularsolvedense]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.sparsetriangularsolvedense
func (env *Env) SparseTriangularsolvedense(
	transposed Transpose,
	n int32,
	lnzc *int32,
	lptrc *int64,
	lensubnval int64,
	lsubc *int32,
	lvalc *float64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_sparsetriangularsolvedense(
			env.getEnv(),
			C.MSKtransposee(transposed),
			C.MSKint32t(n),
			(*C.MSKint32t)(lnzc),
			(*C.MSKint64t)(lptrc),
			C.MSKint64t(lensubnval),
			(*C.MSKint32t)(lsubc),
			(*C.MSKrealt)(lvalc),
			(*C.MSKrealt)(b),
		),
	)
}

// Syeig is wrapping [MSK_syeig] and
// calculates the eigen values of a symmetric matrix.
//
// [MSK_syeig] returns MSKrescodee and has following parameters
//   - env: MSKenv_t
//   - uplo: MSKuploe
//   - n: MSKint32t
//   - a: const MSKrealt *
//   - w: MSKrealt *
//
// [MSK_syeig]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.syeig
func (env *Env) Syeig(
	uplo UpLo,
	n int32,
	a *float64,
	w *float64,
) res.Code {
	return res.Code(
		C.MSK_syeig(
			env.getEnv(),
			C.MSKuploe(uplo),
			C.MSKint32t(n),
			(*C.MSKrealt)(a),
			(*C.MSKrealt)(w),
		),
	)
}

// Syevd is wrapping [MSK_syevd] and
// calculates the eigen values and eigen vectors of a symmetric matrix.
//
// [MSK_syevd] returns MSKrescodee and has following parameters
//   - env: MSKenv_t
//   - uplo: MSKuploe
//   - n: MSKint32t
//   - a: MSKrealt *
//   - w: MSKrealt *
//
// [MSK_syevd]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.syevd
func (env *Env) Syevd(
	uplo UpLo,
	n int32,
	a *float64,
	w *float64,
) res.Code {
	return res.Code(
		C.MSK_syevd(
			env.getEnv(),
			C.MSKuploe(uplo),
			C.MSKint32t(n),
			(*C.MSKrealt)(a),
			(*C.MSKrealt)(w),
		),
	)
}

// Syrk is wrapping [MSK_syrk] and
// performs rank k update of matrix C, C = aAA^T + bC where A/C is matrix and a, b are scalars.
//
// [MSK_syrk] returns MSKrescodee and has following parameters
//   - env: MSKenv_t
//   - uplo: MSKuploe
//   - trans: MSKtransposee
//   - n: MSKint32t
//   - k: MSKint32t
//   - alpha: MSKrealt
//   - a: const MSKrealt *
//   - beta: MSKrealt
//   - c: MSKrealt *
//
// [MSK_syrk]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.syrk
func (env *Env) Syrk(
	uplo UpLo,
	trans Transpose,
	n int32,
	k int32,
	alpha float64,
	a *float64,
	beta float64,
	c *float64,
) res.Code {
	return res.Code(
		C.MSK_syrk(
			env.getEnv(),
			C.MSKuploe(uplo),
			C.MSKtransposee(trans),
			C.MSKint32t(n),
			C.MSKint32t(k),
			C.MSKrealt(alpha),
			(*C.MSKrealt)(a),
			C.MSKrealt(beta),
			(*C.MSKrealt)(c),
		),
	)
}

// UnlinkFuncfromenvstream is wrapping [MSK_unlinkfuncfromenvstream]
//
// [MSK_unlinkfuncfromenvstream] returns MSKrescodee and has following parameters
//   - env: MSKenv_t
//   - whichstream: MSKstreamtypee
//
// [MSK_unlinkfuncfromenvstream]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.unlinkfuncfromenvstream
func (env *Env) UnlinkFuncfromenvstream(
	whichstream StreamType,
) res.Code {
	return res.Code(
		C.MSK_unlinkfuncfromenvstream(
			env.getEnv(),
			C.MSKstreamtypee(whichstream),
		),
	)
}
