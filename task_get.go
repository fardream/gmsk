// Automatically generated by github.com/fardream/gen-gmsk
// function deinitions

package gmsk

// #include <stdlib.h> // for C.free
// #include <mosek.h>
import "C"

import (
	"unsafe"

	"github.com/fardream/gmsk/res"
)

// GetAccb is wrapping [MSK_getaccb],
// Obtains the additional constant term vector appearing in the affine conic constraint.
//
// Arguments:
//
//   - `accidx` Index of the affine conic constraint.
//   - `b` The vector b appearing in the constraint.
//
// [MSK_getaccb]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getaccb
func (task *Task) GetAccb(
	accidx int64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_getaccb(
			task.task,
			C.MSKint64t(accidx),
			(*C.MSKrealt)(b),
		),
	)
}

// GetAccbarfBlockTriplet is wrapping [MSK_getaccbarfblocktriplet],
// Obtains barF, implied by the ACCs, in block triplet form.
//
// Arguments:
//
//   - `acc_afe` Index of the AFE within the concatenated list of AFEs in ACCs.
//   - `bar_var` Symmetric matrix variable index.
//   - `blk_row` Block row index.
//   - `blk_col` Block column index.
//   - `blk_val` The numerical value associated with each block triplet.
//
// Returns:
//
//   - `numtrip` Number of elements in the block triplet form.
//
// [MSK_getaccbarfblocktriplet]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getaccbarfblocktriplet
func (task *Task) GetAccbarfBlockTriplet(
	maxnumtrip int64,
	numtrip *int64,
	acc_afe *int64,
	bar_var *int32,
	blk_row *int32,
	blk_col *int32,
	blk_val *float64,
) res.Code {
	return res.Code(
		C.MSK_getaccbarfblocktriplet(
			task.task,
			C.MSKint64t(maxnumtrip),
			(*C.MSKint64t)(numtrip),
			(*C.MSKint64t)(acc_afe),
			(*C.MSKint32t)(bar_var),
			(*C.MSKint32t)(blk_row),
			(*C.MSKint32t)(blk_col),
			(*C.MSKrealt)(blk_val),
		),
	)
}

// GetAccbarfnumBlockTriplets is wrapping [MSK_getaccbarfnumblocktriplets],
// Obtains an upper bound on the number of elements in the block triplet form of barf, as used within the ACCs.
//
// Returns:
//
//   - `numtrip` An upper bound on the number of elements in the block triplet form of barf, as used within the ACCs.
//
// [MSK_getaccbarfnumblocktriplets]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getaccbarfnumblocktriplets
func (task *Task) GetAccbarfnumBlockTriplets(
	numtrip *int64,
) res.Code {
	return res.Code(
		C.MSK_getaccbarfnumblocktriplets(
			task.task,
			(*C.MSKint64t)(numtrip),
		),
	)
}

// GetAccDomain is wrapping [MSK_getaccdomain],
// Obtains the domain appearing in the affine conic constraint.
//
// Arguments:
//
//   - `accidx` The index of the affine conic constraint.
//   - `domidx` The index of domain in the affine conic constraint.
//
// [MSK_getaccdomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getaccdomain
func (task *Task) GetAccDomain(
	accidx int64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_getaccdomain(
			task.task,
			C.MSKint64t(accidx),
			(*C.MSKint64t)(domidx),
		),
	)
}

// GetAccDotYs is wrapping [MSK_getaccdotys],
// Obtains the doty vector for a solution.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `doty` The dual values of affine conic constraints. The array should have length equal to the sum of dimensions of all affine conic constraints.
//
// [MSK_getaccdotys]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getaccdotys
func (task *Task) GetAccDotYs(
	whichsol SolType,
	doty *float64,
) res.Code {
	return res.Code(
		C.MSK_getaccdotys(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(doty),
		),
	)
}

// GetAccFTrip is wrapping [MSK_getaccftrip],
// Obtains the F matrix (implied by the AFE ordering within the ACCs) in triplet format.
//
// Arguments:
//
//   - `frow` Row indices of nonzeros in the implied F matrix.
//   - `fcol` Column indices of nonzeros in the implied F matrix.
//   - `fval` Values of nonzero entries in the implied F matrix.
//
// [MSK_getaccftrip]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getaccftrip
func (task *Task) GetAccFTrip(
	frow *int64,
	fcol *int32,
	fval *float64,
) res.Code {
	return res.Code(
		C.MSK_getaccftrip(
			task.task,
			(*C.MSKint64t)(frow),
			(*C.MSKint32t)(fcol),
			(*C.MSKrealt)(fval),
		),
	)
}

// GetAccGVector is wrapping [MSK_getaccgvector],
// The g vector as used within the ACCs.
//
// Arguments:
//
//   - `g` The g vector as used within the ACCs.
//
// [MSK_getaccgvector]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getaccgvector
func (task *Task) GetAccGVector(
	g *float64,
) res.Code {
	return res.Code(
		C.MSK_getaccgvector(
			task.task,
			(*C.MSKrealt)(g),
		),
	)
}

// GetAccntot is wrapping [MSK_getaccntot],
// Obtains the total dimension of all affine conic constraints.
//
// Returns:
//
//   - `n` The total dimension of all affine conic constraints.
//
// [MSK_getaccntot]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getaccntot
func (task *Task) GetAccntot(
	n *int64,
) res.Code {
	return res.Code(
		C.MSK_getaccntot(
			task.task,
			(*C.MSKint64t)(n),
		),
	)
}

// GetAccs is wrapping [MSK_getaccs],
// Obtains full data of all affine conic constraints.
//
// Arguments:
//
//   - `domidxlist` The list of domains appearing in all affine conic constraints.
//   - `afeidxlist` The concatenation of index lists of affine expressions appearing in all affine conic constraints.
//   - `b` The concatenation of vectors b appearing in all affine conic constraints.
//
// [MSK_getaccs]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getaccs
func (task *Task) GetAccs(
	domidxlist *int64,
	afeidxlist *int64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_getaccs(
			task.task,
			(*C.MSKint64t)(domidxlist),
			(*C.MSKint64t)(afeidxlist),
			(*C.MSKrealt)(b),
		),
	)
}

// GetACol is wrapping [MSK_getacol],
// Obtains one column of the linear constraint matrix.
//
// Arguments:
//
//   - `j` Index of the column.
//   - `nzj` Number of non-zeros in the column obtained.
//   - `subj` Row indices of the non-zeros in the column obtained.
//   - `valj` Numerical values in the column obtained.
//
// [MSK_getacol]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getacol
func (task *Task) GetACol(
	j int32,
	nzj *int32,
	subj *int32,
	valj *float64,
) res.Code {
	return res.Code(
		C.MSK_getacol(
			task.task,
			C.MSKint32t(j),
			(*C.MSKint32t)(nzj),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(valj),
		),
	)
}

// GetAColSlice64 is wrapping [MSK_getacolslice64]
//
// [MSK_getacolslice64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getacolslice64
func (task *Task) GetAColSlice64(
	first int32,
	last int32,
	maxnumnz int64,
	ptrb *int64,
	ptre *int64,
	sub *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_getacolslice64(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			C.MSKint64t(maxnumnz),
			(*C.MSKint64t)(ptrb),
			(*C.MSKint64t)(ptre),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(val),
		),
	)
}

// GetAfeBarFBlockTriplet is wrapping [MSK_getafebarfblocktriplet],
// Obtains barF in block triplet form.
//
// Arguments:
//
//   - `afeidx` Constraint index.
//   - `barvaridx` Symmetric matrix variable index.
//   - `subk` Block row index.
//   - `subl` Block column index.
//   - `valkl` The numerical value associated with each block triplet.
//
// Returns:
//
//   - `numtrip` Number of elements in the block triplet form.
//
// [MSK_getafebarfblocktriplet]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getafebarfblocktriplet
func (task *Task) GetAfeBarFBlockTriplet(
	maxnumtrip int64,
	numtrip *int64,
	afeidx *int64,
	barvaridx *int32,
	subk *int32,
	subl *int32,
	valkl *float64,
) res.Code {
	return res.Code(
		C.MSK_getafebarfblocktriplet(
			task.task,
			C.MSKint64t(maxnumtrip),
			(*C.MSKint64t)(numtrip),
			(*C.MSKint64t)(afeidx),
			(*C.MSKint32t)(barvaridx),
			(*C.MSKint32t)(subk),
			(*C.MSKint32t)(subl),
			(*C.MSKrealt)(valkl),
		),
	)
}

// GetAfeBarFNumBlockTriplets is wrapping [MSK_getafebarfnumblocktriplets],
// Obtains an upper bound on the number of elements in the block triplet form of barf.
//
// Returns:
//
//   - `numtrip` An upper bound on the number of elements in the block triplet form of barf.
//
// [MSK_getafebarfnumblocktriplets]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getafebarfnumblocktriplets
func (task *Task) GetAfeBarFNumBlockTriplets(
	numtrip *int64,
) res.Code {
	return res.Code(
		C.MSK_getafebarfnumblocktriplets(
			task.task,
			(*C.MSKint64t)(numtrip),
		),
	)
}

// GetAfeBarFNumrowentries is wrapping [MSK_getafebarfnumrowentries],
// Obtains the number of nonzero entries in a row of barF.
//
// Arguments:
//
//   - `afeidx` Row index of barF.
//
// Returns:
//
//   - `numentr` Number of nonzero entries in a row of barF.
//
// [MSK_getafebarfnumrowentries]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getafebarfnumrowentries
func (task *Task) GetAfeBarFNumrowentries(
	afeidx int64,
	numentr *int32,
) res.Code {
	return res.Code(
		C.MSK_getafebarfnumrowentries(
			task.task,
			C.MSKint64t(afeidx),
			(*C.MSKint32t)(numentr),
		),
	)
}

// GetAfeBarFRow is wrapping [MSK_getafebarfrow],
// Obtains nonzero entries in one row of barF.
//
// Arguments:
//
//   - `afeidx` Row index of barF.
//   - `barvaridx` Semidefinite variable indices.
//   - `ptrterm` Pointers to the description of entries.
//   - `numterm` Number of terms in each entry.
//   - `termidx` Indices of semidefinite matrices from E.
//   - `termweight` Weights appearing in the weighted sum representation.
//
// [MSK_getafebarfrow]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getafebarfrow
func (task *Task) GetAfeBarFRow(
	afeidx int64,
	barvaridx *int32,
	ptrterm *int64,
	numterm *int64,
	termidx *int64,
	termweight *float64,
) res.Code {
	return res.Code(
		C.MSK_getafebarfrow(
			task.task,
			C.MSKint64t(afeidx),
			(*C.MSKint32t)(barvaridx),
			(*C.MSKint64t)(ptrterm),
			(*C.MSKint64t)(numterm),
			(*C.MSKint64t)(termidx),
			(*C.MSKrealt)(termweight),
		),
	)
}

// GetAfeBarFRowInfo is wrapping [MSK_getafebarfrowinfo],
// Obtains information about one row of barF.
//
// Arguments:
//
//   - `afeidx` Row index of barF.
//   - `numentr` Number of nonzero entries in a row of barF.
//   - `numterm` Number of terms in the weighted sums representation of the row of barF.
//
// [MSK_getafebarfrowinfo]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getafebarfrowinfo
func (task *Task) GetAfeBarFRowInfo(
	afeidx int64,
	numentr *int32,
	numterm *int64,
) res.Code {
	return res.Code(
		C.MSK_getafebarfrowinfo(
			task.task,
			C.MSKint64t(afeidx),
			(*C.MSKint32t)(numentr),
			(*C.MSKint64t)(numterm),
		),
	)
}

// GetAfeFRow is wrapping [MSK_getafefrow],
// Obtains one row of F in sparse format.
//
// Arguments:
//
//   - `afeidx` Row index.
//   - `numnz` Number of non-zeros in the row obtained.
//   - `varidx` Column indices of the non-zeros in the row obtained.
//   - `val` Values of the non-zeros in the row obtained.
//
// [MSK_getafefrow]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getafefrow
func (task *Task) GetAfeFRow(
	afeidx int64,
	numnz *int32,
	varidx *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_getafefrow(
			task.task,
			C.MSKint64t(afeidx),
			(*C.MSKint32t)(numnz),
			(*C.MSKint32t)(varidx),
			(*C.MSKrealt)(val),
		),
	)
}

// GetAfeFTrip is wrapping [MSK_getafeftrip],
// Obtains the F matrix in triplet format.
//
// Arguments:
//
//   - `afeidx` Row indices of nonzeros.
//   - `varidx` Column indices of nonzeros.
//   - `val` Values of nonzero entries.
//
// [MSK_getafeftrip]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getafeftrip
func (task *Task) GetAfeFTrip(
	afeidx *int64,
	varidx *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_getafeftrip(
			task.task,
			(*C.MSKint64t)(afeidx),
			(*C.MSKint32t)(varidx),
			(*C.MSKrealt)(val),
		),
	)
}

// GetAfeG is wrapping [MSK_getafeg],
// Obtains a single coefficient in g.
//
// Arguments:
//
//   - `afeidx` Element index.
//
// Returns:
//
//   - `g` The entry in g.
//
// [MSK_getafeg]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getafeg
func (task *Task) GetAfeG(
	afeidx int64,
	g *float64,
) res.Code {
	return res.Code(
		C.MSK_getafeg(
			task.task,
			C.MSKint64t(afeidx),
			(*C.MSKrealt)(g),
		),
	)
}

// GetAij is wrapping [MSK_getaij],
// Obtains a single coefficient in linear constraint matrix.
//
// Arguments:
//
//   - `i` Row index of the coefficient to be returned.
//   - `j` Column index of the coefficient to be returned.
//
// Returns:
//
//   - `aij` Returns the requested coefficient.
//
// [MSK_getaij]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getaij
func (task *Task) GetAij(
	i int32,
	j int32,
	aij *float64,
) res.Code {
	return res.Code(
		C.MSK_getaij(
			task.task,
			C.MSKint32t(i),
			C.MSKint32t(j),
			(*C.MSKrealt)(aij),
		),
	)
}

// GetARow is wrapping [MSK_getarow],
// Obtains one row of the linear constraint matrix.
//
// Arguments:
//
//   - `i` Index of the row.
//   - `nzi` Number of non-zeros in the row obtained.
//   - `subi` Column indices of the non-zeros in the row obtained.
//   - `vali` Numerical values of the row obtained.
//
// [MSK_getarow]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getarow
func (task *Task) GetARow(
	i int32,
	nzi *int32,
	subi *int32,
	vali *float64,
) res.Code {
	return res.Code(
		C.MSK_getarow(
			task.task,
			C.MSKint32t(i),
			(*C.MSKint32t)(nzi),
			(*C.MSKint32t)(subi),
			(*C.MSKrealt)(vali),
		),
	)
}

// GetARowSlice64 is wrapping [MSK_getarowslice64]
//
// [MSK_getarowslice64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getarowslice64
func (task *Task) GetARowSlice64(
	first int32,
	last int32,
	maxnumnz int64,
	ptrb *int64,
	ptre *int64,
	sub *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_getarowslice64(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			C.MSKint64t(maxnumnz),
			(*C.MSKint64t)(ptrb),
			(*C.MSKint64t)(ptre),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(val),
		),
	)
}

// GetAtrip is wrapping [MSK_getatrip],
// Obtains the A matrix in sparse triplet format.
//
// Arguments:
//
//   - `subi` Constraint subscripts.
//   - `subj` Column subscripts.
//   - `val` Values.
//
// [MSK_getatrip]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getatrip
func (task *Task) GetAtrip(
	maxnumnz int64,
	subi *int32,
	subj *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_getatrip(
			task.task,
			C.MSKint64t(maxnumnz),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(val),
		),
	)
}

// GetAtruncatetol is wrapping [MSK_getatruncatetol],
// Gets the current A matrix truncation threshold.
//
// Arguments:
//
//   - `tolzero` Truncation tolerance.
//
// [MSK_getatruncatetol]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getatruncatetol
func (task *Task) GetAtruncatetol(
	tolzero *float64,
) res.Code {
	return res.Code(
		C.MSK_getatruncatetol(
			task.task,
			(*C.MSKrealt)(tolzero),
		),
	)
}

// GetBarABlockTriplet is wrapping [MSK_getbarablocktriplet],
// Obtains barA in block triplet form.
//
// Arguments:
//
//   - `subi` Constraint index.
//   - `subj` Symmetric matrix variable index.
//   - `subk` Block row index.
//   - `subl` Block column index.
//   - `valijkl` The numerical value associated with each block triplet.
//
// Returns:
//
//   - `num` Number of elements in the block triplet form.
//
// [MSK_getbarablocktriplet]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getbarablocktriplet
func (task *Task) GetBarABlockTriplet(
	maxnum int64,
	num *int64,
	subi *int32,
	subj *int32,
	subk *int32,
	subl *int32,
	valijkl *float64,
) res.Code {
	return res.Code(
		C.MSK_getbarablocktriplet(
			task.task,
			C.MSKint64t(maxnum),
			(*C.MSKint64t)(num),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKint32t)(subk),
			(*C.MSKint32t)(subl),
			(*C.MSKrealt)(valijkl),
		),
	)
}

// GetBarAIdx is wrapping [MSK_getbaraidx],
// Obtains information about an element in barA.
//
// Arguments:
//
//   - `idx` Position of the element in the vectorized form.
//   - `i` Row index of the element at position idx.
//   - `j` Column index of the element at position idx.
//   - `sub` A list indexes of the elements from symmetric matrix storage that appear in the weighted sum.
//   - `weights` The weights associated with each term in the weighted sum.
//
// Returns:
//
//   - `num` Number of terms in weighted sum that forms the element.
//
// [MSK_getbaraidx]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getbaraidx
func (task *Task) GetBarAIdx(
	idx int64,
	maxnum int64,
	i *int32,
	j *int32,
	num *int64,
	sub *int64,
	weights *float64,
) res.Code {
	return res.Code(
		C.MSK_getbaraidx(
			task.task,
			C.MSKint64t(idx),
			C.MSKint64t(maxnum),
			(*C.MSKint32t)(i),
			(*C.MSKint32t)(j),
			(*C.MSKint64t)(num),
			(*C.MSKint64t)(sub),
			(*C.MSKrealt)(weights),
		),
	)
}

// GetBarAIdxij is wrapping [MSK_getbaraidxij],
// Obtains information about an element in barA.
//
// Arguments:
//
//   - `idx` Position of the element in the vectorized form.
//   - `i` Row index of the element at position idx.
//   - `j` Column index of the element at position idx.
//
// [MSK_getbaraidxij]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getbaraidxij
func (task *Task) GetBarAIdxij(
	idx int64,
	i *int32,
	j *int32,
) res.Code {
	return res.Code(
		C.MSK_getbaraidxij(
			task.task,
			C.MSKint64t(idx),
			(*C.MSKint32t)(i),
			(*C.MSKint32t)(j),
		),
	)
}

// GetBarAIdxInfo is wrapping [MSK_getbaraidxinfo],
// Obtains the number of terms in the weighted sum that form a particular element in barA.
//
// Arguments:
//
//   - `idx` The internal position of the element for which information should be obtained.
//
// Returns:
//
//   - `num` Number of terms in the weighted sum that form the specified element in barA.
//
// [MSK_getbaraidxinfo]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getbaraidxinfo
func (task *Task) GetBarAIdxInfo(
	idx int64,
	num *int64,
) res.Code {
	return res.Code(
		C.MSK_getbaraidxinfo(
			task.task,
			C.MSKint64t(idx),
			(*C.MSKint64t)(num),
		),
	)
}

// GetBarASparsity is wrapping [MSK_getbarasparsity],
// Obtains the sparsity pattern of the barA matrix.
//
// Arguments:
//
//   - `numnz` Number of nonzero elements in barA.
//   - `idxij` Position of each nonzero element in the vector representation of barA.
//
// [MSK_getbarasparsity]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getbarasparsity
func (task *Task) GetBarASparsity(
	maxnumnz int64,
	numnz *int64,
	idxij *int64,
) res.Code {
	return res.Code(
		C.MSK_getbarasparsity(
			task.task,
			C.MSKint64t(maxnumnz),
			(*C.MSKint64t)(numnz),
			(*C.MSKint64t)(idxij),
		),
	)
}

// GetBarCBlockTriplet is wrapping [MSK_getbarcblocktriplet],
// Obtains barC in block triplet form.
//
// Arguments:
//
//   - `subj` Symmetric matrix variable index.
//   - `subk` Block row index.
//   - `subl` Block column index.
//   - `valjkl` The numerical value associated with each block triplet.
//
// Returns:
//
//   - `num` Number of elements in the block triplet form.
//
// [MSK_getbarcblocktriplet]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getbarcblocktriplet
func (task *Task) GetBarCBlockTriplet(
	maxnum int64,
	num *int64,
	subj *int32,
	subk *int32,
	subl *int32,
	valjkl *float64,
) res.Code {
	return res.Code(
		C.MSK_getbarcblocktriplet(
			task.task,
			C.MSKint64t(maxnum),
			(*C.MSKint64t)(num),
			(*C.MSKint32t)(subj),
			(*C.MSKint32t)(subk),
			(*C.MSKint32t)(subl),
			(*C.MSKrealt)(valjkl),
		),
	)
}

// GetBarCIdx is wrapping [MSK_getbarcidx],
// Obtains information about an element in barc.
//
// Arguments:
//
//   - `idx` Index of the element for which information should be obtained.
//   - `j` Row index in barc.
//   - `num` Number of terms in the weighted sum.
//   - `sub` Elements appearing the weighted sum.
//   - `weights` Weights of terms in the weighted sum.
//
// [MSK_getbarcidx]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getbarcidx
func (task *Task) GetBarCIdx(
	idx int64,
	maxnum int64,
	j *int32,
	num *int64,
	sub *int64,
	weights *float64,
) res.Code {
	return res.Code(
		C.MSK_getbarcidx(
			task.task,
			C.MSKint64t(idx),
			C.MSKint64t(maxnum),
			(*C.MSKint32t)(j),
			(*C.MSKint64t)(num),
			(*C.MSKint64t)(sub),
			(*C.MSKrealt)(weights),
		),
	)
}

// GetBarCIdxInfo is wrapping [MSK_getbarcidxinfo],
// Obtains information about an element in barc.
//
// Arguments:
//
//   - `idx` Index of the element for which information should be obtained. The value is an index of a symmetric sparse variable.
//
// Returns:
//
//   - `num` Number of terms that appear in the weighted sum that forms the requested element.
//
// [MSK_getbarcidxinfo]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getbarcidxinfo
func (task *Task) GetBarCIdxInfo(
	idx int64,
	num *int64,
) res.Code {
	return res.Code(
		C.MSK_getbarcidxinfo(
			task.task,
			C.MSKint64t(idx),
			(*C.MSKint64t)(num),
		),
	)
}

// GetBarCIdxj is wrapping [MSK_getbarcidxj],
// Obtains the row index of an element in barc.
//
// Arguments:
//
//   - `idx` Index of the element for which information should be obtained.
//   - `j` Row index in barc.
//
// [MSK_getbarcidxj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getbarcidxj
func (task *Task) GetBarCIdxj(
	idx int64,
	j *int32,
) res.Code {
	return res.Code(
		C.MSK_getbarcidxj(
			task.task,
			C.MSKint64t(idx),
			(*C.MSKint32t)(j),
		),
	)
}

// GetBarCSparsity is wrapping [MSK_getbarcsparsity],
// Get the positions of the nonzero elements in barc.
//
// Arguments:
//
//   - `numnz` Number of nonzero elements in barc.
//   - `idxj` Internal positions of the nonzeros elements in barc.
//
// [MSK_getbarcsparsity]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getbarcsparsity
func (task *Task) GetBarCSparsity(
	maxnumnz int64,
	numnz *int64,
	idxj *int64,
) res.Code {
	return res.Code(
		C.MSK_getbarcsparsity(
			task.task,
			C.MSKint64t(maxnumnz),
			(*C.MSKint64t)(numnz),
			(*C.MSKint64t)(idxj),
		),
	)
}

// GetBarsj is wrapping [MSK_getbarsj],
// Obtains the dual solution for a semidefinite variable.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `j` Index of the semidefinite variable.
//   - `barsj` Value of the j'th dual variable of barx.
//
// [MSK_getbarsj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getbarsj
func (task *Task) GetBarsj(
	whichsol SolType,
	j int32,
	barsj *float64,
) res.Code {
	return res.Code(
		C.MSK_getbarsj(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(j),
			(*C.MSKrealt)(barsj),
		),
	)
}

// GetBarvarnameindex is wrapping [MSK_getbarvarnameindex],
// Obtains the index of semidefinite variable from its name.
//
// Arguments:
//
//   - `somename` The name of the variable.
//   - `asgn` Non-zero if the name somename is assigned to some semidefinite variable.
//
// Returns:
//
//   - `index` The index of a semidefinite variable with the name somename (if one exists).
//
// [MSK_getbarvarnameindex]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getbarvarnameindex
func (task *Task) GetBarvarnameindex(
	somename string,
	asgn *int32,
	index *int32,
) res.Code {
	c_somename := C.CString(somename)
	defer C.free(unsafe.Pointer(c_somename))

	return res.Code(
		C.MSK_getbarvarnameindex(
			task.task,
			c_somename,
			(*C.MSKint32t)(asgn),
			(*C.MSKint32t)(index),
		),
	)
}

// GetBarxj is wrapping [MSK_getbarxj],
// Obtains the primal solution for a semidefinite variable.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `j` Index of the semidefinite variable.
//   - `barxj` Value of the j'th variable of barx.
//
// [MSK_getbarxj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getbarxj
func (task *Task) GetBarxj(
	whichsol SolType,
	j int32,
	barxj *float64,
) res.Code {
	return res.Code(
		C.MSK_getbarxj(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(j),
			(*C.MSKrealt)(barxj),
		),
	)
}

// GetC is wrapping [MSK_getc],
// Obtains all objective coefficients.
//
// Arguments:
//
//   - `c` Linear terms of the objective as a dense vector. The length is the number of variables.
//
// [MSK_getc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getc
func (task *Task) GetC(
	c *float64,
) res.Code {
	return res.Code(
		C.MSK_getc(
			task.task,
			(*C.MSKrealt)(c),
		),
	)
}

// GetCFix is wrapping [MSK_getcfix],
// Obtains the fixed term in the objective.
//
// Returns:
//
//   - `cfix` Fixed term in the objective.
//
// [MSK_getcfix]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getcfix
func (task *Task) GetCFix(
	cfix *float64,
) res.Code {
	return res.Code(
		C.MSK_getcfix(
			task.task,
			(*C.MSKrealt)(cfix),
		),
	)
}

// GetCj is wrapping [MSK_getcj],
// Obtains one objective coefficient.
//
// Arguments:
//
//   - `j` Index of the variable for which the c coefficient should be obtained.
//   - `cj` The c coefficient value.
//
// [MSK_getcj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getcj
func (task *Task) GetCj(
	j int32,
	cj *float64,
) res.Code {
	return res.Code(
		C.MSK_getcj(
			task.task,
			C.MSKint32t(j),
			(*C.MSKrealt)(cj),
		),
	)
}

// GetConbound is wrapping [MSK_getconbound],
// Obtains bound information for one constraint.
//
// Arguments:
//
//   - `i` Index of the constraint for which the bound information should be obtained.
//   - `bk` Bound keys.
//   - `bl` Values for lower bounds.
//   - `bu` Values for upper bounds.
//
// [MSK_getconbound]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getconbound
func (task *Task) GetConbound(
	i int32,
	bk *BoundKey,
	bl *float64,
	bu *float64,
) res.Code {
	return res.Code(
		C.MSK_getconbound(
			task.task,
			C.MSKint32t(i),
			(*C.MSKboundkeye)(bk),
			(*C.MSKrealt)(bl),
			(*C.MSKrealt)(bu),
		),
	)
}

// GetCone is wrapping [MSK_getcone],
// Obtains a cone.
//
// Arguments:
//
//   - `k` Index of the cone.
//   - `ct` Specifies the type of the cone.
//   - `conepar` For the power cone it denotes the exponent alpha. For other cone types it is unused and can be set to 0.
//   - `nummem` Number of member variables in the cone.
//   - `submem` Variable subscripts of the members in the cone.
//
// Deprecated: [MSK_getcone]/GetCone is deprecated by mosek and will be removed in a future release.
//
// [MSK_getcone]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getcone
func (task *Task) GetCone(
	k int32,
	ct *ConeType,
	conepar *float64,
	nummem *int32,
	submem *int32,
) res.Code {
	return res.Code(
		C.MSK_getcone(
			task.task,
			C.MSKint32t(k),
			(*C.MSKconetypee)(ct),
			(*C.MSKrealt)(conepar),
			(*C.MSKint32t)(nummem),
			(*C.MSKint32t)(submem),
		),
	)
}

// GetConeInfo is wrapping [MSK_getconeinfo],
// Obtains information about a cone.
//
// Arguments:
//
//   - `k` Index of the cone.
//   - `ct` Specifies the type of the cone.
//   - `conepar` For the power cone it denotes the exponent alpha. For other cone types it is unused and can be set to 0.
//   - `nummem` Number of member variables in the cone.
//
// Deprecated: [MSK_getconeinfo]/GetConeInfo is deprecated by mosek and will be removed in a future release.
//
// [MSK_getconeinfo]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getconeinfo
func (task *Task) GetConeInfo(
	k int32,
	ct *ConeType,
	conepar *float64,
	nummem *int32,
) res.Code {
	return res.Code(
		C.MSK_getconeinfo(
			task.task,
			C.MSKint32t(k),
			(*C.MSKconetypee)(ct),
			(*C.MSKrealt)(conepar),
			(*C.MSKint32t)(nummem),
		),
	)
}

// GetConenameindex is wrapping [MSK_getconenameindex],
// Checks whether the name has been assigned to any cone.
//
// Arguments:
//
//   - `somename` The name which should be checked.
//   - `asgn` Is non-zero if the name somename is assigned to some cone.
//
// Returns:
//
//   - `index` If the name somename is assigned to some cone, this is the index of the cone.
//
// Deprecated: [MSK_getconenameindex]/GetConenameindex is deprecated by mosek and will be removed in a future release.
//
// [MSK_getconenameindex]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getconenameindex
func (task *Task) GetConenameindex(
	somename string,
	asgn *int32,
	index *int32,
) res.Code {
	c_somename := C.CString(somename)
	defer C.free(unsafe.Pointer(c_somename))

	return res.Code(
		C.MSK_getconenameindex(
			task.task,
			c_somename,
			(*C.MSKint32t)(asgn),
			(*C.MSKint32t)(index),
		),
	)
}

// GetConnameindex is wrapping [MSK_getconnameindex],
// Checks whether the name has been assigned to any constraint.
//
// Arguments:
//
//   - `somename` The name which should be checked.
//   - `asgn` Is non-zero if the name somename is assigned to some constraint.
//
// Returns:
//
//   - `index` If the name somename is assigned to a constraint, then return the index of the constraint.
//
// [MSK_getconnameindex]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getconnameindex
func (task *Task) GetConnameindex(
	somename string,
	asgn *int32,
	index *int32,
) res.Code {
	c_somename := C.CString(somename)
	defer C.free(unsafe.Pointer(c_somename))

	return res.Code(
		C.MSK_getconnameindex(
			task.task,
			c_somename,
			(*C.MSKint32t)(asgn),
			(*C.MSKint32t)(index),
		),
	)
}

// GetDimbarvarj is wrapping [MSK_getdimbarvarj],
// Obtains the dimension of a symmetric matrix variable.
//
// Arguments:
//
//   - `j` Index of the semidefinite variable whose dimension is requested.
//
// Returns:
//
//   - `dimbarvarj` The dimension of the j'th semidefinite variable.
//
// [MSK_getdimbarvarj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdimbarvarj
func (task *Task) GetDimbarvarj(
	j int32,
	dimbarvarj *int32,
) res.Code {
	return res.Code(
		C.MSK_getdimbarvarj(
			task.task,
			C.MSKint32t(j),
			(*C.MSKint32t)(dimbarvarj),
		),
	)
}

// GetDjcb is wrapping [MSK_getdjcb],
// Obtains the optional constant term vector of a disjunctive constraint.
//
// Arguments:
//
//   - `djcidx` Index of the disjunctive constraint.
//   - `b` The vector b.
//
// [MSK_getdjcb]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdjcb
func (task *Task) GetDjcb(
	djcidx int64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_getdjcb(
			task.task,
			C.MSKint64t(djcidx),
			(*C.MSKrealt)(b),
		),
	)
}

// GetDjcnumafe is wrapping [MSK_getdjcnumafe],
// Obtains the number of affine expressions in the disjunctive constraint.
//
// Arguments:
//
//   - `djcidx` Index of the disjunctive constraint.
//
// Returns:
//
//   - `numafe` Number of affine expressions in the disjunctive constraint.
//
// [MSK_getdjcnumafe]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdjcnumafe
func (task *Task) GetDjcnumafe(
	djcidx int64,
	numafe *int64,
) res.Code {
	return res.Code(
		C.MSK_getdjcnumafe(
			task.task,
			C.MSKint64t(djcidx),
			(*C.MSKint64t)(numafe),
		),
	)
}

// GetDjcnumafetot is wrapping [MSK_getdjcnumafetot],
// Obtains the number of affine expressions in all disjunctive constraints.
//
// Returns:
//
//   - `numafetot` Number of affine expressions in all disjunctive constraints.
//
// [MSK_getdjcnumafetot]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdjcnumafetot
func (task *Task) GetDjcnumafetot(
	numafetot *int64,
) res.Code {
	return res.Code(
		C.MSK_getdjcnumafetot(
			task.task,
			(*C.MSKint64t)(numafetot),
		),
	)
}

// GetDjcnumDomain is wrapping [MSK_getdjcnumdomain],
// Obtains the number of domains in the disjunctive constraint.
//
// Arguments:
//
//   - `djcidx` Index of the disjunctive constraint.
//
// Returns:
//
//   - `numdomain` Number of domains in the disjunctive constraint.
//
// [MSK_getdjcnumdomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdjcnumdomain
func (task *Task) GetDjcnumDomain(
	djcidx int64,
	numdomain *int64,
) res.Code {
	return res.Code(
		C.MSK_getdjcnumdomain(
			task.task,
			C.MSKint64t(djcidx),
			(*C.MSKint64t)(numdomain),
		),
	)
}

// GetDjcnumdomaintot is wrapping [MSK_getdjcnumdomaintot],
// Obtains the number of domains in all disjunctive constraints.
//
// Returns:
//
//   - `numdomaintot` Number of domains in all disjunctive constraints.
//
// [MSK_getdjcnumdomaintot]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdjcnumdomaintot
func (task *Task) GetDjcnumdomaintot(
	numdomaintot *int64,
) res.Code {
	return res.Code(
		C.MSK_getdjcnumdomaintot(
			task.task,
			(*C.MSKint64t)(numdomaintot),
		),
	)
}

// GetDjcnumterm is wrapping [MSK_getdjcnumterm],
// Obtains the number terms in the disjunctive constraint.
//
// Arguments:
//
//   - `djcidx` Index of the disjunctive constraint.
//
// Returns:
//
//   - `numterm` Number of terms in the disjunctive constraint.
//
// [MSK_getdjcnumterm]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdjcnumterm
func (task *Task) GetDjcnumterm(
	djcidx int64,
	numterm *int64,
) res.Code {
	return res.Code(
		C.MSK_getdjcnumterm(
			task.task,
			C.MSKint64t(djcidx),
			(*C.MSKint64t)(numterm),
		),
	)
}

// GetDjcnumtermtot is wrapping [MSK_getdjcnumtermtot],
// Obtains the number of terms in all disjunctive constraints.
//
// Returns:
//
//   - `numtermtot` Total number of terms in all disjunctive constraints.
//
// [MSK_getdjcnumtermtot]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdjcnumtermtot
func (task *Task) GetDjcnumtermtot(
	numtermtot *int64,
) res.Code {
	return res.Code(
		C.MSK_getdjcnumtermtot(
			task.task,
			(*C.MSKint64t)(numtermtot),
		),
	)
}

// GetDjcs is wrapping [MSK_getdjcs],
// Obtains full data of all disjunctive constraints.
//
// Arguments:
//
//   - `domidxlist` The concatenation of index lists of domains appearing in all disjunctive constraints.
//   - `afeidxlist` The concatenation of index lists of affine expressions appearing in all disjunctive constraints.
//   - `b` The concatenation of vectors b appearing in all disjunctive constraints.
//   - `termsizelist` The concatenation of lists of term sizes appearing in all disjunctive constraints.
//   - `numterms` The number of terms in each of the disjunctive constraints.
//
// [MSK_getdjcs]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdjcs
func (task *Task) GetDjcs(
	domidxlist *int64,
	afeidxlist *int64,
	b *float64,
	termsizelist *int64,
	numterms *int64,
) res.Code {
	return res.Code(
		C.MSK_getdjcs(
			task.task,
			(*C.MSKint64t)(domidxlist),
			(*C.MSKint64t)(afeidxlist),
			(*C.MSKrealt)(b),
			(*C.MSKint64t)(termsizelist),
			(*C.MSKint64t)(numterms),
		),
	)
}

// GetDomainn is wrapping [MSK_getdomainn],
// Obtains the dimension of the domain.
//
// Arguments:
//
//   - `domidx` Index of the domain.
//
// Returns:
//
//   - `n` Dimension of the domain.
//
// [MSK_getdomainn]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdomainn
func (task *Task) GetDomainn(
	domidx int64,
	n *int64,
) res.Code {
	return res.Code(
		C.MSK_getdomainn(
			task.task,
			C.MSKint64t(domidx),
			(*C.MSKint64t)(n),
		),
	)
}

// GetDomaintype is wrapping [MSK_getdomaintype],
// Returns the type of the domain.
//
// Arguments:
//
//   - `domidx` Index of the domain.
//
// Returns:
//
//   - `domtype` The type of the domain.
//
// [MSK_getdomaintype]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdomaintype
func (task *Task) GetDomaintype(
	domidx int64,
	domtype *DomainType,
) res.Code {
	return res.Code(
		C.MSK_getdomaintype(
			task.task,
			C.MSKint64t(domidx),
			(*C.MSKdomaintypee)(domtype),
		),
	)
}

// GetDouInf is wrapping [MSK_getdouinf],
// Obtains a double information item.
//
// Arguments:
//
//   - `whichdinf` Specifies a double information item.
//
// Returns:
//
//   - `dvalue` The value of the required double information item.
//
// [MSK_getdouinf]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdouinf
func (task *Task) GetDouInf(
	whichdinf DInfItem,
) (r res.Code, dvalue float64) {
	r = res.Code(
		C.MSK_getdouinf(
			task.task,
			C.MSKdinfiteme(whichdinf),
			(*C.MSKrealt)(&dvalue),
		),
	)

	return
}

// GetDouParam is wrapping [MSK_getdouparam],
// Obtains a double parameter.
//
// Arguments:
//
//   - `param` Which parameter.
//
// Returns:
//
//   - `parvalue` Parameter value.
//
// [MSK_getdouparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdouparam
func (task *Task) GetDouParam(
	param DParam,
	parvalue *float64,
) res.Code {
	return res.Code(
		C.MSK_getdouparam(
			task.task,
			C.MSKdparame(param),
			(*C.MSKrealt)(parvalue),
		),
	)
}

// GetDualObj is wrapping [MSK_getdualobj],
// Computes the dual objective value associated with the solution.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `dualobj` Objective value corresponding to the dual solution.
//
// [MSK_getdualobj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdualobj
func (task *Task) GetDualObj(
	whichsol SolType,
	dualobj *float64,
) res.Code {
	return res.Code(
		C.MSK_getdualobj(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(dualobj),
		),
	)
}

// GetDualSolutionnorms is wrapping [MSK_getdualsolutionnorms],
// Compute norms of the dual solution.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `nrmy` The norm of the y vector.
//   - `nrmslc` The norm of the slc vector.
//   - `nrmsuc` The norm of the suc vector.
//   - `nrmslx` The norm of the slx vector.
//   - `nrmsux` The norm of the sux vector.
//   - `nrmsnx` The norm of the snx vector.
//   - `nrmbars` The norm of the bars vector.
//
// [MSK_getdualsolutionnorms]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdualsolutionnorms
func (task *Task) GetDualSolutionnorms(
	whichsol SolType,
	nrmy *float64,
	nrmslc *float64,
	nrmsuc *float64,
	nrmslx *float64,
	nrmsux *float64,
	nrmsnx *float64,
	nrmbars *float64,
) res.Code {
	return res.Code(
		C.MSK_getdualsolutionnorms(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(nrmy),
			(*C.MSKrealt)(nrmslc),
			(*C.MSKrealt)(nrmsuc),
			(*C.MSKrealt)(nrmslx),
			(*C.MSKrealt)(nrmsux),
			(*C.MSKrealt)(nrmsnx),
			(*C.MSKrealt)(nrmbars),
		),
	)
}

// GetDviolacc is wrapping [MSK_getdviolacc],
// Computes the violation of the dual solution for set of affine conic constraints.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `accidxlist` An array of indexes of conic constraints.
//   - `viol` List of violations corresponding to sub.
//
// [MSK_getdviolacc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdviolacc
func (task *Task) GetDviolacc(
	whichsol SolType,
	numaccidx int64,
	accidxlist *int64,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getdviolacc(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint64t(numaccidx),
			(*C.MSKint64t)(accidxlist),
			(*C.MSKrealt)(viol),
		),
	)
}

// GetDviolbarvar is wrapping [MSK_getdviolbarvar],
// Computes the violation of dual solution for a set of semidefinite variables.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `sub` An array of indexes of barx variables.
//   - `viol` List of violations corresponding to sub.
//
// [MSK_getdviolbarvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdviolbarvar
func (task *Task) GetDviolbarvar(
	whichsol SolType,
	num int32,
	sub *int32,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getdviolbarvar(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(viol),
		),
	)
}

// GetDviolcon is wrapping [MSK_getdviolcon],
// Computes the violation of a dual solution associated with a set of constraints.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `sub` An array of indexes of constraints.
//   - `viol` List of violations corresponding to sub.
//
// [MSK_getdviolcon]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdviolcon
func (task *Task) GetDviolcon(
	whichsol SolType,
	num int32,
	sub *int32,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getdviolcon(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(viol),
		),
	)
}

// GetDviolcones is wrapping [MSK_getdviolcones],
// Computes the violation of a solution for set of dual conic constraints.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `sub` An array of indexes of conic constraints.
//   - `viol` List of violations corresponding to sub.
//
// Deprecated: [MSK_getdviolcones]/GetDviolcones is deprecated by mosek and will be removed in a future release.
//
// [MSK_getdviolcones]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdviolcones
func (task *Task) GetDviolcones(
	whichsol SolType,
	num int32,
	sub *int32,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getdviolcones(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(viol),
		),
	)
}

// GetDviolvar is wrapping [MSK_getdviolvar],
// Computes the violation of a dual solution associated with a set of scalar variables.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `sub` An array of indexes of x variables.
//   - `viol` List of violations corresponding to sub.
//
// [MSK_getdviolvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdviolvar
func (task *Task) GetDviolvar(
	whichsol SolType,
	num int32,
	sub *int32,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getdviolvar(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(viol),
		),
	)
}

// GetInfindex is wrapping [MSK_getinfindex],
// Obtains the index of a named information item.
//
// Arguments:
//
//   - `inftype` Type of the information item.
//   - `infname` Name of the information item.
//   - `infindex` The item index.
//
// [MSK_getinfindex]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getinfindex
func (task *Task) GetInfindex(
	inftype InfType,
	infname string,
	infindex *int32,
) res.Code {
	c_infname := C.CString(infname)
	defer C.free(unsafe.Pointer(c_infname))

	return res.Code(
		C.MSK_getinfindex(
			task.task,
			C.MSKinftypee(inftype),
			c_infname,
			(*C.MSKint32t)(infindex),
		),
	)
}

// GetInfmax is wrapping [MSK_getinfmax],
// Obtains the maximum index of an information item of a given type.
//
// Arguments:
//
//   - `inftype` Type of the information item.
//   - `infmax` The maximum index (plus 1) requested.
//
// [MSK_getinfmax]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getinfmax
func (task *Task) GetInfmax(
	inftype InfType,
	infmax *int32,
) res.Code {
	return res.Code(
		C.MSK_getinfmax(
			task.task,
			C.MSKinftypee(inftype),
			(*C.MSKint32t)(infmax),
		),
	)
}

// GetIntInf is wrapping [MSK_getintinf],
// Obtains an integer information item.
//
// Arguments:
//
//   - `whichiinf` Specifies an integer information item.
//
// Returns:
//
//   - `ivalue` The value of the required integer information item.
//
// [MSK_getintinf]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getintinf
func (task *Task) GetIntInf(
	whichiinf IInfItem,
) (r res.Code, ivalue int32) {
	r = res.Code(
		C.MSK_getintinf(
			task.task,
			C.MSKiinfiteme(whichiinf),
			(*C.MSKint32t)(&ivalue),
		),
	)

	return
}

// GetIntParam is wrapping [MSK_getintparam],
// Obtains an integer parameter.
//
// Arguments:
//
//   - `param` Which parameter.
//
// Returns:
//
//   - `parvalue` Parameter value.
//
// [MSK_getintparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getintparam
func (task *Task) GetIntParam(
	param IParam,
	parvalue *int32,
) res.Code {
	return res.Code(
		C.MSK_getintparam(
			task.task,
			C.MSKiparame(param),
			(*C.MSKint32t)(parvalue),
		),
	)
}

// GetLasterror is wrapping [MSK_getlasterror]
//
// [MSK_getlasterror]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getlasterror
func (task *Task) GetLasterror(
	lastrescode *res.Code,
	sizelastmsg int32,
	lastmsglen *int32,
	lastmsg *byte,
) res.Code {
	return res.Code(
		C.MSK_getlasterror(
			task.task,
			(*C.MSKrescodee)(lastrescode),
			C.MSKint32t(sizelastmsg),
			(*C.MSKint32t)(lastmsglen),
			(*C.char)(unsafe.Pointer(lastmsg)),
		),
	)
}

// GetLasterror64 is wrapping [MSK_getlasterror64]
//
// [MSK_getlasterror64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getlasterror64
func (task *Task) GetLasterror64(
	lastrescode *res.Code,
	sizelastmsg int64,
	lastmsglen *int64,
	lastmsg *byte,
) res.Code {
	return res.Code(
		C.MSK_getlasterror64(
			task.task,
			(*C.MSKrescodee)(lastrescode),
			C.MSKint64t(sizelastmsg),
			(*C.MSKint64t)(lastmsglen),
			(*C.char)(unsafe.Pointer(lastmsg)),
		),
	)
}

// GetLenBarvarJ is wrapping [MSK_getlenbarvarj],
// Obtains the length of one semidefinite variable.
//
// Arguments:
//
//   - `j` Index of the semidefinite variable whose length if requested.
//
// Returns:
//
//   - `lenbarvarj` Number of scalar elements in the lower triangular part of the semidefinite variable.
//
// [MSK_getlenbarvarj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getlenbarvarj
func (task *Task) GetLenBarvarJ(
	j int32,
) (r res.Code, lenbarvarj int64) {
	r = res.Code(
		C.MSK_getlenbarvarj(
			task.task,
			C.MSKint32t(j),
			(*C.MSKint64t)(&lenbarvarj),
		),
	)

	return
}

// GetLintinf is wrapping [MSK_getlintinf],
// Obtains a long integer information item.
//
// Arguments:
//
//   - `whichliinf` Specifies a long information item.
//
// Returns:
//
//   - `ivalue` The value of the required long integer information item.
//
// [MSK_getlintinf]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getlintinf
func (task *Task) GetLintinf(
	whichliinf LIInfItem,
	ivalue *int64,
) res.Code {
	return res.Code(
		C.MSK_getlintinf(
			task.task,
			C.MSKliinfiteme(whichliinf),
			(*C.MSKint64t)(ivalue),
		),
	)
}

// GetMaxnumanz is wrapping [MSK_getmaxnumanz],
// Obtains number of preallocated non-zeros in the linear constraint matrix.
//
// Returns:
//
//   - `maxnumanz` Number of preallocated non-zero linear matrix elements.
//
// [MSK_getmaxnumanz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getmaxnumanz
func (task *Task) GetMaxnumanz(
	maxnumanz *int32,
) res.Code {
	return res.Code(
		C.MSK_getmaxnumanz(
			task.task,
			(*C.MSKint32t)(maxnumanz),
		),
	)
}

// GetMaxnumanz64 is wrapping [MSK_getmaxnumanz64]
//
// [MSK_getmaxnumanz64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getmaxnumanz64
func (task *Task) GetMaxnumanz64(
	maxnumanz *int64,
) res.Code {
	return res.Code(
		C.MSK_getmaxnumanz64(
			task.task,
			(*C.MSKint64t)(maxnumanz),
		),
	)
}

// GetMaxnumbarvar is wrapping [MSK_getmaxnumbarvar],
// Obtains maximum number of symmetric matrix variables for which space is currently preallocated.
//
// Returns:
//
//   - `maxnumbarvar` Maximum number of symmetric matrix variables for which space is currently preallocated.
//
// [MSK_getmaxnumbarvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getmaxnumbarvar
func (task *Task) GetMaxnumbarvar(
	maxnumbarvar *int32,
) res.Code {
	return res.Code(
		C.MSK_getmaxnumbarvar(
			task.task,
			(*C.MSKint32t)(maxnumbarvar),
		),
	)
}

// GetMaxnumcon is wrapping [MSK_getmaxnumcon],
// Obtains the number of preallocated constraints in the optimization task.
//
// Arguments:
//
//   - `maxnumcon` Number of preallocated constraints in the optimization task.
//
// [MSK_getmaxnumcon]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getmaxnumcon
func (task *Task) GetMaxnumcon(
	maxnumcon *int32,
) res.Code {
	return res.Code(
		C.MSK_getmaxnumcon(
			task.task,
			(*C.MSKint32t)(maxnumcon),
		),
	)
}

// GetMaxnumcone is wrapping [MSK_getmaxnumcone],
// Obtains the number of preallocated cones in the optimization task.
//
// Arguments:
//
//   - `maxnumcone` Number of preallocated conic constraints in the optimization task.
//
// Deprecated: [MSK_getmaxnumcone]/GetMaxnumcone is deprecated by mosek and will be removed in a future release.
//
// [MSK_getmaxnumcone]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getmaxnumcone
func (task *Task) GetMaxnumcone(
	maxnumcone *int32,
) res.Code {
	return res.Code(
		C.MSK_getmaxnumcone(
			task.task,
			(*C.MSKint32t)(maxnumcone),
		),
	)
}

// GetMaxnumqnz is wrapping [MSK_getmaxnumqnz],
// Obtains the number of preallocated non-zeros for all quadratic terms in objective and constraints.
//
// Arguments:
//
//   - `maxnumqnz` Number of non-zero elements preallocated in quadratic coefficient matrices.
//
// [MSK_getmaxnumqnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getmaxnumqnz
func (task *Task) GetMaxnumqnz(
	maxnumqnz *int32,
) res.Code {
	return res.Code(
		C.MSK_getmaxnumqnz(
			task.task,
			(*C.MSKint32t)(maxnumqnz),
		),
	)
}

// GetMaxnumqnz64 is wrapping [MSK_getmaxnumqnz64]
//
// [MSK_getmaxnumqnz64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getmaxnumqnz64
func (task *Task) GetMaxnumqnz64(
	maxnumqnz *int64,
) res.Code {
	return res.Code(
		C.MSK_getmaxnumqnz64(
			task.task,
			(*C.MSKint64t)(maxnumqnz),
		),
	)
}

// GetMaxnumvar is wrapping [MSK_getmaxnumvar],
// Obtains the maximum number variables allowed.
//
// Arguments:
//
//   - `maxnumvar` Number of preallocated variables in the optimization task.
//
// [MSK_getmaxnumvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getmaxnumvar
func (task *Task) GetMaxnumvar(
	maxnumvar *int32,
) res.Code {
	return res.Code(
		C.MSK_getmaxnumvar(
			task.task,
			(*C.MSKint32t)(maxnumvar),
		),
	)
}

// GetMemusagetask is wrapping [MSK_getmemusagetask]
//
// [MSK_getmemusagetask]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getmemusagetask
func (task *Task) GetMemusagetask(
	meminuse *int64,
	maxmemuse *int64,
) res.Code {
	return res.Code(
		C.MSK_getmemusagetask(
			task.task,
			(*C.MSKint64t)(meminuse),
			(*C.MSKint64t)(maxmemuse),
		),
	)
}

// GetNadouinf is wrapping [MSK_getnadouinf],
// Obtains a named double information item.
//
// Arguments:
//
//   - `infitemname` The name of a double information item.
//   - `dvalue` The value of the required double information item.
//
// [MSK_getnadouinf]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getnadouinf
func (task *Task) GetNadouinf(
	infitemname string,
	dvalue *float64,
) res.Code {
	c_infitemname := C.CString(infitemname)
	defer C.free(unsafe.Pointer(c_infitemname))

	return res.Code(
		C.MSK_getnadouinf(
			task.task,
			c_infitemname,
			(*C.MSKrealt)(dvalue),
		),
	)
}

// GetNadouparam is wrapping [MSK_getnadouparam],
// Obtains a double parameter.
//
// Arguments:
//
//   - `paramname` Name of a parameter.
//   - `parvalue` Parameter value.
//
// [MSK_getnadouparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getnadouparam
func (task *Task) GetNadouparam(
	paramname string,
	parvalue *float64,
) res.Code {
	c_paramname := C.CString(paramname)
	defer C.free(unsafe.Pointer(c_paramname))

	return res.Code(
		C.MSK_getnadouparam(
			task.task,
			c_paramname,
			(*C.MSKrealt)(parvalue),
		),
	)
}

// GetNaintinf is wrapping [MSK_getnaintinf],
// Obtains a named integer information item.
//
// Arguments:
//
//   - `infitemname` The name of an integer information item.
//   - `ivalue` The value of the required integer information item.
//
// [MSK_getnaintinf]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getnaintinf
func (task *Task) GetNaintinf(
	infitemname string,
	ivalue *int32,
) res.Code {
	c_infitemname := C.CString(infitemname)
	defer C.free(unsafe.Pointer(c_infitemname))

	return res.Code(
		C.MSK_getnaintinf(
			task.task,
			c_infitemname,
			(*C.MSKint32t)(ivalue),
		),
	)
}

// GetNaintparam is wrapping [MSK_getnaintparam],
// Obtains an integer parameter.
//
// Arguments:
//
//   - `paramname` Name of a parameter.
//   - `parvalue` Parameter value.
//
// [MSK_getnaintparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getnaintparam
func (task *Task) GetNaintparam(
	paramname string,
	parvalue *int32,
) res.Code {
	c_paramname := C.CString(paramname)
	defer C.free(unsafe.Pointer(c_paramname))

	return res.Code(
		C.MSK_getnaintparam(
			task.task,
			c_paramname,
			(*C.MSKint32t)(parvalue),
		),
	)
}

// GetNastrparam is wrapping [MSK_getnastrparam],
// Obtains a string parameter.
//
// Arguments:
//
//   - `paramname` Name of a parameter.
//   - `sizeparamname` Size of the name buffer.
//   - `len` Returns the length of the parameter value.
//
// Returns:
//
//   - `parvalue` Parameter value.
//
// [MSK_getnastrparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getnastrparam
func (task *Task) GetNastrparam(
	paramname string,
	sizeparamname int32,
	len *int32,
	parvalue *byte,
) res.Code {
	c_paramname := C.CString(paramname)
	defer C.free(unsafe.Pointer(c_paramname))

	return res.Code(
		C.MSK_getnastrparam(
			task.task,
			c_paramname,
			C.MSKint32t(sizeparamname),
			(*C.MSKint32t)(len),
			(*C.char)(unsafe.Pointer(parvalue)),
		),
	)
}

// GetObjsense is wrapping [MSK_getobjsense],
// Gets the objective sense.
//
// Returns:
//
//   - `sense` The returned objective sense.
//
// [MSK_getobjsense]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getobjsense
func (task *Task) GetObjsense(
	sense *ObjectiveSense,
) res.Code {
	return res.Code(
		C.MSK_getobjsense(
			task.task,
			(*C.MSKobjsensee)(sense),
		),
	)
}

// GetParammax is wrapping [MSK_getparammax],
// Obtains the maximum index of a parameter of a given type.
//
// Arguments:
//
//   - `partype` Parameter type.
//   - `parammax` The maximum index (plus 1) of the given parameter type.
//
// [MSK_getparammax]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getparammax
func (task *Task) GetParammax(
	partype ParameterType,
	parammax *int32,
) res.Code {
	return res.Code(
		C.MSK_getparammax(
			task.task,
			C.MSKparametertypee(partype),
			(*C.MSKint32t)(parammax),
		),
	)
}

// GetPowerdomainalpha is wrapping [MSK_getpowerdomainalpha],
// Obtains the exponent vector of a power domain.
//
// Arguments:
//
//   - `domidx` Index of the domain.
//   - `alpha` The exponent vector of the domain.
//
// [MSK_getpowerdomainalpha]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getpowerdomainalpha
func (task *Task) GetPowerdomainalpha(
	domidx int64,
	alpha *float64,
) res.Code {
	return res.Code(
		C.MSK_getpowerdomainalpha(
			task.task,
			C.MSKint64t(domidx),
			(*C.MSKrealt)(alpha),
		),
	)
}

// GetPowerdomainInfo is wrapping [MSK_getpowerdomaininfo],
// Obtains structural information about a power domain.
//
// Arguments:
//
//   - `domidx` Index of the domain.
//   - `n` Dimension of the domain.
//   - `nleft` Number of variables on the left hand side.
//
// [MSK_getpowerdomaininfo]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getpowerdomaininfo
func (task *Task) GetPowerdomainInfo(
	domidx int64,
	n *int64,
	nleft *int64,
) res.Code {
	return res.Code(
		C.MSK_getpowerdomaininfo(
			task.task,
			C.MSKint64t(domidx),
			(*C.MSKint64t)(n),
			(*C.MSKint64t)(nleft),
		),
	)
}

// GetPrimalObj is wrapping [MSK_getprimalobj],
// Computes the primal objective value for the desired solution.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//
// Returns:
//
//   - `primalobj` Objective value corresponding to the primal solution.
//
// [MSK_getprimalobj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getprimalobj
func (task *Task) GetPrimalObj(
	whichsol SolType,
	primalobj *float64,
) res.Code {
	return res.Code(
		C.MSK_getprimalobj(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(primalobj),
		),
	)
}

// GetPrimalSolutionnorms is wrapping [MSK_getprimalsolutionnorms],
// Compute norms of the primal solution.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `nrmxc` The norm of the xc vector.
//   - `nrmxx` The norm of the xx vector.
//   - `nrmbarx` The norm of the barX vector.
//
// [MSK_getprimalsolutionnorms]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getprimalsolutionnorms
func (task *Task) GetPrimalSolutionnorms(
	whichsol SolType,
	nrmxc *float64,
	nrmxx *float64,
	nrmbarx *float64,
) res.Code {
	return res.Code(
		C.MSK_getprimalsolutionnorms(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(nrmxc),
			(*C.MSKrealt)(nrmxx),
			(*C.MSKrealt)(nrmbarx),
		),
	)
}

// GetProbtype is wrapping [MSK_getprobtype],
// Obtains the problem type.
//
// Returns:
//
//   - `probtype` The problem type.
//
// [MSK_getprobtype]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getprobtype
func (task *Task) GetProbtype(
	probtype *ProblemType,
) res.Code {
	return res.Code(
		C.MSK_getprobtype(
			task.task,
			(*C.MSKproblemtypee)(probtype),
		),
	)
}

// GetProSta is wrapping [MSK_getprosta],
// Obtains the problem status.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//
// Returns:
//
//   - `problemsta` Problem status.
//
// [MSK_getprosta]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getprosta
func (task *Task) GetProSta(
	whichsol SolType,
) (r res.Code, problemsta ProSta) {
	r = res.Code(
		C.MSK_getprosta(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKprostae)(&problemsta),
		),
	)

	return
}

// GetPviolacc is wrapping [MSK_getpviolacc],
// Computes the violation of a solution for set of affine conic constraints.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `accidxlist` An array of indexes of conic constraints.
//   - `viol` List of violations corresponding to sub.
//
// [MSK_getpviolacc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getpviolacc
func (task *Task) GetPviolacc(
	whichsol SolType,
	numaccidx int64,
	accidxlist *int64,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getpviolacc(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint64t(numaccidx),
			(*C.MSKint64t)(accidxlist),
			(*C.MSKrealt)(viol),
		),
	)
}

// GetPviolbarvar is wrapping [MSK_getpviolbarvar],
// Computes the violation of a primal solution for a list of semidefinite variables.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `sub` An array of indexes of barX variables.
//   - `viol` List of violations corresponding to sub.
//
// [MSK_getpviolbarvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getpviolbarvar
func (task *Task) GetPviolbarvar(
	whichsol SolType,
	num int32,
	sub *int32,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getpviolbarvar(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(viol),
		),
	)
}

// GetPviolcon is wrapping [MSK_getpviolcon],
// Computes the violation of a primal solution associated to a constraint.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `sub` An array of indexes of constraints.
//   - `viol` List of violations corresponding to sub.
//
// [MSK_getpviolcon]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getpviolcon
func (task *Task) GetPviolcon(
	whichsol SolType,
	num int32,
	sub *int32,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getpviolcon(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(viol),
		),
	)
}

// GetPviolcones is wrapping [MSK_getpviolcones],
// Computes the violation of a solution for set of conic constraints.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `sub` An array of indexes of conic constraints.
//   - `viol` List of violations corresponding to sub.
//
// Deprecated: [MSK_getpviolcones]/GetPviolcones is deprecated by mosek and will be removed in a future release.
//
// [MSK_getpviolcones]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getpviolcones
func (task *Task) GetPviolcones(
	whichsol SolType,
	num int32,
	sub *int32,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getpviolcones(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(viol),
		),
	)
}

// GetPvioldjc is wrapping [MSK_getpvioldjc],
// Computes the violation of a solution for set of disjunctive constraints.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `djcidxlist` An array of indexes of disjunctive constraints.
//   - `viol` List of violations corresponding to sub.
//
// [MSK_getpvioldjc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getpvioldjc
func (task *Task) GetPvioldjc(
	whichsol SolType,
	numdjcidx int64,
	djcidxlist *int64,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getpvioldjc(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint64t(numdjcidx),
			(*C.MSKint64t)(djcidxlist),
			(*C.MSKrealt)(viol),
		),
	)
}

// GetPviolvar is wrapping [MSK_getpviolvar],
// Computes the violation of a primal solution for a list of scalar variables.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `sub` An array of indexes of x variables.
//   - `viol` List of violations corresponding to sub.
//
// [MSK_getpviolvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getpviolvar
func (task *Task) GetPviolvar(
	whichsol SolType,
	num int32,
	sub *int32,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getpviolvar(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(viol),
		),
	)
}

// GetQConK is wrapping [MSK_getqconk],
// Obtains all the quadratic terms in a constraint.
//
// Arguments:
//
//   - `k` Which constraint.
//   - `qcsubi` Row subscripts for quadratic constraint matrix.
//   - `qcsubj` Column subscripts for quadratic constraint matrix.
//   - `qcval` Quadratic constraint coefficient values.
//
// Returns:
//
//   - `numqcnz` Number of quadratic terms.
//
// [MSK_getqconk]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getqconk
func (task *Task) GetQConK(
	k int32,
	maxnumqcnz int32,
	numqcnz *int32,
	qcsubi *int32,
	qcsubj *int32,
	qcval *float64,
) res.Code {
	return res.Code(
		C.MSK_getqconk(
			task.task,
			C.MSKint32t(k),
			C.MSKint32t(maxnumqcnz),
			(*C.MSKint32t)(numqcnz),
			(*C.MSKint32t)(qcsubi),
			(*C.MSKint32t)(qcsubj),
			(*C.MSKrealt)(qcval),
		),
	)
}

// GetQConK64 is wrapping [MSK_getqconk64]
//
// [MSK_getqconk64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getqconk64
func (task *Task) GetQConK64(
	k int32,
	maxnumqcnz int64,
	numqcnz *int64,
	qcsubi *int32,
	qcsubj *int32,
	qcval *float64,
) res.Code {
	return res.Code(
		C.MSK_getqconk64(
			task.task,
			C.MSKint32t(k),
			C.MSKint64t(maxnumqcnz),
			(*C.MSKint64t)(numqcnz),
			(*C.MSKint32t)(qcsubi),
			(*C.MSKint32t)(qcsubj),
			(*C.MSKrealt)(qcval),
		),
	)
}

// GetQObj is wrapping [MSK_getqobj],
// Obtains all the quadratic terms in the objective.
//
// Arguments:
//
//   - `numqonz` Number of non-zero elements in the quadratic objective terms.
//   - `qosubi` Row subscripts for quadratic objective coefficients.
//   - `qosubj` Column subscripts for quadratic objective coefficients.
//   - `qoval` Quadratic objective coefficient values.
//
// [MSK_getqobj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getqobj
func (task *Task) GetQObj(
	maxnumqonz int32,
	numqonz *int32,
	qosubi *int32,
	qosubj *int32,
	qoval *float64,
) res.Code {
	return res.Code(
		C.MSK_getqobj(
			task.task,
			C.MSKint32t(maxnumqonz),
			(*C.MSKint32t)(numqonz),
			(*C.MSKint32t)(qosubi),
			(*C.MSKint32t)(qosubj),
			(*C.MSKrealt)(qoval),
		),
	)
}

// GetQObj64 is wrapping [MSK_getqobj64]
//
// [MSK_getqobj64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getqobj64
func (task *Task) GetQObj64(
	maxnumqonz int64,
	numqonz *int64,
	qosubi *int32,
	qosubj *int32,
	qoval *float64,
) res.Code {
	return res.Code(
		C.MSK_getqobj64(
			task.task,
			C.MSKint64t(maxnumqonz),
			(*C.MSKint64t)(numqonz),
			(*C.MSKint32t)(qosubi),
			(*C.MSKint32t)(qosubj),
			(*C.MSKrealt)(qoval),
		),
	)
}

// GetQObjIj is wrapping [MSK_getqobjij],
// Obtains one coefficient from the quadratic term of the objective
//
// Arguments:
//
//   - `i` Row index of the coefficient.
//   - `j` Column index of coefficient.
//   - `qoij` The required coefficient.
//
// [MSK_getqobjij]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getqobjij
func (task *Task) GetQObjIj(
	i int32,
	j int32,
	qoij *float64,
) res.Code {
	return res.Code(
		C.MSK_getqobjij(
			task.task,
			C.MSKint32t(i),
			C.MSKint32t(j),
			(*C.MSKrealt)(qoij),
		),
	)
}

// GetReducedcosts is wrapping [MSK_getreducedcosts],
// Obtains the reduced costs for a sequence of variables.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `first` The index of the first variable in the sequence.
//   - `last` The index of the last variable in the sequence plus 1.
//   - `redcosts` Returns the requested reduced costs.
//
// [MSK_getreducedcosts]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getreducedcosts
func (task *Task) GetReducedcosts(
	whichsol SolType,
	first int32,
	last int32,
	redcosts *float64,
) res.Code {
	return res.Code(
		C.MSK_getreducedcosts(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(redcosts),
		),
	)
}

// GetSkc is wrapping [MSK_getskc],
// Obtains the status keys for the constraints.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `skc` Status keys for the constraints.
//
// [MSK_getskc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getskc
func (task *Task) GetSkc(
	whichsol SolType,
	skc *StaKey,
) res.Code {
	return res.Code(
		C.MSK_getskc(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKstakeye)(skc),
		),
	)
}

// GetSkn is wrapping [MSK_getskn],
// Obtains the status keys for the conic constraints.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `skn` Status keys for the conic constraints.
//
// [MSK_getskn]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getskn
func (task *Task) GetSkn(
	whichsol SolType,
	skn *StaKey,
) res.Code {
	return res.Code(
		C.MSK_getskn(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKstakeye)(skn),
		),
	)
}

// GetSkx is wrapping [MSK_getskx],
// Obtains the status keys for the scalar variables.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `skx` Status keys for the variables.
//
// [MSK_getskx]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getskx
func (task *Task) GetSkx(
	whichsol SolType,
	skx *StaKey,
) res.Code {
	return res.Code(
		C.MSK_getskx(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKstakeye)(skx),
		),
	)
}

// GetSlc is wrapping [MSK_getslc],
// Obtains the slc vector for a solution.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `slc` Dual variables corresponding to the lower bounds on the constraints.
//
// [MSK_getslc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getslc
func (task *Task) GetSlc(
	whichsol SolType,
	slc *float64,
) res.Code {
	return res.Code(
		C.MSK_getslc(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(slc),
		),
	)
}

// GetSlx is wrapping [MSK_getslx],
// Obtains the slx vector for a solution.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `slx` Dual variables corresponding to the lower bounds on the variables.
//
// [MSK_getslx]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getslx
func (task *Task) GetSlx(
	whichsol SolType,
	slx *float64,
) res.Code {
	return res.Code(
		C.MSK_getslx(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(slx),
		),
	)
}

// GetSnx is wrapping [MSK_getsnx],
// Obtains the snx vector for a solution.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `snx` Dual variables corresponding to the conic constraints on the variables.
//
// [MSK_getsnx]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getsnx
func (task *Task) GetSnx(
	whichsol SolType,
	snx *float64,
) res.Code {
	return res.Code(
		C.MSK_getsnx(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(snx),
		),
	)
}

// GetSolSta is wrapping [MSK_getsolsta],
// Obtains the solution status.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//
// Returns:
//
//   - `solutionsta` Solution status.
//
// [MSK_getsolsta]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getsolsta
func (task *Task) GetSolSta(
	whichsol SolType,
) (r res.Code, solutionsta SolSta) {
	r = res.Code(
		C.MSK_getsolsta(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKsolstae)(&solutionsta),
		),
	)

	return
}

// GetSolution is wrapping [MSK_getsolution],
// Obtains the complete solution.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `problemsta` Problem status.
//   - `solutionsta` Solution status.
//   - `skc` Status keys for the constraints.
//   - `skx` Status keys for the variables.
//   - `skn` Status keys for the conic constraints.
//   - `xc` Primal constraint solution.
//   - `xx` Primal variable solution.
//   - `y` Vector of dual variables corresponding to the constraints.
//   - `slc` Dual variables corresponding to the lower bounds on the constraints.
//   - `suc` Dual variables corresponding to the upper bounds on the constraints.
//   - `slx` Dual variables corresponding to the lower bounds on the variables.
//   - `sux` Dual variables corresponding to the upper bounds on the variables.
//   - `snx` Dual variables corresponding to the conic constraints on the variables.
//
// [MSK_getsolution]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getsolution
func (task *Task) GetSolution(
	whichsol SolType,
	problemsta *ProSta,
	solutionsta *SolSta,
	skc *StaKey,
	skx *StaKey,
	skn *StaKey,
	xc *float64,
	xx *float64,
	y *float64,
	slc *float64,
	suc *float64,
	slx *float64,
	sux *float64,
	snx *float64,
) res.Code {
	return res.Code(
		C.MSK_getsolution(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKprostae)(problemsta),
			(*C.MSKsolstae)(solutionsta),
			(*C.MSKstakeye)(skc),
			(*C.MSKstakeye)(skx),
			(*C.MSKstakeye)(skn),
			(*C.MSKrealt)(xc),
			(*C.MSKrealt)(xx),
			(*C.MSKrealt)(y),
			(*C.MSKrealt)(slc),
			(*C.MSKrealt)(suc),
			(*C.MSKrealt)(slx),
			(*C.MSKrealt)(sux),
			(*C.MSKrealt)(snx),
		),
	)
}

// GetSolutionInfo is wrapping [MSK_getsolutioninfo],
// Obtains information about of a solution.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `pobj` The primal objective value.
//   - `pviolcon` Maximal primal bound violation for a xc variable.
//   - `pviolvar` Maximal primal bound violation for a xx variable.
//   - `pviolbarvar` Maximal primal bound violation for a barx variable.
//   - `pviolcone` Maximal primal violation of the solution with respect to the conic constraints.
//   - `pviolitg` Maximal violation in the integer constraints.
//   - `dobj` Dual objective value.
//   - `dviolcon` Maximal dual bound violation for a xc variable.
//   - `dviolvar` Maximal dual bound violation for a xx variable.
//   - `dviolbarvar` Maximal dual bound violation for a bars variable.
//   - `dviolcone` Maximum violation of the dual solution in the dual conic constraints.
//
// [MSK_getsolutioninfo]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getsolutioninfo
func (task *Task) GetSolutionInfo(
	whichsol SolType,
	pobj *float64,
	pviolcon *float64,
	pviolvar *float64,
	pviolbarvar *float64,
	pviolcone *float64,
	pviolitg *float64,
	dobj *float64,
	dviolcon *float64,
	dviolvar *float64,
	dviolbarvar *float64,
	dviolcone *float64,
) res.Code {
	return res.Code(
		C.MSK_getsolutioninfo(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(pobj),
			(*C.MSKrealt)(pviolcon),
			(*C.MSKrealt)(pviolvar),
			(*C.MSKrealt)(pviolbarvar),
			(*C.MSKrealt)(pviolcone),
			(*C.MSKrealt)(pviolitg),
			(*C.MSKrealt)(dobj),
			(*C.MSKrealt)(dviolcon),
			(*C.MSKrealt)(dviolvar),
			(*C.MSKrealt)(dviolbarvar),
			(*C.MSKrealt)(dviolcone),
		),
	)
}

// GetSolutioninfoNew is wrapping [MSK_getsolutioninfonew],
// Obtains information about of a solution.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `pobj` The primal objective value.
//   - `pviolcon` Maximal primal bound violation for a xc variable.
//   - `pviolvar` Maximal primal bound violation for a xx variable.
//   - `pviolbarvar` Maximal primal bound violation for a barx variable.
//   - `pviolcone` Maximal primal violation of the solution with respect to the conic constraints.
//   - `pviolacc` Maximal primal violation of the solution with respect to the affine conic constraints.
//   - `pvioldjc` Maximal primal violation of the solution with respect to the disjunctive constraints.
//   - `pviolitg` Maximal violation in the integer constraints.
//   - `dobj` Dual objective value.
//   - `dviolcon` Maximal dual bound violation for a xc variable.
//   - `dviolvar` Maximal dual bound violation for a xx variable.
//   - `dviolbarvar` Maximal dual bound violation for a bars variable.
//   - `dviolcone` Maximum violation of the dual solution in the dual conic constraints.
//   - `dviolacc` Maximum violation of the dual solution in the dual affine conic constraints.
//
// [MSK_getsolutioninfonew]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getsolutioninfonew
func (task *Task) GetSolutioninfoNew(
	whichsol SolType,
	pobj *float64,
	pviolcon *float64,
	pviolvar *float64,
	pviolbarvar *float64,
	pviolcone *float64,
	pviolacc *float64,
	pvioldjc *float64,
	pviolitg *float64,
	dobj *float64,
	dviolcon *float64,
	dviolvar *float64,
	dviolbarvar *float64,
	dviolcone *float64,
	dviolacc *float64,
) res.Code {
	return res.Code(
		C.MSK_getsolutioninfonew(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(pobj),
			(*C.MSKrealt)(pviolcon),
			(*C.MSKrealt)(pviolvar),
			(*C.MSKrealt)(pviolbarvar),
			(*C.MSKrealt)(pviolcone),
			(*C.MSKrealt)(pviolacc),
			(*C.MSKrealt)(pvioldjc),
			(*C.MSKrealt)(pviolitg),
			(*C.MSKrealt)(dobj),
			(*C.MSKrealt)(dviolcon),
			(*C.MSKrealt)(dviolvar),
			(*C.MSKrealt)(dviolbarvar),
			(*C.MSKrealt)(dviolcone),
			(*C.MSKrealt)(dviolacc),
		),
	)
}

// GetSolutionNew is wrapping [MSK_getsolutionnew],
// Obtains the complete solution.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `problemsta` Problem status.
//   - `solutionsta` Solution status.
//   - `skc` Status keys for the constraints.
//   - `skx` Status keys for the variables.
//   - `skn` Status keys for the conic constraints.
//   - `xc` Primal constraint solution.
//   - `xx` Primal variable solution.
//   - `y` Vector of dual variables corresponding to the constraints.
//   - `slc` Dual variables corresponding to the lower bounds on the constraints.
//   - `suc` Dual variables corresponding to the upper bounds on the constraints.
//   - `slx` Dual variables corresponding to the lower bounds on the variables.
//   - `sux` Dual variables corresponding to the upper bounds on the variables.
//   - `snx` Dual variables corresponding to the conic constraints on the variables.
//   - `doty` Dual variables corresponding to affine conic constraints.
//
// [MSK_getsolutionnew]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getsolutionnew
func (task *Task) GetSolutionNew(
	whichsol SolType,
	problemsta *ProSta,
	solutionsta *SolSta,
	skc *StaKey,
	skx *StaKey,
	skn *StaKey,
	xc *float64,
	xx *float64,
	y *float64,
	slc *float64,
	suc *float64,
	slx *float64,
	sux *float64,
	snx *float64,
	doty *float64,
) res.Code {
	return res.Code(
		C.MSK_getsolutionnew(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKprostae)(problemsta),
			(*C.MSKsolstae)(solutionsta),
			(*C.MSKstakeye)(skc),
			(*C.MSKstakeye)(skx),
			(*C.MSKstakeye)(skn),
			(*C.MSKrealt)(xc),
			(*C.MSKrealt)(xx),
			(*C.MSKrealt)(y),
			(*C.MSKrealt)(slc),
			(*C.MSKrealt)(suc),
			(*C.MSKrealt)(slx),
			(*C.MSKrealt)(sux),
			(*C.MSKrealt)(snx),
			(*C.MSKrealt)(doty),
		),
	)
}

// GetSparseSymmat is wrapping [MSK_getsparsesymmat],
// Gets a single symmetric matrix from the matrix store.
//
// Arguments:
//
//   - `idx` Index of the matrix to retrieve.
//   - `subi` Row subscripts of the matrix non-zero elements.
//   - `subj` Column subscripts of the matrix non-zero elements.
//   - `valij` Coefficients of the matrix non-zero elements.
//
// [MSK_getsparsesymmat]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getsparsesymmat
func (task *Task) GetSparseSymmat(
	idx int64,
	maxlen int64,
	subi *int32,
	subj *int32,
	valij *float64,
) res.Code {
	return res.Code(
		C.MSK_getsparsesymmat(
			task.task,
			C.MSKint64t(idx),
			C.MSKint64t(maxlen),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(valij),
		),
	)
}

// GetStrParam is wrapping [MSK_getstrparam],
// Obtains the value of a string parameter.
//
// Arguments:
//
//   - `param` Which parameter.
//   - `len` The length of the parameter value.
//
// Returns:
//
//   - `parvalue` If this is not a null pointer, the parameter value is stored here.
//
// [MSK_getstrparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getstrparam
func (task *Task) GetStrParam(
	param SParam,
	maxlen int32,
	len *int32,
	parvalue *byte,
) res.Code {
	return res.Code(
		C.MSK_getstrparam(
			task.task,
			C.MSKsparame(param),
			C.MSKint32t(maxlen),
			(*C.MSKint32t)(len),
			(*C.char)(unsafe.Pointer(parvalue)),
		),
	)
}

// GetStrParamLen is wrapping [MSK_getstrparamlen],
// Obtains the length of a string parameter.
//
// Arguments:
//
//   - `param` Which parameter.
//
// Returns:
//
//   - `len` The length of the parameter value.
//
// [MSK_getstrparamlen]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getstrparamlen
func (task *Task) GetStrParamLen(
	param SParam,
) (r res.Code, len int32) {
	r = res.Code(
		C.MSK_getstrparamlen(
			task.task,
			C.MSKsparame(param),
			(*C.MSKint32t)(&len),
		),
	)

	return
}

// GetSuc is wrapping [MSK_getsuc],
// Obtains the suc vector for a solution.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `suc` Dual variables corresponding to the upper bounds on the constraints.
//
// [MSK_getsuc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getsuc
func (task *Task) GetSuc(
	whichsol SolType,
	suc *float64,
) res.Code {
	return res.Code(
		C.MSK_getsuc(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(suc),
		),
	)
}

// GetSux is wrapping [MSK_getsux],
// Obtains the sux vector for a solution.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `sux` Dual variables corresponding to the upper bounds on the variables.
//
// [MSK_getsux]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getsux
func (task *Task) GetSux(
	whichsol SolType,
	sux *float64,
) res.Code {
	return res.Code(
		C.MSK_getsux(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(sux),
		),
	)
}

// GetSymbcon is wrapping [MSK_getsymbcon],
// Obtains a cone type string identifier.
//
// Arguments:
//
//   - `i` Index.
//   - `value` The corresponding value.
//
// Returns:
//
//   - `name` Name of the i'th symbolic constant.
//
// [MSK_getsymbcon]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getsymbcon
func (task *Task) GetSymbcon(
	i int32,
	sizevalue int32,
	name *byte,
	value *int32,
) res.Code {
	return res.Code(
		C.MSK_getsymbcon(
			task.task,
			C.MSKint32t(i),
			C.MSKint32t(sizevalue),
			(*C.char)(unsafe.Pointer(name)),
			(*C.MSKint32t)(value),
		),
	)
}

// GetSymmatInfo is wrapping [MSK_getsymmatinfo],
// Obtains information about a matrix from the symmetric matrix storage.
//
// Arguments:
//
//   - `idx` Index of the matrix for which information is requested.
//   - `dim` Returns the dimension of the requested matrix.
//   - `nz` Returns the number of non-zeros in the requested matrix.
//   - `mattype` Returns the type of the requested matrix.
//
// [MSK_getsymmatinfo]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getsymmatinfo
func (task *Task) GetSymmatInfo(
	idx int64,
	dim *int32,
	nz *int64,
	mattype *SymmatType,
) res.Code {
	return res.Code(
		C.MSK_getsymmatinfo(
			task.task,
			C.MSKint64t(idx),
			(*C.MSKint32t)(dim),
			(*C.MSKint64t)(nz),
			(*C.MSKsymmattypee)(mattype),
		),
	)
}

// GetVarbound is wrapping [MSK_getvarbound],
// Obtains bound information for one variable.
//
// Arguments:
//
//   - `i` Index of the variable for which the bound information should be obtained.
//   - `bk` Bound keys.
//   - `bl` Values for lower bounds.
//   - `bu` Values for upper bounds.
//
// [MSK_getvarbound]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getvarbound
func (task *Task) GetVarbound(
	i int32,
	bk *BoundKey,
	bl *float64,
	bu *float64,
) res.Code {
	return res.Code(
		C.MSK_getvarbound(
			task.task,
			C.MSKint32t(i),
			(*C.MSKboundkeye)(bk),
			(*C.MSKrealt)(bl),
			(*C.MSKrealt)(bu),
		),
	)
}

// GetVarnameindex is wrapping [MSK_getvarnameindex],
// Checks whether the name has been assigned to any variable.
//
// Arguments:
//
//   - `somename` The name which should be checked.
//   - `asgn` Is non-zero if the name somename is assigned to a variable.
//
// Returns:
//
//   - `index` If the name somename is assigned to a variable, then return the index of the variable.
//
// [MSK_getvarnameindex]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getvarnameindex
func (task *Task) GetVarnameindex(
	somename string,
	asgn *int32,
	index *int32,
) res.Code {
	c_somename := C.CString(somename)
	defer C.free(unsafe.Pointer(c_somename))

	return res.Code(
		C.MSK_getvarnameindex(
			task.task,
			c_somename,
			(*C.MSKint32t)(asgn),
			(*C.MSKint32t)(index),
		),
	)
}

// GetVarType is wrapping [MSK_getvartype],
// Gets the variable type of one variable.
//
// Arguments:
//
//   - `j` Index of the variable.
//
// Returns:
//
//   - `vartype` Variable type of variable index j.
//
// [MSK_getvartype]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getvartype
func (task *Task) GetVarType(
	j int32,
	vartype *VariableType,
) res.Code {
	return res.Code(
		C.MSK_getvartype(
			task.task,
			C.MSKint32t(j),
			(*C.MSKvariabletypee)(vartype),
		),
	)
}

// GetXc is wrapping [MSK_getxc],
// Obtains the xc vector for a solution.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `xc` Primal constraint solution.
//
// [MSK_getxc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getxc
func (task *Task) GetXc(
	whichsol SolType,
	xc *float64,
) res.Code {
	return res.Code(
		C.MSK_getxc(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(xc),
		),
	)
}

// GetY is wrapping [MSK_gety],
// Obtains the y vector for a solution.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `y` Vector of dual variables corresponding to the constraints.
//
// [MSK_gety]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.gety
func (task *Task) GetY(
	whichsol SolType,
	y *float64,
) res.Code {
	return res.Code(
		C.MSK_gety(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(y),
		),
	)
}
