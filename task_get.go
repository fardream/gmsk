// Automatically generated by github.com/fardream/gen-gmsk
// function deinitions

package gmsk

// #include <stdlib.h> // for C.free
// #include <mosek.h>
import "C"

import (
	"unsafe"

	"github.com/fardream/gmsk/res"
)

// GetAccb is wrapping [MSK_getaccb]
//
// [MSK_getaccb] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - accidx: MSKint64t
//   - b: MSKrealt *
//
// [MSK_getaccb]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getaccb
func (task *Task) GetAccb(
	accidx int64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_getaccb(
			task.task,
			C.MSKint64t(accidx),
			(*C.MSKrealt)(b),
		),
	)
}

// GetAccbarfBlockTriplet is wrapping [MSK_getaccbarfblocktriplet]
//
// [MSK_getaccbarfblocktriplet] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - maxnumtrip: MSKint64t
//   - numtrip: MSKint64t *
//   - acc_afe: MSKint64t *
//   - bar_var: MSKint32t *
//   - blk_row: MSKint32t *
//   - blk_col: MSKint32t *
//   - blk_val: MSKrealt *
//
// [MSK_getaccbarfblocktriplet]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getaccbarfblocktriplet
func (task *Task) GetAccbarfBlockTriplet(
	maxnumtrip int64,
	numtrip *int64,
	acc_afe *int64,
	bar_var *int32,
	blk_row *int32,
	blk_col *int32,
	blk_val *float64,
) res.Code {
	return res.Code(
		C.MSK_getaccbarfblocktriplet(
			task.task,
			C.MSKint64t(maxnumtrip),
			(*C.MSKint64t)(numtrip),
			(*C.MSKint64t)(acc_afe),
			(*C.MSKint32t)(bar_var),
			(*C.MSKint32t)(blk_row),
			(*C.MSKint32t)(blk_col),
			(*C.MSKrealt)(blk_val),
		),
	)
}

// GetAccbarfnumBlockTriplets is wrapping [MSK_getaccbarfnumblocktriplets]
//
// [MSK_getaccbarfnumblocktriplets] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - numtrip: MSKint64t *
//
// [MSK_getaccbarfnumblocktriplets]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getaccbarfnumblocktriplets
func (task *Task) GetAccbarfnumBlockTriplets(
	numtrip *int64,
) res.Code {
	return res.Code(
		C.MSK_getaccbarfnumblocktriplets(
			task.task,
			(*C.MSKint64t)(numtrip),
		),
	)
}

// GetAccDomain is wrapping [MSK_getaccdomain]
//
// [MSK_getaccdomain] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - accidx: MSKint64t
//   - domidx: MSKint64t *
//
// [MSK_getaccdomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getaccdomain
func (task *Task) GetAccDomain(
	accidx int64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_getaccdomain(
			task.task,
			C.MSKint64t(accidx),
			(*C.MSKint64t)(domidx),
		),
	)
}

// GetAccDotYs is wrapping [MSK_getaccdotys]
//
// [MSK_getaccdotys] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - doty: MSKrealt *
//
// [MSK_getaccdotys]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getaccdotys
func (task *Task) GetAccDotYs(
	whichsol SolType,
	doty *float64,
) res.Code {
	return res.Code(
		C.MSK_getaccdotys(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(doty),
		),
	)
}

// GetAccFTrip is wrapping [MSK_getaccftrip]
//
// [MSK_getaccftrip] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - frow: MSKint64t *
//   - fcol: MSKint32t *
//   - fval: MSKrealt *
//
// [MSK_getaccftrip]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getaccftrip
func (task *Task) GetAccFTrip(
	frow *int64,
	fcol *int32,
	fval *float64,
) res.Code {
	return res.Code(
		C.MSK_getaccftrip(
			task.task,
			(*C.MSKint64t)(frow),
			(*C.MSKint32t)(fcol),
			(*C.MSKrealt)(fval),
		),
	)
}

// GetAccGVector is wrapping [MSK_getaccgvector]
//
// [MSK_getaccgvector] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - g: MSKrealt *
//
// [MSK_getaccgvector]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getaccgvector
func (task *Task) GetAccGVector(
	g *float64,
) res.Code {
	return res.Code(
		C.MSK_getaccgvector(
			task.task,
			(*C.MSKrealt)(g),
		),
	)
}

// GetAccntot is wrapping [MSK_getaccntot]
//
// [MSK_getaccntot] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - n: MSKint64t *
//
// [MSK_getaccntot]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getaccntot
func (task *Task) GetAccntot(
	n *int64,
) res.Code {
	return res.Code(
		C.MSK_getaccntot(
			task.task,
			(*C.MSKint64t)(n),
		),
	)
}

// GetAccs is wrapping [MSK_getaccs]
//
// [MSK_getaccs] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - domidxlist: MSKint64t *
//   - afeidxlist: MSKint64t *
//   - b: MSKrealt *
//
// [MSK_getaccs]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getaccs
func (task *Task) GetAccs(
	domidxlist *int64,
	afeidxlist *int64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_getaccs(
			task.task,
			(*C.MSKint64t)(domidxlist),
			(*C.MSKint64t)(afeidxlist),
			(*C.MSKrealt)(b),
		),
	)
}

// GetACol is wrapping [MSK_getacol]
//
// [MSK_getacol] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - j: MSKint32t
//   - nzj: MSKint32t *
//   - subj: MSKint32t *
//   - valj: MSKrealt *
//
// [MSK_getacol]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getacol
func (task *Task) GetACol(
	j int32,
	nzj *int32,
	subj *int32,
	valj *float64,
) res.Code {
	return res.Code(
		C.MSK_getacol(
			task.task,
			C.MSKint32t(j),
			(*C.MSKint32t)(nzj),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(valj),
		),
	)
}

// GetAColSlice64 is wrapping [MSK_getacolslice64]
//
// [MSK_getacolslice64] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - maxnumnz: MSKint64t
//   - ptrb: MSKint64t *
//   - ptre: MSKint64t *
//   - sub: MSKint32t *
//   - val: MSKrealt *
//
// [MSK_getacolslice64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getacolslice64
func (task *Task) GetAColSlice64(
	first int32,
	last int32,
	maxnumnz int64,
	ptrb *int64,
	ptre *int64,
	sub *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_getacolslice64(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			C.MSKint64t(maxnumnz),
			(*C.MSKint64t)(ptrb),
			(*C.MSKint64t)(ptre),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(val),
		),
	)
}

// GetAfeBarFBlockTriplet is wrapping [MSK_getafebarfblocktriplet]
//
// [MSK_getafebarfblocktriplet] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - maxnumtrip: MSKint64t
//   - numtrip: MSKint64t *
//   - afeidx: MSKint64t *
//   - barvaridx: MSKint32t *
//   - subk: MSKint32t *
//   - subl: MSKint32t *
//   - valkl: MSKrealt *
//
// [MSK_getafebarfblocktriplet]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getafebarfblocktriplet
func (task *Task) GetAfeBarFBlockTriplet(
	maxnumtrip int64,
	numtrip *int64,
	afeidx *int64,
	barvaridx *int32,
	subk *int32,
	subl *int32,
	valkl *float64,
) res.Code {
	return res.Code(
		C.MSK_getafebarfblocktriplet(
			task.task,
			C.MSKint64t(maxnumtrip),
			(*C.MSKint64t)(numtrip),
			(*C.MSKint64t)(afeidx),
			(*C.MSKint32t)(barvaridx),
			(*C.MSKint32t)(subk),
			(*C.MSKint32t)(subl),
			(*C.MSKrealt)(valkl),
		),
	)
}

// GetAfeBarFNumBlockTriplets is wrapping [MSK_getafebarfnumblocktriplets]
//
// [MSK_getafebarfnumblocktriplets] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - numtrip: MSKint64t *
//
// [MSK_getafebarfnumblocktriplets]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getafebarfnumblocktriplets
func (task *Task) GetAfeBarFNumBlockTriplets(
	numtrip *int64,
) res.Code {
	return res.Code(
		C.MSK_getafebarfnumblocktriplets(
			task.task,
			(*C.MSKint64t)(numtrip),
		),
	)
}

// GetAfeBarFNumrowentries is wrapping [MSK_getafebarfnumrowentries]
//
// [MSK_getafebarfnumrowentries] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - afeidx: MSKint64t
//   - numentr: MSKint32t *
//
// [MSK_getafebarfnumrowentries]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getafebarfnumrowentries
func (task *Task) GetAfeBarFNumrowentries(
	afeidx int64,
	numentr *int32,
) res.Code {
	return res.Code(
		C.MSK_getafebarfnumrowentries(
			task.task,
			C.MSKint64t(afeidx),
			(*C.MSKint32t)(numentr),
		),
	)
}

// GetAfeBarFRow is wrapping [MSK_getafebarfrow]
//
// [MSK_getafebarfrow] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - afeidx: MSKint64t
//   - barvaridx: MSKint32t *
//   - ptrterm: MSKint64t *
//   - numterm: MSKint64t *
//   - termidx: MSKint64t *
//   - termweight: MSKrealt *
//
// [MSK_getafebarfrow]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getafebarfrow
func (task *Task) GetAfeBarFRow(
	afeidx int64,
	barvaridx *int32,
	ptrterm *int64,
	numterm *int64,
	termidx *int64,
	termweight *float64,
) res.Code {
	return res.Code(
		C.MSK_getafebarfrow(
			task.task,
			C.MSKint64t(afeidx),
			(*C.MSKint32t)(barvaridx),
			(*C.MSKint64t)(ptrterm),
			(*C.MSKint64t)(numterm),
			(*C.MSKint64t)(termidx),
			(*C.MSKrealt)(termweight),
		),
	)
}

// GetAfeBarFRowInfo is wrapping [MSK_getafebarfrowinfo]
//
// [MSK_getafebarfrowinfo] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - afeidx: MSKint64t
//   - numentr: MSKint32t *
//   - numterm: MSKint64t *
//
// [MSK_getafebarfrowinfo]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getafebarfrowinfo
func (task *Task) GetAfeBarFRowInfo(
	afeidx int64,
	numentr *int32,
	numterm *int64,
) res.Code {
	return res.Code(
		C.MSK_getafebarfrowinfo(
			task.task,
			C.MSKint64t(afeidx),
			(*C.MSKint32t)(numentr),
			(*C.MSKint64t)(numterm),
		),
	)
}

// GetAfeFRow is wrapping [MSK_getafefrow]
//
// [MSK_getafefrow] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - afeidx: MSKint64t
//   - numnz: MSKint32t *
//   - varidx: MSKint32t *
//   - val: MSKrealt *
//
// [MSK_getafefrow]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getafefrow
func (task *Task) GetAfeFRow(
	afeidx int64,
	numnz *int32,
	varidx *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_getafefrow(
			task.task,
			C.MSKint64t(afeidx),
			(*C.MSKint32t)(numnz),
			(*C.MSKint32t)(varidx),
			(*C.MSKrealt)(val),
		),
	)
}

// GetAfeFTrip is wrapping [MSK_getafeftrip]
//
// [MSK_getafeftrip] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - afeidx: MSKint64t *
//   - varidx: MSKint32t *
//   - val: MSKrealt *
//
// [MSK_getafeftrip]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getafeftrip
func (task *Task) GetAfeFTrip(
	afeidx *int64,
	varidx *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_getafeftrip(
			task.task,
			(*C.MSKint64t)(afeidx),
			(*C.MSKint32t)(varidx),
			(*C.MSKrealt)(val),
		),
	)
}

// GetAfeG is wrapping [MSK_getafeg]
//
// [MSK_getafeg] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - afeidx: MSKint64t
//   - g: MSKrealt *
//
// [MSK_getafeg]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getafeg
func (task *Task) GetAfeG(
	afeidx int64,
	g *float64,
) res.Code {
	return res.Code(
		C.MSK_getafeg(
			task.task,
			C.MSKint64t(afeidx),
			(*C.MSKrealt)(g),
		),
	)
}

// GetAij is wrapping [MSK_getaij]
//
// [MSK_getaij] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - i: MSKint32t
//   - j: MSKint32t
//   - aij: MSKrealt *
//
// [MSK_getaij]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getaij
func (task *Task) GetAij(
	i int32,
	j int32,
	aij *float64,
) res.Code {
	return res.Code(
		C.MSK_getaij(
			task.task,
			C.MSKint32t(i),
			C.MSKint32t(j),
			(*C.MSKrealt)(aij),
		),
	)
}

// GetARow is wrapping [MSK_getarow]
//
// [MSK_getarow] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - i: MSKint32t
//   - nzi: MSKint32t *
//   - subi: MSKint32t *
//   - vali: MSKrealt *
//
// [MSK_getarow]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getarow
func (task *Task) GetARow(
	i int32,
	nzi *int32,
	subi *int32,
	vali *float64,
) res.Code {
	return res.Code(
		C.MSK_getarow(
			task.task,
			C.MSKint32t(i),
			(*C.MSKint32t)(nzi),
			(*C.MSKint32t)(subi),
			(*C.MSKrealt)(vali),
		),
	)
}

// GetARowSlice64 is wrapping [MSK_getarowslice64]
//
// [MSK_getarowslice64] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - maxnumnz: MSKint64t
//   - ptrb: MSKint64t *
//   - ptre: MSKint64t *
//   - sub: MSKint32t *
//   - val: MSKrealt *
//
// [MSK_getarowslice64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getarowslice64
func (task *Task) GetARowSlice64(
	first int32,
	last int32,
	maxnumnz int64,
	ptrb *int64,
	ptre *int64,
	sub *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_getarowslice64(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			C.MSKint64t(maxnumnz),
			(*C.MSKint64t)(ptrb),
			(*C.MSKint64t)(ptre),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(val),
		),
	)
}

// GetAtrip is wrapping [MSK_getatrip]
//
// [MSK_getatrip] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - maxnumnz: MSKint64t
//   - subi: MSKint32t *
//   - subj: MSKint32t *
//   - val: MSKrealt *
//
// [MSK_getatrip]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getatrip
func (task *Task) GetAtrip(
	maxnumnz int64,
	subi *int32,
	subj *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_getatrip(
			task.task,
			C.MSKint64t(maxnumnz),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(val),
		),
	)
}

// GetAtruncatetol is wrapping [MSK_getatruncatetol]
//
// [MSK_getatruncatetol] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - tolzero: MSKrealt *
//
// [MSK_getatruncatetol]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getatruncatetol
func (task *Task) GetAtruncatetol(
	tolzero *float64,
) res.Code {
	return res.Code(
		C.MSK_getatruncatetol(
			task.task,
			(*C.MSKrealt)(tolzero),
		),
	)
}

// GetBarABlockTriplet is wrapping [MSK_getbarablocktriplet]
//
// [MSK_getbarablocktriplet] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - maxnum: MSKint64t
//   - num: MSKint64t *
//   - subi: MSKint32t *
//   - subj: MSKint32t *
//   - subk: MSKint32t *
//   - subl: MSKint32t *
//   - valijkl: MSKrealt *
//
// [MSK_getbarablocktriplet]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getbarablocktriplet
func (task *Task) GetBarABlockTriplet(
	maxnum int64,
	num *int64,
	subi *int32,
	subj *int32,
	subk *int32,
	subl *int32,
	valijkl *float64,
) res.Code {
	return res.Code(
		C.MSK_getbarablocktriplet(
			task.task,
			C.MSKint64t(maxnum),
			(*C.MSKint64t)(num),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKint32t)(subk),
			(*C.MSKint32t)(subl),
			(*C.MSKrealt)(valijkl),
		),
	)
}

// GetBarAIdx is wrapping [MSK_getbaraidx]
//
// [MSK_getbaraidx] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - idx: MSKint64t
//   - maxnum: MSKint64t
//   - i: MSKint32t *
//   - j: MSKint32t *
//   - num: MSKint64t *
//   - sub: MSKint64t *
//   - weights: MSKrealt *
//
// [MSK_getbaraidx]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getbaraidx
func (task *Task) GetBarAIdx(
	idx int64,
	maxnum int64,
	i *int32,
	j *int32,
	num *int64,
	sub *int64,
	weights *float64,
) res.Code {
	return res.Code(
		C.MSK_getbaraidx(
			task.task,
			C.MSKint64t(idx),
			C.MSKint64t(maxnum),
			(*C.MSKint32t)(i),
			(*C.MSKint32t)(j),
			(*C.MSKint64t)(num),
			(*C.MSKint64t)(sub),
			(*C.MSKrealt)(weights),
		),
	)
}

// GetBarAIdxij is wrapping [MSK_getbaraidxij]
//
// [MSK_getbaraidxij] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - idx: MSKint64t
//   - i: MSKint32t *
//   - j: MSKint32t *
//
// [MSK_getbaraidxij]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getbaraidxij
func (task *Task) GetBarAIdxij(
	idx int64,
	i *int32,
	j *int32,
) res.Code {
	return res.Code(
		C.MSK_getbaraidxij(
			task.task,
			C.MSKint64t(idx),
			(*C.MSKint32t)(i),
			(*C.MSKint32t)(j),
		),
	)
}

// GetBarAIdxInfo is wrapping [MSK_getbaraidxinfo]
//
// [MSK_getbaraidxinfo] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - idx: MSKint64t
//   - num: MSKint64t *
//
// [MSK_getbaraidxinfo]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getbaraidxinfo
func (task *Task) GetBarAIdxInfo(
	idx int64,
	num *int64,
) res.Code {
	return res.Code(
		C.MSK_getbaraidxinfo(
			task.task,
			C.MSKint64t(idx),
			(*C.MSKint64t)(num),
		),
	)
}

// GetBarASparsity is wrapping [MSK_getbarasparsity]
//
// [MSK_getbarasparsity] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - maxnumnz: MSKint64t
//   - numnz: MSKint64t *
//   - idxij: MSKint64t *
//
// [MSK_getbarasparsity]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getbarasparsity
func (task *Task) GetBarASparsity(
	maxnumnz int64,
	numnz *int64,
	idxij *int64,
) res.Code {
	return res.Code(
		C.MSK_getbarasparsity(
			task.task,
			C.MSKint64t(maxnumnz),
			(*C.MSKint64t)(numnz),
			(*C.MSKint64t)(idxij),
		),
	)
}

// GetBarCBlockTriplet is wrapping [MSK_getbarcblocktriplet]
//
// [MSK_getbarcblocktriplet] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - maxnum: MSKint64t
//   - num: MSKint64t *
//   - subj: MSKint32t *
//   - subk: MSKint32t *
//   - subl: MSKint32t *
//   - valjkl: MSKrealt *
//
// [MSK_getbarcblocktriplet]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getbarcblocktriplet
func (task *Task) GetBarCBlockTriplet(
	maxnum int64,
	num *int64,
	subj *int32,
	subk *int32,
	subl *int32,
	valjkl *float64,
) res.Code {
	return res.Code(
		C.MSK_getbarcblocktriplet(
			task.task,
			C.MSKint64t(maxnum),
			(*C.MSKint64t)(num),
			(*C.MSKint32t)(subj),
			(*C.MSKint32t)(subk),
			(*C.MSKint32t)(subl),
			(*C.MSKrealt)(valjkl),
		),
	)
}

// GetBarCIdx is wrapping [MSK_getbarcidx]
//
// [MSK_getbarcidx] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - idx: MSKint64t
//   - maxnum: MSKint64t
//   - j: MSKint32t *
//   - num: MSKint64t *
//   - sub: MSKint64t *
//   - weights: MSKrealt *
//
// [MSK_getbarcidx]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getbarcidx
func (task *Task) GetBarCIdx(
	idx int64,
	maxnum int64,
	j *int32,
	num *int64,
	sub *int64,
	weights *float64,
) res.Code {
	return res.Code(
		C.MSK_getbarcidx(
			task.task,
			C.MSKint64t(idx),
			C.MSKint64t(maxnum),
			(*C.MSKint32t)(j),
			(*C.MSKint64t)(num),
			(*C.MSKint64t)(sub),
			(*C.MSKrealt)(weights),
		),
	)
}

// GetBarCIdxInfo is wrapping [MSK_getbarcidxinfo]
//
// [MSK_getbarcidxinfo] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - idx: MSKint64t
//   - num: MSKint64t *
//
// [MSK_getbarcidxinfo]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getbarcidxinfo
func (task *Task) GetBarCIdxInfo(
	idx int64,
	num *int64,
) res.Code {
	return res.Code(
		C.MSK_getbarcidxinfo(
			task.task,
			C.MSKint64t(idx),
			(*C.MSKint64t)(num),
		),
	)
}

// GetBarCIdxj is wrapping [MSK_getbarcidxj]
//
// [MSK_getbarcidxj] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - idx: MSKint64t
//   - j: MSKint32t *
//
// [MSK_getbarcidxj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getbarcidxj
func (task *Task) GetBarCIdxj(
	idx int64,
	j *int32,
) res.Code {
	return res.Code(
		C.MSK_getbarcidxj(
			task.task,
			C.MSKint64t(idx),
			(*C.MSKint32t)(j),
		),
	)
}

// GetBarCSparsity is wrapping [MSK_getbarcsparsity]
//
// [MSK_getbarcsparsity] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - maxnumnz: MSKint64t
//   - numnz: MSKint64t *
//   - idxj: MSKint64t *
//
// [MSK_getbarcsparsity]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getbarcsparsity
func (task *Task) GetBarCSparsity(
	maxnumnz int64,
	numnz *int64,
	idxj *int64,
) res.Code {
	return res.Code(
		C.MSK_getbarcsparsity(
			task.task,
			C.MSKint64t(maxnumnz),
			(*C.MSKint64t)(numnz),
			(*C.MSKint64t)(idxj),
		),
	)
}

// GetBarsj is wrapping [MSK_getbarsj]
//
// [MSK_getbarsj] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - j: MSKint32t
//   - barsj: MSKrealt *
//
// [MSK_getbarsj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getbarsj
func (task *Task) GetBarsj(
	whichsol SolType,
	j int32,
	barsj *float64,
) res.Code {
	return res.Code(
		C.MSK_getbarsj(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(j),
			(*C.MSKrealt)(barsj),
		),
	)
}

// GetBarvarnameindex is wrapping [MSK_getbarvarnameindex]
//
// [MSK_getbarvarnameindex] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - somename: const char *
//   - asgn: MSKint32t *
//   - index: MSKint32t *
//
// [MSK_getbarvarnameindex]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getbarvarnameindex
func (task *Task) GetBarvarnameindex(
	somename string,
	asgn *int32,
	index *int32,
) res.Code {
	c_somename := C.CString(somename)
	defer C.free(unsafe.Pointer(c_somename))

	return res.Code(
		C.MSK_getbarvarnameindex(
			task.task,
			c_somename,
			(*C.MSKint32t)(asgn),
			(*C.MSKint32t)(index),
		),
	)
}

// GetBarxj is wrapping [MSK_getbarxj]
//
// [MSK_getbarxj] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - j: MSKint32t
//   - barxj: MSKrealt *
//
// [MSK_getbarxj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getbarxj
func (task *Task) GetBarxj(
	whichsol SolType,
	j int32,
	barxj *float64,
) res.Code {
	return res.Code(
		C.MSK_getbarxj(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(j),
			(*C.MSKrealt)(barxj),
		),
	)
}

// GetC is wrapping [MSK_getc]
//
// [MSK_getc] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - c: MSKrealt *
//
// [MSK_getc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getc
func (task *Task) GetC(
	c *float64,
) res.Code {
	return res.Code(
		C.MSK_getc(
			task.task,
			(*C.MSKrealt)(c),
		),
	)
}

// GetCFix is wrapping [MSK_getcfix]
//
// [MSK_getcfix] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - cfix: MSKrealt *
//
// [MSK_getcfix]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getcfix
func (task *Task) GetCFix(
	cfix *float64,
) res.Code {
	return res.Code(
		C.MSK_getcfix(
			task.task,
			(*C.MSKrealt)(cfix),
		),
	)
}

// GetCj is wrapping [MSK_getcj]
//
// [MSK_getcj] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - j: MSKint32t
//   - cj: MSKrealt *
//
// [MSK_getcj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getcj
func (task *Task) GetCj(
	j int32,
	cj *float64,
) res.Code {
	return res.Code(
		C.MSK_getcj(
			task.task,
			C.MSKint32t(j),
			(*C.MSKrealt)(cj),
		),
	)
}

// GetConbound is wrapping [MSK_getconbound]
//
// [MSK_getconbound] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - i: MSKint32t
//   - bk: MSKboundkeye *
//   - bl: MSKrealt *
//   - bu: MSKrealt *
//
// [MSK_getconbound]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getconbound
func (task *Task) GetConbound(
	i int32,
	bk *BoundKey,
	bl *float64,
	bu *float64,
) res.Code {
	return res.Code(
		C.MSK_getconbound(
			task.task,
			C.MSKint32t(i),
			(*C.MSKboundkeye)(bk),
			(*C.MSKrealt)(bl),
			(*C.MSKrealt)(bu),
		),
	)
}

// GetCone is wrapping [MSK_getcone]
//
// [MSK_getcone] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - k: MSKint32t
//   - ct: MSKconetypee *
//   - conepar: MSKrealt *
//   - nummem: MSKint32t *
//   - submem: MSKint32t *
//
// [MSK_getcone]/GetCone is deprecated by mosek and will be removed in a future release.
//
// [MSK_getcone]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getcone
func (task *Task) GetCone(
	k int32,
	ct *ConeType,
	conepar *float64,
	nummem *int32,
	submem *int32,
) res.Code {
	return res.Code(
		C.MSK_getcone(
			task.task,
			C.MSKint32t(k),
			(*C.MSKconetypee)(ct),
			(*C.MSKrealt)(conepar),
			(*C.MSKint32t)(nummem),
			(*C.MSKint32t)(submem),
		),
	)
}

// GetConeInfo is wrapping [MSK_getconeinfo]
//
// [MSK_getconeinfo] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - k: MSKint32t
//   - ct: MSKconetypee *
//   - conepar: MSKrealt *
//   - nummem: MSKint32t *
//
// [MSK_getconeinfo]/GetConeInfo is deprecated by mosek and will be removed in a future release.
//
// [MSK_getconeinfo]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getconeinfo
func (task *Task) GetConeInfo(
	k int32,
	ct *ConeType,
	conepar *float64,
	nummem *int32,
) res.Code {
	return res.Code(
		C.MSK_getconeinfo(
			task.task,
			C.MSKint32t(k),
			(*C.MSKconetypee)(ct),
			(*C.MSKrealt)(conepar),
			(*C.MSKint32t)(nummem),
		),
	)
}

// GetConenameindex is wrapping [MSK_getconenameindex]
//
// [MSK_getconenameindex] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - somename: const char *
//   - asgn: MSKint32t *
//   - index: MSKint32t *
//
// [MSK_getconenameindex]/GetConenameindex is deprecated by mosek and will be removed in a future release.
//
// [MSK_getconenameindex]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getconenameindex
func (task *Task) GetConenameindex(
	somename string,
	asgn *int32,
	index *int32,
) res.Code {
	c_somename := C.CString(somename)
	defer C.free(unsafe.Pointer(c_somename))

	return res.Code(
		C.MSK_getconenameindex(
			task.task,
			c_somename,
			(*C.MSKint32t)(asgn),
			(*C.MSKint32t)(index),
		),
	)
}

// GetConnameindex is wrapping [MSK_getconnameindex]
//
// [MSK_getconnameindex] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - somename: const char *
//   - asgn: MSKint32t *
//   - index: MSKint32t *
//
// [MSK_getconnameindex]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getconnameindex
func (task *Task) GetConnameindex(
	somename string,
	asgn *int32,
	index *int32,
) res.Code {
	c_somename := C.CString(somename)
	defer C.free(unsafe.Pointer(c_somename))

	return res.Code(
		C.MSK_getconnameindex(
			task.task,
			c_somename,
			(*C.MSKint32t)(asgn),
			(*C.MSKint32t)(index),
		),
	)
}

// GetDimbarvarj is wrapping [MSK_getdimbarvarj]
//
// [MSK_getdimbarvarj] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - j: MSKint32t
//   - dimbarvarj: MSKint32t *
//
// [MSK_getdimbarvarj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdimbarvarj
func (task *Task) GetDimbarvarj(
	j int32,
	dimbarvarj *int32,
) res.Code {
	return res.Code(
		C.MSK_getdimbarvarj(
			task.task,
			C.MSKint32t(j),
			(*C.MSKint32t)(dimbarvarj),
		),
	)
}

// GetDjcb is wrapping [MSK_getdjcb]
//
// [MSK_getdjcb] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - djcidx: MSKint64t
//   - b: MSKrealt *
//
// [MSK_getdjcb]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdjcb
func (task *Task) GetDjcb(
	djcidx int64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_getdjcb(
			task.task,
			C.MSKint64t(djcidx),
			(*C.MSKrealt)(b),
		),
	)
}

// GetDjcnumafe is wrapping [MSK_getdjcnumafe]
//
// [MSK_getdjcnumafe] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - djcidx: MSKint64t
//   - numafe: MSKint64t *
//
// [MSK_getdjcnumafe]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdjcnumafe
func (task *Task) GetDjcnumafe(
	djcidx int64,
	numafe *int64,
) res.Code {
	return res.Code(
		C.MSK_getdjcnumafe(
			task.task,
			C.MSKint64t(djcidx),
			(*C.MSKint64t)(numafe),
		),
	)
}

// GetDjcnumafetot is wrapping [MSK_getdjcnumafetot]
//
// [MSK_getdjcnumafetot] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - numafetot: MSKint64t *
//
// [MSK_getdjcnumafetot]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdjcnumafetot
func (task *Task) GetDjcnumafetot(
	numafetot *int64,
) res.Code {
	return res.Code(
		C.MSK_getdjcnumafetot(
			task.task,
			(*C.MSKint64t)(numafetot),
		),
	)
}

// GetDjcnumDomain is wrapping [MSK_getdjcnumdomain]
//
// [MSK_getdjcnumdomain] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - djcidx: MSKint64t
//   - numdomain: MSKint64t *
//
// [MSK_getdjcnumdomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdjcnumdomain
func (task *Task) GetDjcnumDomain(
	djcidx int64,
	numdomain *int64,
) res.Code {
	return res.Code(
		C.MSK_getdjcnumdomain(
			task.task,
			C.MSKint64t(djcidx),
			(*C.MSKint64t)(numdomain),
		),
	)
}

// GetDjcnumdomaintot is wrapping [MSK_getdjcnumdomaintot]
//
// [MSK_getdjcnumdomaintot] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - numdomaintot: MSKint64t *
//
// [MSK_getdjcnumdomaintot]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdjcnumdomaintot
func (task *Task) GetDjcnumdomaintot(
	numdomaintot *int64,
) res.Code {
	return res.Code(
		C.MSK_getdjcnumdomaintot(
			task.task,
			(*C.MSKint64t)(numdomaintot),
		),
	)
}

// GetDjcnumterm is wrapping [MSK_getdjcnumterm]
//
// [MSK_getdjcnumterm] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - djcidx: MSKint64t
//   - numterm: MSKint64t *
//
// [MSK_getdjcnumterm]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdjcnumterm
func (task *Task) GetDjcnumterm(
	djcidx int64,
	numterm *int64,
) res.Code {
	return res.Code(
		C.MSK_getdjcnumterm(
			task.task,
			C.MSKint64t(djcidx),
			(*C.MSKint64t)(numterm),
		),
	)
}

// GetDjcnumtermtot is wrapping [MSK_getdjcnumtermtot]
//
// [MSK_getdjcnumtermtot] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - numtermtot: MSKint64t *
//
// [MSK_getdjcnumtermtot]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdjcnumtermtot
func (task *Task) GetDjcnumtermtot(
	numtermtot *int64,
) res.Code {
	return res.Code(
		C.MSK_getdjcnumtermtot(
			task.task,
			(*C.MSKint64t)(numtermtot),
		),
	)
}

// GetDjcs is wrapping [MSK_getdjcs]
//
// [MSK_getdjcs] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - domidxlist: MSKint64t *
//   - afeidxlist: MSKint64t *
//   - b: MSKrealt *
//   - termsizelist: MSKint64t *
//   - numterms: MSKint64t *
//
// [MSK_getdjcs]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdjcs
func (task *Task) GetDjcs(
	domidxlist *int64,
	afeidxlist *int64,
	b *float64,
	termsizelist *int64,
	numterms *int64,
) res.Code {
	return res.Code(
		C.MSK_getdjcs(
			task.task,
			(*C.MSKint64t)(domidxlist),
			(*C.MSKint64t)(afeidxlist),
			(*C.MSKrealt)(b),
			(*C.MSKint64t)(termsizelist),
			(*C.MSKint64t)(numterms),
		),
	)
}

// GetDomainn is wrapping [MSK_getdomainn]
//
// [MSK_getdomainn] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - domidx: MSKint64t
//   - n: MSKint64t *
//
// [MSK_getdomainn]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdomainn
func (task *Task) GetDomainn(
	domidx int64,
	n *int64,
) res.Code {
	return res.Code(
		C.MSK_getdomainn(
			task.task,
			C.MSKint64t(domidx),
			(*C.MSKint64t)(n),
		),
	)
}

// GetDomaintype is wrapping [MSK_getdomaintype]
//
// [MSK_getdomaintype] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - domidx: MSKint64t
//   - domtype: MSKdomaintypee *
//
// [MSK_getdomaintype]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdomaintype
func (task *Task) GetDomaintype(
	domidx int64,
	domtype *DomainType,
) res.Code {
	return res.Code(
		C.MSK_getdomaintype(
			task.task,
			C.MSKint64t(domidx),
			(*C.MSKdomaintypee)(domtype),
		),
	)
}

// GetDouInf is wrapping [MSK_getdouinf] and
// retrieves float point information from the task.
//
// [MSK_getdouinf] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichdinf: MSKdinfiteme
//   - dvalue: MSKrealt *
//
// [MSK_getdouinf]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdouinf
func (task *Task) GetDouInf(
	whichdinf DInfItem,
) (r res.Code, dvalue float64) {
	r = res.Code(
		C.MSK_getdouinf(
			task.task,
			C.MSKdinfiteme(whichdinf),
			(*C.MSKrealt)(&dvalue),
		),
	)

	return
}

// GetDouParam is wrapping [MSK_getdouparam]
//
// [MSK_getdouparam] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - param: MSKdparame
//   - parvalue: MSKrealt *
//
// [MSK_getdouparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdouparam
func (task *Task) GetDouParam(
	param DParam,
	parvalue *float64,
) res.Code {
	return res.Code(
		C.MSK_getdouparam(
			task.task,
			C.MSKdparame(param),
			(*C.MSKrealt)(parvalue),
		),
	)
}

// GetDualobj is wrapping [MSK_getdualobj]
//
// [MSK_getdualobj] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - dualobj: MSKrealt *
//
// [MSK_getdualobj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdualobj
func (task *Task) GetDualobj(
	whichsol SolType,
	dualobj *float64,
) res.Code {
	return res.Code(
		C.MSK_getdualobj(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(dualobj),
		),
	)
}

// GetDualsolutionnorms is wrapping [MSK_getdualsolutionnorms]
//
// [MSK_getdualsolutionnorms] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - nrmy: MSKrealt *
//   - nrmslc: MSKrealt *
//   - nrmsuc: MSKrealt *
//   - nrmslx: MSKrealt *
//   - nrmsux: MSKrealt *
//   - nrmsnx: MSKrealt *
//   - nrmbars: MSKrealt *
//
// [MSK_getdualsolutionnorms]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdualsolutionnorms
func (task *Task) GetDualsolutionnorms(
	whichsol SolType,
	nrmy *float64,
	nrmslc *float64,
	nrmsuc *float64,
	nrmslx *float64,
	nrmsux *float64,
	nrmsnx *float64,
	nrmbars *float64,
) res.Code {
	return res.Code(
		C.MSK_getdualsolutionnorms(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(nrmy),
			(*C.MSKrealt)(nrmslc),
			(*C.MSKrealt)(nrmsuc),
			(*C.MSKrealt)(nrmslx),
			(*C.MSKrealt)(nrmsux),
			(*C.MSKrealt)(nrmsnx),
			(*C.MSKrealt)(nrmbars),
		),
	)
}

// GetDviolacc is wrapping [MSK_getdviolacc]
//
// [MSK_getdviolacc] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - numaccidx: MSKint64t
//   - accidxlist: const MSKint64t *
//   - viol: MSKrealt *
//
// [MSK_getdviolacc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdviolacc
func (task *Task) GetDviolacc(
	whichsol SolType,
	numaccidx int64,
	accidxlist *int64,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getdviolacc(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint64t(numaccidx),
			(*C.MSKint64t)(accidxlist),
			(*C.MSKrealt)(viol),
		),
	)
}

// GetDviolbarvar is wrapping [MSK_getdviolbarvar]
//
// [MSK_getdviolbarvar] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - viol: MSKrealt *
//
// [MSK_getdviolbarvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdviolbarvar
func (task *Task) GetDviolbarvar(
	whichsol SolType,
	num int32,
	sub *int32,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getdviolbarvar(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(viol),
		),
	)
}

// GetDviolcon is wrapping [MSK_getdviolcon]
//
// [MSK_getdviolcon] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - viol: MSKrealt *
//
// [MSK_getdviolcon]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdviolcon
func (task *Task) GetDviolcon(
	whichsol SolType,
	num int32,
	sub *int32,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getdviolcon(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(viol),
		),
	)
}

// GetDviolcones is wrapping [MSK_getdviolcones]
//
// [MSK_getdviolcones] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - viol: MSKrealt *
//
// [MSK_getdviolcones]/GetDviolcones is deprecated by mosek and will be removed in a future release.
//
// [MSK_getdviolcones]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdviolcones
func (task *Task) GetDviolcones(
	whichsol SolType,
	num int32,
	sub *int32,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getdviolcones(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(viol),
		),
	)
}

// GetDviolvar is wrapping [MSK_getdviolvar]
//
// [MSK_getdviolvar] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - viol: MSKrealt *
//
// [MSK_getdviolvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getdviolvar
func (task *Task) GetDviolvar(
	whichsol SolType,
	num int32,
	sub *int32,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getdviolvar(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(viol),
		),
	)
}

// GetInfindex is wrapping [MSK_getinfindex]
//
// [MSK_getinfindex] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - inftype: MSKinftypee
//   - infname: const char *
//   - infindex: MSKint32t *
//
// [MSK_getinfindex]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getinfindex
func (task *Task) GetInfindex(
	inftype InfType,
	infname string,
	infindex *int32,
) res.Code {
	c_infname := C.CString(infname)
	defer C.free(unsafe.Pointer(c_infname))

	return res.Code(
		C.MSK_getinfindex(
			task.task,
			C.MSKinftypee(inftype),
			c_infname,
			(*C.MSKint32t)(infindex),
		),
	)
}

// GetInfmax is wrapping [MSK_getinfmax]
//
// [MSK_getinfmax] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - inftype: MSKinftypee
//   - infmax: MSKint32t *
//
// [MSK_getinfmax]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getinfmax
func (task *Task) GetInfmax(
	inftype InfType,
	infmax *int32,
) res.Code {
	return res.Code(
		C.MSK_getinfmax(
			task.task,
			C.MSKinftypee(inftype),
			(*C.MSKint32t)(infmax),
		),
	)
}

// GetIntInf is wrapping [MSK_getintinf] and
// retrieves integer information from the task.
//
// [MSK_getintinf] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichiinf: MSKiinfiteme
//   - ivalue: MSKint32t *
//
// [MSK_getintinf]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getintinf
func (task *Task) GetIntInf(
	whichiinf IInfItem,
) (r res.Code, ivalue int32) {
	r = res.Code(
		C.MSK_getintinf(
			task.task,
			C.MSKiinfiteme(whichiinf),
			(*C.MSKint32t)(&ivalue),
		),
	)

	return
}

// GetIntParam is wrapping [MSK_getintparam]
//
// [MSK_getintparam] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - param: MSKiparame
//   - parvalue: MSKint32t *
//
// [MSK_getintparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getintparam
func (task *Task) GetIntParam(
	param IParam,
	parvalue *int32,
) res.Code {
	return res.Code(
		C.MSK_getintparam(
			task.task,
			C.MSKiparame(param),
			(*C.MSKint32t)(parvalue),
		),
	)
}

// GetLasterror is wrapping [MSK_getlasterror]
//
// [MSK_getlasterror] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - lastrescode: MSKrescodee *
//   - sizelastmsg: MSKint32t
//   - lastmsglen: MSKint32t *
//   - lastmsg: char *
//
// [MSK_getlasterror]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getlasterror
func (task *Task) GetLasterror(
	lastrescode *res.Code,
	sizelastmsg int32,
	lastmsglen *int32,
	lastmsg *byte,
) res.Code {
	return res.Code(
		C.MSK_getlasterror(
			task.task,
			(*C.MSKrescodee)(lastrescode),
			C.MSKint32t(sizelastmsg),
			(*C.MSKint32t)(lastmsglen),
			(*C.char)(unsafe.Pointer(lastmsg)),
		),
	)
}

// GetLasterror64 is wrapping [MSK_getlasterror64]
//
// [MSK_getlasterror64] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - lastrescode: MSKrescodee *
//   - sizelastmsg: MSKint64t
//   - lastmsglen: MSKint64t *
//   - lastmsg: char *
//
// [MSK_getlasterror64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getlasterror64
func (task *Task) GetLasterror64(
	lastrescode *res.Code,
	sizelastmsg int64,
	lastmsglen *int64,
	lastmsg *byte,
) res.Code {
	return res.Code(
		C.MSK_getlasterror64(
			task.task,
			(*C.MSKrescodee)(lastrescode),
			C.MSKint64t(sizelastmsg),
			(*C.MSKint64t)(lastmsglen),
			(*C.char)(unsafe.Pointer(lastmsg)),
		),
	)
}

// GetLenbarvarj is wrapping [MSK_getlenbarvarj]
//
// [MSK_getlenbarvarj] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - j: MSKint32t
//   - lenbarvarj: MSKint64t *
//
// [MSK_getlenbarvarj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getlenbarvarj
func (task *Task) GetLenbarvarj(
	j int32,
	lenbarvarj *int64,
) res.Code {
	return res.Code(
		C.MSK_getlenbarvarj(
			task.task,
			C.MSKint32t(j),
			(*C.MSKint64t)(lenbarvarj),
		),
	)
}

// GetLintinf is wrapping [MSK_getlintinf]
//
// [MSK_getlintinf] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichliinf: MSKliinfiteme
//   - ivalue: MSKint64t *
//
// [MSK_getlintinf]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getlintinf
func (task *Task) GetLintinf(
	whichliinf LIInfItem,
	ivalue *int64,
) res.Code {
	return res.Code(
		C.MSK_getlintinf(
			task.task,
			C.MSKliinfiteme(whichliinf),
			(*C.MSKint64t)(ivalue),
		),
	)
}

// GetMaxnumanz is wrapping [MSK_getmaxnumanz]
//
// [MSK_getmaxnumanz] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - maxnumanz: MSKint32t *
//
// [MSK_getmaxnumanz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getmaxnumanz
func (task *Task) GetMaxnumanz(
	maxnumanz *int32,
) res.Code {
	return res.Code(
		C.MSK_getmaxnumanz(
			task.task,
			(*C.MSKint32t)(maxnumanz),
		),
	)
}

// GetMaxnumanz64 is wrapping [MSK_getmaxnumanz64]
//
// [MSK_getmaxnumanz64] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - maxnumanz: MSKint64t *
//
// [MSK_getmaxnumanz64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getmaxnumanz64
func (task *Task) GetMaxnumanz64(
	maxnumanz *int64,
) res.Code {
	return res.Code(
		C.MSK_getmaxnumanz64(
			task.task,
			(*C.MSKint64t)(maxnumanz),
		),
	)
}

// GetMaxnumbarvar is wrapping [MSK_getmaxnumbarvar]
//
// [MSK_getmaxnumbarvar] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - maxnumbarvar: MSKint32t *
//
// [MSK_getmaxnumbarvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getmaxnumbarvar
func (task *Task) GetMaxnumbarvar(
	maxnumbarvar *int32,
) res.Code {
	return res.Code(
		C.MSK_getmaxnumbarvar(
			task.task,
			(*C.MSKint32t)(maxnumbarvar),
		),
	)
}

// GetMaxnumcon is wrapping [MSK_getmaxnumcon]
//
// [MSK_getmaxnumcon] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - maxnumcon: MSKint32t *
//
// [MSK_getmaxnumcon]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getmaxnumcon
func (task *Task) GetMaxnumcon(
	maxnumcon *int32,
) res.Code {
	return res.Code(
		C.MSK_getmaxnumcon(
			task.task,
			(*C.MSKint32t)(maxnumcon),
		),
	)
}

// GetMaxnumcone is wrapping [MSK_getmaxnumcone]
//
// [MSK_getmaxnumcone] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - maxnumcone: MSKint32t *
//
// [MSK_getmaxnumcone]/GetMaxnumcone is deprecated by mosek and will be removed in a future release.
//
// [MSK_getmaxnumcone]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getmaxnumcone
func (task *Task) GetMaxnumcone(
	maxnumcone *int32,
) res.Code {
	return res.Code(
		C.MSK_getmaxnumcone(
			task.task,
			(*C.MSKint32t)(maxnumcone),
		),
	)
}

// GetMaxnumqnz is wrapping [MSK_getmaxnumqnz]
//
// [MSK_getmaxnumqnz] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - maxnumqnz: MSKint32t *
//
// [MSK_getmaxnumqnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getmaxnumqnz
func (task *Task) GetMaxnumqnz(
	maxnumqnz *int32,
) res.Code {
	return res.Code(
		C.MSK_getmaxnumqnz(
			task.task,
			(*C.MSKint32t)(maxnumqnz),
		),
	)
}

// GetMaxnumqnz64 is wrapping [MSK_getmaxnumqnz64]
//
// [MSK_getmaxnumqnz64] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - maxnumqnz: MSKint64t *
//
// [MSK_getmaxnumqnz64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getmaxnumqnz64
func (task *Task) GetMaxnumqnz64(
	maxnumqnz *int64,
) res.Code {
	return res.Code(
		C.MSK_getmaxnumqnz64(
			task.task,
			(*C.MSKint64t)(maxnumqnz),
		),
	)
}

// GetMaxnumvar is wrapping [MSK_getmaxnumvar]
//
// [MSK_getmaxnumvar] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - maxnumvar: MSKint32t *
//
// [MSK_getmaxnumvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getmaxnumvar
func (task *Task) GetMaxnumvar(
	maxnumvar *int32,
) res.Code {
	return res.Code(
		C.MSK_getmaxnumvar(
			task.task,
			(*C.MSKint32t)(maxnumvar),
		),
	)
}

// GetMemusagetask is wrapping [MSK_getmemusagetask]
//
// [MSK_getmemusagetask] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - meminuse: MSKint64t *
//   - maxmemuse: MSKint64t *
//
// [MSK_getmemusagetask]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getmemusagetask
func (task *Task) GetMemusagetask(
	meminuse *int64,
	maxmemuse *int64,
) res.Code {
	return res.Code(
		C.MSK_getmemusagetask(
			task.task,
			(*C.MSKint64t)(meminuse),
			(*C.MSKint64t)(maxmemuse),
		),
	)
}

// GetNadouinf is wrapping [MSK_getnadouinf]
//
// [MSK_getnadouinf] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - infitemname: const char *
//   - dvalue: MSKrealt *
//
// [MSK_getnadouinf]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getnadouinf
func (task *Task) GetNadouinf(
	infitemname string,
	dvalue *float64,
) res.Code {
	c_infitemname := C.CString(infitemname)
	defer C.free(unsafe.Pointer(c_infitemname))

	return res.Code(
		C.MSK_getnadouinf(
			task.task,
			c_infitemname,
			(*C.MSKrealt)(dvalue),
		),
	)
}

// GetNadouparam is wrapping [MSK_getnadouparam]
//
// [MSK_getnadouparam] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - paramname: const char *
//   - parvalue: MSKrealt *
//
// [MSK_getnadouparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getnadouparam
func (task *Task) GetNadouparam(
	paramname string,
	parvalue *float64,
) res.Code {
	c_paramname := C.CString(paramname)
	defer C.free(unsafe.Pointer(c_paramname))

	return res.Code(
		C.MSK_getnadouparam(
			task.task,
			c_paramname,
			(*C.MSKrealt)(parvalue),
		),
	)
}

// GetNaintinf is wrapping [MSK_getnaintinf]
//
// [MSK_getnaintinf] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - infitemname: const char *
//   - ivalue: MSKint32t *
//
// [MSK_getnaintinf]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getnaintinf
func (task *Task) GetNaintinf(
	infitemname string,
	ivalue *int32,
) res.Code {
	c_infitemname := C.CString(infitemname)
	defer C.free(unsafe.Pointer(c_infitemname))

	return res.Code(
		C.MSK_getnaintinf(
			task.task,
			c_infitemname,
			(*C.MSKint32t)(ivalue),
		),
	)
}

// GetNaintparam is wrapping [MSK_getnaintparam]
//
// [MSK_getnaintparam] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - paramname: const char *
//   - parvalue: MSKint32t *
//
// [MSK_getnaintparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getnaintparam
func (task *Task) GetNaintparam(
	paramname string,
	parvalue *int32,
) res.Code {
	c_paramname := C.CString(paramname)
	defer C.free(unsafe.Pointer(c_paramname))

	return res.Code(
		C.MSK_getnaintparam(
			task.task,
			c_paramname,
			(*C.MSKint32t)(parvalue),
		),
	)
}

// GetNastrparam is wrapping [MSK_getnastrparam]
//
// [MSK_getnastrparam] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - paramname: const char *
//   - sizeparamname: MSKint32t
//   - len: MSKint32t *
//   - parvalue: char *
//
// [MSK_getnastrparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getnastrparam
func (task *Task) GetNastrparam(
	paramname string,
	sizeparamname int32,
	len *int32,
	parvalue *byte,
) res.Code {
	c_paramname := C.CString(paramname)
	defer C.free(unsafe.Pointer(c_paramname))

	return res.Code(
		C.MSK_getnastrparam(
			task.task,
			c_paramname,
			C.MSKint32t(sizeparamname),
			(*C.MSKint32t)(len),
			(*C.char)(unsafe.Pointer(parvalue)),
		),
	)
}

// GetObjsense is wrapping [MSK_getobjsense]
//
// [MSK_getobjsense] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - sense: MSKobjsensee *
//
// [MSK_getobjsense]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getobjsense
func (task *Task) GetObjsense(
	sense *ObjectiveSense,
) res.Code {
	return res.Code(
		C.MSK_getobjsense(
			task.task,
			(*C.MSKobjsensee)(sense),
		),
	)
}

// GetParammax is wrapping [MSK_getparammax]
//
// [MSK_getparammax] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - partype: MSKparametertypee
//   - parammax: MSKint32t *
//
// [MSK_getparammax]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getparammax
func (task *Task) GetParammax(
	partype ParameterType,
	parammax *int32,
) res.Code {
	return res.Code(
		C.MSK_getparammax(
			task.task,
			C.MSKparametertypee(partype),
			(*C.MSKint32t)(parammax),
		),
	)
}

// GetPowerdomainalpha is wrapping [MSK_getpowerdomainalpha]
//
// [MSK_getpowerdomainalpha] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - domidx: MSKint64t
//   - alpha: MSKrealt *
//
// [MSK_getpowerdomainalpha]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getpowerdomainalpha
func (task *Task) GetPowerdomainalpha(
	domidx int64,
	alpha *float64,
) res.Code {
	return res.Code(
		C.MSK_getpowerdomainalpha(
			task.task,
			C.MSKint64t(domidx),
			(*C.MSKrealt)(alpha),
		),
	)
}

// GetPowerdomainInfo is wrapping [MSK_getpowerdomaininfo]
//
// [MSK_getpowerdomaininfo] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - domidx: MSKint64t
//   - n: MSKint64t *
//   - nleft: MSKint64t *
//
// [MSK_getpowerdomaininfo]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getpowerdomaininfo
func (task *Task) GetPowerdomainInfo(
	domidx int64,
	n *int64,
	nleft *int64,
) res.Code {
	return res.Code(
		C.MSK_getpowerdomaininfo(
			task.task,
			C.MSKint64t(domidx),
			(*C.MSKint64t)(n),
			(*C.MSKint64t)(nleft),
		),
	)
}

// GetPrimalobj is wrapping [MSK_getprimalobj]
//
// [MSK_getprimalobj] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - primalobj: MSKrealt *
//
// [MSK_getprimalobj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getprimalobj
func (task *Task) GetPrimalobj(
	whichsol SolType,
	primalobj *float64,
) res.Code {
	return res.Code(
		C.MSK_getprimalobj(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(primalobj),
		),
	)
}

// GetPrimalsolutionnorms is wrapping [MSK_getprimalsolutionnorms]
//
// [MSK_getprimalsolutionnorms] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - nrmxc: MSKrealt *
//   - nrmxx: MSKrealt *
//   - nrmbarx: MSKrealt *
//
// [MSK_getprimalsolutionnorms]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getprimalsolutionnorms
func (task *Task) GetPrimalsolutionnorms(
	whichsol SolType,
	nrmxc *float64,
	nrmxx *float64,
	nrmbarx *float64,
) res.Code {
	return res.Code(
		C.MSK_getprimalsolutionnorms(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(nrmxc),
			(*C.MSKrealt)(nrmxx),
			(*C.MSKrealt)(nrmbarx),
		),
	)
}

// GetProbtype is wrapping [MSK_getprobtype]
//
// [MSK_getprobtype] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - probtype: MSKproblemtypee *
//
// [MSK_getprobtype]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getprobtype
func (task *Task) GetProbtype(
	probtype *ProblemType,
) res.Code {
	return res.Code(
		C.MSK_getprobtype(
			task.task,
			(*C.MSKproblemtypee)(probtype),
		),
	)
}

// GetProSta is wrapping [MSK_getprosta] and
// returns the problem status.
//
// [MSK_getprosta] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - problemsta: MSKprostae *
//
// [MSK_getprosta]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getprosta
func (task *Task) GetProSta(
	whichsol SolType,
) (r res.Code, problemsta ProSta) {
	r = res.Code(
		C.MSK_getprosta(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKprostae)(&problemsta),
		),
	)

	return
}

// GetPviolacc is wrapping [MSK_getpviolacc]
//
// [MSK_getpviolacc] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - numaccidx: MSKint64t
//   - accidxlist: const MSKint64t *
//   - viol: MSKrealt *
//
// [MSK_getpviolacc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getpviolacc
func (task *Task) GetPviolacc(
	whichsol SolType,
	numaccidx int64,
	accidxlist *int64,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getpviolacc(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint64t(numaccidx),
			(*C.MSKint64t)(accidxlist),
			(*C.MSKrealt)(viol),
		),
	)
}

// GetPviolbarvar is wrapping [MSK_getpviolbarvar]
//
// [MSK_getpviolbarvar] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - viol: MSKrealt *
//
// [MSK_getpviolbarvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getpviolbarvar
func (task *Task) GetPviolbarvar(
	whichsol SolType,
	num int32,
	sub *int32,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getpviolbarvar(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(viol),
		),
	)
}

// GetPviolcon is wrapping [MSK_getpviolcon]
//
// [MSK_getpviolcon] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - viol: MSKrealt *
//
// [MSK_getpviolcon]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getpviolcon
func (task *Task) GetPviolcon(
	whichsol SolType,
	num int32,
	sub *int32,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getpviolcon(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(viol),
		),
	)
}

// GetPviolcones is wrapping [MSK_getpviolcones]
//
// [MSK_getpviolcones] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - viol: MSKrealt *
//
// [MSK_getpviolcones]/GetPviolcones is deprecated by mosek and will be removed in a future release.
//
// [MSK_getpviolcones]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getpviolcones
func (task *Task) GetPviolcones(
	whichsol SolType,
	num int32,
	sub *int32,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getpviolcones(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(viol),
		),
	)
}

// GetPvioldjc is wrapping [MSK_getpvioldjc]
//
// [MSK_getpvioldjc] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - numdjcidx: MSKint64t
//   - djcidxlist: const MSKint64t *
//   - viol: MSKrealt *
//
// [MSK_getpvioldjc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getpvioldjc
func (task *Task) GetPvioldjc(
	whichsol SolType,
	numdjcidx int64,
	djcidxlist *int64,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getpvioldjc(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint64t(numdjcidx),
			(*C.MSKint64t)(djcidxlist),
			(*C.MSKrealt)(viol),
		),
	)
}

// GetPviolvar is wrapping [MSK_getpviolvar]
//
// [MSK_getpviolvar] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - viol: MSKrealt *
//
// [MSK_getpviolvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getpviolvar
func (task *Task) GetPviolvar(
	whichsol SolType,
	num int32,
	sub *int32,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getpviolvar(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(viol),
		),
	)
}

// GetQConK is wrapping [MSK_getqconk]
//
// [MSK_getqconk] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - k: MSKint32t
//   - maxnumqcnz: MSKint32t
//   - numqcnz: MSKint32t *
//   - qcsubi: MSKint32t *
//   - qcsubj: MSKint32t *
//   - qcval: MSKrealt *
//
// [MSK_getqconk]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getqconk
func (task *Task) GetQConK(
	k int32,
	maxnumqcnz int32,
	numqcnz *int32,
	qcsubi *int32,
	qcsubj *int32,
	qcval *float64,
) res.Code {
	return res.Code(
		C.MSK_getqconk(
			task.task,
			C.MSKint32t(k),
			C.MSKint32t(maxnumqcnz),
			(*C.MSKint32t)(numqcnz),
			(*C.MSKint32t)(qcsubi),
			(*C.MSKint32t)(qcsubj),
			(*C.MSKrealt)(qcval),
		),
	)
}

// GetQConK64 is wrapping [MSK_getqconk64]
//
// [MSK_getqconk64] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - k: MSKint32t
//   - maxnumqcnz: MSKint64t
//   - numqcnz: MSKint64t *
//   - qcsubi: MSKint32t *
//   - qcsubj: MSKint32t *
//   - qcval: MSKrealt *
//
// [MSK_getqconk64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getqconk64
func (task *Task) GetQConK64(
	k int32,
	maxnumqcnz int64,
	numqcnz *int64,
	qcsubi *int32,
	qcsubj *int32,
	qcval *float64,
) res.Code {
	return res.Code(
		C.MSK_getqconk64(
			task.task,
			C.MSKint32t(k),
			C.MSKint64t(maxnumqcnz),
			(*C.MSKint64t)(numqcnz),
			(*C.MSKint32t)(qcsubi),
			(*C.MSKint32t)(qcsubj),
			(*C.MSKrealt)(qcval),
		),
	)
}

// GetQObj is wrapping [MSK_getqobj]
//
// [MSK_getqobj] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - maxnumqonz: MSKint32t
//   - numqonz: MSKint32t *
//   - qosubi: MSKint32t *
//   - qosubj: MSKint32t *
//   - qoval: MSKrealt *
//
// [MSK_getqobj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getqobj
func (task *Task) GetQObj(
	maxnumqonz int32,
	numqonz *int32,
	qosubi *int32,
	qosubj *int32,
	qoval *float64,
) res.Code {
	return res.Code(
		C.MSK_getqobj(
			task.task,
			C.MSKint32t(maxnumqonz),
			(*C.MSKint32t)(numqonz),
			(*C.MSKint32t)(qosubi),
			(*C.MSKint32t)(qosubj),
			(*C.MSKrealt)(qoval),
		),
	)
}

// GetQObj64 is wrapping [MSK_getqobj64]
//
// [MSK_getqobj64] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - maxnumqonz: MSKint64t
//   - numqonz: MSKint64t *
//   - qosubi: MSKint32t *
//   - qosubj: MSKint32t *
//   - qoval: MSKrealt *
//
// [MSK_getqobj64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getqobj64
func (task *Task) GetQObj64(
	maxnumqonz int64,
	numqonz *int64,
	qosubi *int32,
	qosubj *int32,
	qoval *float64,
) res.Code {
	return res.Code(
		C.MSK_getqobj64(
			task.task,
			C.MSKint64t(maxnumqonz),
			(*C.MSKint64t)(numqonz),
			(*C.MSKint32t)(qosubi),
			(*C.MSKint32t)(qosubj),
			(*C.MSKrealt)(qoval),
		),
	)
}

// GetQObjIj is wrapping [MSK_getqobjij]
//
// [MSK_getqobjij] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - i: MSKint32t
//   - j: MSKint32t
//   - qoij: MSKrealt *
//
// [MSK_getqobjij]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getqobjij
func (task *Task) GetQObjIj(
	i int32,
	j int32,
	qoij *float64,
) res.Code {
	return res.Code(
		C.MSK_getqobjij(
			task.task,
			C.MSKint32t(i),
			C.MSKint32t(j),
			(*C.MSKrealt)(qoij),
		),
	)
}

// GetReducedcosts is wrapping [MSK_getreducedcosts]
//
// [MSK_getreducedcosts] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - redcosts: MSKrealt *
//
// [MSK_getreducedcosts]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getreducedcosts
func (task *Task) GetReducedcosts(
	whichsol SolType,
	first int32,
	last int32,
	redcosts *float64,
) res.Code {
	return res.Code(
		C.MSK_getreducedcosts(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(redcosts),
		),
	)
}

// GetSkc is wrapping [MSK_getskc]
//
// [MSK_getskc] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - skc: MSKstakeye *
//
// [MSK_getskc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getskc
func (task *Task) GetSkc(
	whichsol SolType,
	skc *StaKey,
) res.Code {
	return res.Code(
		C.MSK_getskc(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKstakeye)(skc),
		),
	)
}

// GetSkn is wrapping [MSK_getskn]
//
// [MSK_getskn] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - skn: MSKstakeye *
//
// [MSK_getskn]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getskn
func (task *Task) GetSkn(
	whichsol SolType,
	skn *StaKey,
) res.Code {
	return res.Code(
		C.MSK_getskn(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKstakeye)(skn),
		),
	)
}

// GetSkx is wrapping [MSK_getskx]
//
// [MSK_getskx] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - skx: MSKstakeye *
//
// [MSK_getskx]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getskx
func (task *Task) GetSkx(
	whichsol SolType,
	skx *StaKey,
) res.Code {
	return res.Code(
		C.MSK_getskx(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKstakeye)(skx),
		),
	)
}

// GetSlc is wrapping [MSK_getslc]
//
// [MSK_getslc] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - slc: MSKrealt *
//
// [MSK_getslc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getslc
func (task *Task) GetSlc(
	whichsol SolType,
	slc *float64,
) res.Code {
	return res.Code(
		C.MSK_getslc(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(slc),
		),
	)
}

// GetSlx is wrapping [MSK_getslx]
//
// [MSK_getslx] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - slx: MSKrealt *
//
// [MSK_getslx]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getslx
func (task *Task) GetSlx(
	whichsol SolType,
	slx *float64,
) res.Code {
	return res.Code(
		C.MSK_getslx(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(slx),
		),
	)
}

// GetSnx is wrapping [MSK_getsnx]
//
// [MSK_getsnx] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - snx: MSKrealt *
//
// [MSK_getsnx]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getsnx
func (task *Task) GetSnx(
	whichsol SolType,
	snx *float64,
) res.Code {
	return res.Code(
		C.MSK_getsnx(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(snx),
		),
	)
}

// GetSolSta is wrapping [MSK_getsolsta] and
// returns the solution status.
//
// [MSK_getsolsta] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - solutionsta: MSKsolstae *
//
// [MSK_getsolsta]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getsolsta
func (task *Task) GetSolSta(
	whichsol SolType,
) (r res.Code, solutionsta SolSta) {
	r = res.Code(
		C.MSK_getsolsta(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKsolstae)(&solutionsta),
		),
	)

	return
}

// GetSolution is wrapping [MSK_getsolution]
//
// [MSK_getsolution] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - problemsta: MSKprostae *
//   - solutionsta: MSKsolstae *
//   - skc: MSKstakeye *
//   - skx: MSKstakeye *
//   - skn: MSKstakeye *
//   - xc: MSKrealt *
//   - xx: MSKrealt *
//   - y: MSKrealt *
//   - slc: MSKrealt *
//   - suc: MSKrealt *
//   - slx: MSKrealt *
//   - sux: MSKrealt *
//   - snx: MSKrealt *
//
// [MSK_getsolution]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getsolution
func (task *Task) GetSolution(
	whichsol SolType,
	problemsta *ProSta,
	solutionsta *SolSta,
	skc *StaKey,
	skx *StaKey,
	skn *StaKey,
	xc *float64,
	xx *float64,
	y *float64,
	slc *float64,
	suc *float64,
	slx *float64,
	sux *float64,
	snx *float64,
) res.Code {
	return res.Code(
		C.MSK_getsolution(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKprostae)(problemsta),
			(*C.MSKsolstae)(solutionsta),
			(*C.MSKstakeye)(skc),
			(*C.MSKstakeye)(skx),
			(*C.MSKstakeye)(skn),
			(*C.MSKrealt)(xc),
			(*C.MSKrealt)(xx),
			(*C.MSKrealt)(y),
			(*C.MSKrealt)(slc),
			(*C.MSKrealt)(suc),
			(*C.MSKrealt)(slx),
			(*C.MSKrealt)(sux),
			(*C.MSKrealt)(snx),
		),
	)
}

// GetSolutionInfo is wrapping [MSK_getsolutioninfo]
//
// [MSK_getsolutioninfo] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - pobj: MSKrealt *
//   - pviolcon: MSKrealt *
//   - pviolvar: MSKrealt *
//   - pviolbarvar: MSKrealt *
//   - pviolcone: MSKrealt *
//   - pviolitg: MSKrealt *
//   - dobj: MSKrealt *
//   - dviolcon: MSKrealt *
//   - dviolvar: MSKrealt *
//   - dviolbarvar: MSKrealt *
//   - dviolcone: MSKrealt *
//
// [MSK_getsolutioninfo]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getsolutioninfo
func (task *Task) GetSolutionInfo(
	whichsol SolType,
	pobj *float64,
	pviolcon *float64,
	pviolvar *float64,
	pviolbarvar *float64,
	pviolcone *float64,
	pviolitg *float64,
	dobj *float64,
	dviolcon *float64,
	dviolvar *float64,
	dviolbarvar *float64,
	dviolcone *float64,
) res.Code {
	return res.Code(
		C.MSK_getsolutioninfo(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(pobj),
			(*C.MSKrealt)(pviolcon),
			(*C.MSKrealt)(pviolvar),
			(*C.MSKrealt)(pviolbarvar),
			(*C.MSKrealt)(pviolcone),
			(*C.MSKrealt)(pviolitg),
			(*C.MSKrealt)(dobj),
			(*C.MSKrealt)(dviolcon),
			(*C.MSKrealt)(dviolvar),
			(*C.MSKrealt)(dviolbarvar),
			(*C.MSKrealt)(dviolcone),
		),
	)
}

// GetSolutioninfoNew is wrapping [MSK_getsolutioninfonew]
//
// [MSK_getsolutioninfonew] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - pobj: MSKrealt *
//   - pviolcon: MSKrealt *
//   - pviolvar: MSKrealt *
//   - pviolbarvar: MSKrealt *
//   - pviolcone: MSKrealt *
//   - pviolacc: MSKrealt *
//   - pvioldjc: MSKrealt *
//   - pviolitg: MSKrealt *
//   - dobj: MSKrealt *
//   - dviolcon: MSKrealt *
//   - dviolvar: MSKrealt *
//   - dviolbarvar: MSKrealt *
//   - dviolcone: MSKrealt *
//   - dviolacc: MSKrealt *
//
// [MSK_getsolutioninfonew]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getsolutioninfonew
func (task *Task) GetSolutioninfoNew(
	whichsol SolType,
	pobj *float64,
	pviolcon *float64,
	pviolvar *float64,
	pviolbarvar *float64,
	pviolcone *float64,
	pviolacc *float64,
	pvioldjc *float64,
	pviolitg *float64,
	dobj *float64,
	dviolcon *float64,
	dviolvar *float64,
	dviolbarvar *float64,
	dviolcone *float64,
	dviolacc *float64,
) res.Code {
	return res.Code(
		C.MSK_getsolutioninfonew(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(pobj),
			(*C.MSKrealt)(pviolcon),
			(*C.MSKrealt)(pviolvar),
			(*C.MSKrealt)(pviolbarvar),
			(*C.MSKrealt)(pviolcone),
			(*C.MSKrealt)(pviolacc),
			(*C.MSKrealt)(pvioldjc),
			(*C.MSKrealt)(pviolitg),
			(*C.MSKrealt)(dobj),
			(*C.MSKrealt)(dviolcon),
			(*C.MSKrealt)(dviolvar),
			(*C.MSKrealt)(dviolbarvar),
			(*C.MSKrealt)(dviolcone),
			(*C.MSKrealt)(dviolacc),
		),
	)
}

// GetSolutionNew is wrapping [MSK_getsolutionnew]
//
// [MSK_getsolutionnew] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - problemsta: MSKprostae *
//   - solutionsta: MSKsolstae *
//   - skc: MSKstakeye *
//   - skx: MSKstakeye *
//   - skn: MSKstakeye *
//   - xc: MSKrealt *
//   - xx: MSKrealt *
//   - y: MSKrealt *
//   - slc: MSKrealt *
//   - suc: MSKrealt *
//   - slx: MSKrealt *
//   - sux: MSKrealt *
//   - snx: MSKrealt *
//   - doty: MSKrealt *
//
// [MSK_getsolutionnew]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getsolutionnew
func (task *Task) GetSolutionNew(
	whichsol SolType,
	problemsta *ProSta,
	solutionsta *SolSta,
	skc *StaKey,
	skx *StaKey,
	skn *StaKey,
	xc *float64,
	xx *float64,
	y *float64,
	slc *float64,
	suc *float64,
	slx *float64,
	sux *float64,
	snx *float64,
	doty *float64,
) res.Code {
	return res.Code(
		C.MSK_getsolutionnew(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKprostae)(problemsta),
			(*C.MSKsolstae)(solutionsta),
			(*C.MSKstakeye)(skc),
			(*C.MSKstakeye)(skx),
			(*C.MSKstakeye)(skn),
			(*C.MSKrealt)(xc),
			(*C.MSKrealt)(xx),
			(*C.MSKrealt)(y),
			(*C.MSKrealt)(slc),
			(*C.MSKrealt)(suc),
			(*C.MSKrealt)(slx),
			(*C.MSKrealt)(sux),
			(*C.MSKrealt)(snx),
			(*C.MSKrealt)(doty),
		),
	)
}

// GetSparseSymmat is wrapping [MSK_getsparsesymmat]
//
// [MSK_getsparsesymmat] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - idx: MSKint64t
//   - maxlen: MSKint64t
//   - subi: MSKint32t *
//   - subj: MSKint32t *
//   - valij: MSKrealt *
//
// [MSK_getsparsesymmat]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getsparsesymmat
func (task *Task) GetSparseSymmat(
	idx int64,
	maxlen int64,
	subi *int32,
	subj *int32,
	valij *float64,
) res.Code {
	return res.Code(
		C.MSK_getsparsesymmat(
			task.task,
			C.MSKint64t(idx),
			C.MSKint64t(maxlen),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(valij),
		),
	)
}

// GetStrparam is wrapping [MSK_getstrparam]
//
// [MSK_getstrparam] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - param: MSKsparame
//   - maxlen: MSKint32t
//   - len: MSKint32t *
//   - parvalue: char *
//
// [MSK_getstrparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getstrparam
func (task *Task) GetStrparam(
	param SParam,
	maxlen int32,
	len *int32,
	parvalue *byte,
) res.Code {
	return res.Code(
		C.MSK_getstrparam(
			task.task,
			C.MSKsparame(param),
			C.MSKint32t(maxlen),
			(*C.MSKint32t)(len),
			(*C.char)(unsafe.Pointer(parvalue)),
		),
	)
}

// GetStrparamlen is wrapping [MSK_getstrparamlen]
//
// [MSK_getstrparamlen] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - param: MSKsparame
//   - len: MSKint32t *
//
// [MSK_getstrparamlen]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getstrparamlen
func (task *Task) GetStrparamlen(
	param SParam,
	len *int32,
) res.Code {
	return res.Code(
		C.MSK_getstrparamlen(
			task.task,
			C.MSKsparame(param),
			(*C.MSKint32t)(len),
		),
	)
}

// GetSuc is wrapping [MSK_getsuc]
//
// [MSK_getsuc] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - suc: MSKrealt *
//
// [MSK_getsuc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getsuc
func (task *Task) GetSuc(
	whichsol SolType,
	suc *float64,
) res.Code {
	return res.Code(
		C.MSK_getsuc(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(suc),
		),
	)
}

// GetSux is wrapping [MSK_getsux]
//
// [MSK_getsux] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - sux: MSKrealt *
//
// [MSK_getsux]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getsux
func (task *Task) GetSux(
	whichsol SolType,
	sux *float64,
) res.Code {
	return res.Code(
		C.MSK_getsux(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(sux),
		),
	)
}

// GetSymbcon is wrapping [MSK_getsymbcon]
//
// [MSK_getsymbcon] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - i: MSKint32t
//   - sizevalue: MSKint32t
//   - name: char *
//   - value: MSKint32t *
//
// [MSK_getsymbcon]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getsymbcon
func (task *Task) GetSymbcon(
	i int32,
	sizevalue int32,
	name *byte,
	value *int32,
) res.Code {
	return res.Code(
		C.MSK_getsymbcon(
			task.task,
			C.MSKint32t(i),
			C.MSKint32t(sizevalue),
			(*C.char)(unsafe.Pointer(name)),
			(*C.MSKint32t)(value),
		),
	)
}

// GetSymmatInfo is wrapping [MSK_getsymmatinfo]
//
// [MSK_getsymmatinfo] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - idx: MSKint64t
//   - dim: MSKint32t *
//   - nz: MSKint64t *
//   - mattype: MSKsymmattypee *
//
// [MSK_getsymmatinfo]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getsymmatinfo
func (task *Task) GetSymmatInfo(
	idx int64,
	dim *int32,
	nz *int64,
	mattype *SymmatType,
) res.Code {
	return res.Code(
		C.MSK_getsymmatinfo(
			task.task,
			C.MSKint64t(idx),
			(*C.MSKint32t)(dim),
			(*C.MSKint64t)(nz),
			(*C.MSKsymmattypee)(mattype),
		),
	)
}

// GetVarbound is wrapping [MSK_getvarbound]
//
// [MSK_getvarbound] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - i: MSKint32t
//   - bk: MSKboundkeye *
//   - bl: MSKrealt *
//   - bu: MSKrealt *
//
// [MSK_getvarbound]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getvarbound
func (task *Task) GetVarbound(
	i int32,
	bk *BoundKey,
	bl *float64,
	bu *float64,
) res.Code {
	return res.Code(
		C.MSK_getvarbound(
			task.task,
			C.MSKint32t(i),
			(*C.MSKboundkeye)(bk),
			(*C.MSKrealt)(bl),
			(*C.MSKrealt)(bu),
		),
	)
}

// GetVarnameindex is wrapping [MSK_getvarnameindex]
//
// [MSK_getvarnameindex] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - somename: const char *
//   - asgn: MSKint32t *
//   - index: MSKint32t *
//
// [MSK_getvarnameindex]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getvarnameindex
func (task *Task) GetVarnameindex(
	somename string,
	asgn *int32,
	index *int32,
) res.Code {
	c_somename := C.CString(somename)
	defer C.free(unsafe.Pointer(c_somename))

	return res.Code(
		C.MSK_getvarnameindex(
			task.task,
			c_somename,
			(*C.MSKint32t)(asgn),
			(*C.MSKint32t)(index),
		),
	)
}

// GetVarType is wrapping [MSK_getvartype]
//
// [MSK_getvartype] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - j: MSKint32t
//   - vartype: MSKvariabletypee *
//
// [MSK_getvartype]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getvartype
func (task *Task) GetVarType(
	j int32,
	vartype *VariableType,
) res.Code {
	return res.Code(
		C.MSK_getvartype(
			task.task,
			C.MSKint32t(j),
			(*C.MSKvariabletypee)(vartype),
		),
	)
}

// GetXc is wrapping [MSK_getxc]
//
// [MSK_getxc] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - xc: MSKrealt *
//
// [MSK_getxc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getxc
func (task *Task) GetXc(
	whichsol SolType,
	xc *float64,
) res.Code {
	return res.Code(
		C.MSK_getxc(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(xc),
		),
	)
}

// GetY is wrapping [MSK_gety]
//
// [MSK_gety] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - y: MSKrealt *
//
// [MSK_gety]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.gety
func (task *Task) GetY(
	whichsol SolType,
	y *float64,
) res.Code {
	return res.Code(
		C.MSK_gety(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(y),
		),
	)
}
