// Automatically generated by github.com/fardream/gen-gmsk
// funcs defitions

package gmsk

// #include <mosek.h>
import "C"

import "unsafe"

import "github.com/fardream/gmsk/res"

// Analyzenames is wrapping [MSK_analyzenames]
// function MSK_analyzenames has following parameters:
// - task: MSKtask_t
// - whichstream: MSKstreamtypee
// - nametype: MSKnametypee
//
// [MSK_analyzenames]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Analyzenames(
	whichstream StreamType,
	nametype NameType,
) res.Code {
	return res.Code(
		C.MSK_analyzenames(
			task.task,
			C.MSKstreamtypee(whichstream),
			C.MSKnametypee(nametype),
		),
	)
}

// Analyzeproblem is wrapping [MSK_analyzeproblem]
// function MSK_analyzeproblem has following parameters:
// - task: MSKtask_t
// - whichstream: MSKstreamtypee
//
// [MSK_analyzeproblem]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Analyzeproblem(
	whichstream StreamType,
) res.Code {
	return res.Code(
		C.MSK_analyzeproblem(
			task.task,
			C.MSKstreamtypee(whichstream),
		),
	)
}

// Analyzesolution is wrapping [MSK_analyzesolution]
// function MSK_analyzesolution has following parameters:
// - task: MSKtask_t
// - whichstream: MSKstreamtypee
// - whichsol: MSKsoltypee
//
// [MSK_analyzesolution]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Analyzesolution(
	whichstream StreamType,
	whichsol SolType,
) res.Code {
	return res.Code(
		C.MSK_analyzesolution(
			task.task,
			C.MSKstreamtypee(whichstream),
			C.MSKsoltypee(whichsol),
		),
	)
}

// Appendacc is wrapping [MSK_appendacc]
// function MSK_appendacc has following parameters:
// - task: MSKtask_t
// - domidx: MSKint64t
// - numafeidx: MSKint64t
// - afeidxlist: const MSKint64t *
// - b: const MSKrealt *
//
// [MSK_appendacc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Appendacc(
	domidx int64,
	numafeidx int64,
	afeidxlist *int64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_appendacc(
			task.task,
			C.MSKint64t(domidx),
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidxlist),
			(*C.MSKrealt)(b),
		),
	)
}

// Appendaccs is wrapping [MSK_appendaccs]
// function MSK_appendaccs has following parameters:
// - task: MSKtask_t
// - numaccs: MSKint64t
// - domidxs: const MSKint64t *
// - numafeidx: MSKint64t
// - afeidxlist: const MSKint64t *
// - b: const MSKrealt *
//
// [MSK_appendaccs]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Appendaccs(
	numaccs int64,
	domidxs *int64,
	numafeidx int64,
	afeidxlist *int64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_appendaccs(
			task.task,
			C.MSKint64t(numaccs),
			(*C.MSKint64t)(domidxs),
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidxlist),
			(*C.MSKrealt)(b),
		),
	)
}

// Appendaccseq is wrapping [MSK_appendaccseq]
// function MSK_appendaccseq has following parameters:
// - task: MSKtask_t
// - domidx: MSKint64t
// - numafeidx: MSKint64t
// - afeidxfirst: MSKint64t
// - b: const MSKrealt *
//
// [MSK_appendaccseq]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Appendaccseq(
	domidx int64,
	numafeidx int64,
	afeidxfirst int64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_appendaccseq(
			task.task,
			C.MSKint64t(domidx),
			C.MSKint64t(numafeidx),
			C.MSKint64t(afeidxfirst),
			(*C.MSKrealt)(b),
		),
	)
}

// Appendaccsseq is wrapping [MSK_appendaccsseq]
// function MSK_appendaccsseq has following parameters:
// - task: MSKtask_t
// - numaccs: MSKint64t
// - domidxs: const MSKint64t *
// - numafeidx: MSKint64t
// - afeidxfirst: MSKint64t
// - b: const MSKrealt *
//
// [MSK_appendaccsseq]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Appendaccsseq(
	numaccs int64,
	domidxs *int64,
	numafeidx int64,
	afeidxfirst int64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_appendaccsseq(
			task.task,
			C.MSKint64t(numaccs),
			(*C.MSKint64t)(domidxs),
			C.MSKint64t(numafeidx),
			C.MSKint64t(afeidxfirst),
			(*C.MSKrealt)(b),
		),
	)
}

// Appendafes is wrapping [MSK_appendafes]
// function MSK_appendafes has following parameters:
// - task: MSKtask_t
// - num: MSKint64t
//
// [MSK_appendafes]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Appendafes(
	num int64,
) res.Code {
	return res.Code(
		C.MSK_appendafes(
			task.task,
			C.MSKint64t(num),
		),
	)
}

// Appendbarvars is wrapping [MSK_appendbarvars]
// function MSK_appendbarvars has following parameters:
// - task: MSKtask_t
// - num: MSKint32t
// - dim: const MSKint32t *
//
// [MSK_appendbarvars]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Appendbarvars(
	num int32,
	dim *int32,
) res.Code {
	return res.Code(
		C.MSK_appendbarvars(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(dim),
		),
	)
}

// Appendcone is wrapping [MSK_appendcone]
// function MSK_appendcone has following parameters:
// - task: MSKtask_t
// - ct: MSKconetypee
// - conepar: MSKrealt
// - nummem: MSKint32t
// - submem: const MSKint32t *
//
// [MSK_appendcone]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Appendcone(
	ct ConeType,
	conepar float64,
	nummem int32,
	submem *int32,
) res.Code {
	return res.Code(
		C.MSK_appendcone(
			task.task,
			C.MSKconetypee(ct),
			C.MSKrealt(conepar),
			C.MSKint32t(nummem),
			(*C.MSKint32t)(submem),
		),
	)
}

// Appendconeseq is wrapping [MSK_appendconeseq]
// function MSK_appendconeseq has following parameters:
// - task: MSKtask_t
// - ct: MSKconetypee
// - conepar: MSKrealt
// - nummem: MSKint32t
// - j: MSKint32t
//
// [MSK_appendconeseq]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Appendconeseq(
	ct ConeType,
	conepar float64,
	nummem int32,
	j int32,
) res.Code {
	return res.Code(
		C.MSK_appendconeseq(
			task.task,
			C.MSKconetypee(ct),
			C.MSKrealt(conepar),
			C.MSKint32t(nummem),
			C.MSKint32t(j),
		),
	)
}

// Appendconesseq is wrapping [MSK_appendconesseq]
// function MSK_appendconesseq has following parameters:
// - task: MSKtask_t
// - num: MSKint32t
// - ct: const MSKconetypee *
// - conepar: const MSKrealt *
// - nummem: const MSKint32t *
// - j: MSKint32t
//
// [MSK_appendconesseq]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Appendconesseq(
	num int32,
	ct *ConeType,
	conepar *float64,
	nummem *int32,
	j int32,
) res.Code {
	return res.Code(
		C.MSK_appendconesseq(
			task.task,
			C.MSKint32t(num),
			(*C.MSKconetypee)(ct),
			(*C.MSKrealt)(conepar),
			(*C.MSKint32t)(nummem),
			C.MSKint32t(j),
		),
	)
}

// Appendcons is wrapping [MSK_appendcons]
// function MSK_appendcons has following parameters:
// - task: MSKtask_t
// - num: MSKint32t
//
// [MSK_appendcons]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Appendcons(
	num int32,
) res.Code {
	return res.Code(
		C.MSK_appendcons(
			task.task,
			C.MSKint32t(num),
		),
	)
}

// Appenddjcs is wrapping [MSK_appenddjcs]
// function MSK_appenddjcs has following parameters:
// - task: MSKtask_t
// - num: MSKint64t
//
// [MSK_appenddjcs]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Appenddjcs(
	num int64,
) res.Code {
	return res.Code(
		C.MSK_appenddjcs(
			task.task,
			C.MSKint64t(num),
		),
	)
}

// Appenddualexpconedomain is wrapping [MSK_appenddualexpconedomain]
// function MSK_appenddualexpconedomain has following parameters:
// - task: MSKtask_t
// - domidx: MSKint64t *
//
// [MSK_appenddualexpconedomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Appenddualexpconedomain(
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appenddualexpconedomain(
			task.task,
			(*C.MSKint64t)(domidx),
		),
	)
}

// Appenddualgeomeanconedomain is wrapping [MSK_appenddualgeomeanconedomain]
// function MSK_appenddualgeomeanconedomain has following parameters:
// - task: MSKtask_t
// - n: MSKint64t
// - domidx: MSKint64t *
//
// [MSK_appenddualgeomeanconedomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Appenddualgeomeanconedomain(
	n int64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appenddualgeomeanconedomain(
			task.task,
			C.MSKint64t(n),
			(*C.MSKint64t)(domidx),
		),
	)
}

// Appenddualpowerconedomain is wrapping [MSK_appenddualpowerconedomain]
// function MSK_appenddualpowerconedomain has following parameters:
// - task: MSKtask_t
// - n: MSKint64t
// - nleft: MSKint64t
// - alpha: const MSKrealt *
// - domidx: MSKint64t *
//
// [MSK_appenddualpowerconedomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Appenddualpowerconedomain(
	n int64,
	nleft int64,
	alpha *float64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appenddualpowerconedomain(
			task.task,
			C.MSKint64t(n),
			C.MSKint64t(nleft),
			(*C.MSKrealt)(alpha),
			(*C.MSKint64t)(domidx),
		),
	)
}

// Appendprimalexpconedomain is wrapping [MSK_appendprimalexpconedomain]
// function MSK_appendprimalexpconedomain has following parameters:
// - task: MSKtask_t
// - domidx: MSKint64t *
//
// [MSK_appendprimalexpconedomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Appendprimalexpconedomain(
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendprimalexpconedomain(
			task.task,
			(*C.MSKint64t)(domidx),
		),
	)
}

// Appendprimalgeomeanconedomain is wrapping [MSK_appendprimalgeomeanconedomain]
// function MSK_appendprimalgeomeanconedomain has following parameters:
// - task: MSKtask_t
// - n: MSKint64t
// - domidx: MSKint64t *
//
// [MSK_appendprimalgeomeanconedomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Appendprimalgeomeanconedomain(
	n int64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendprimalgeomeanconedomain(
			task.task,
			C.MSKint64t(n),
			(*C.MSKint64t)(domidx),
		),
	)
}

// Appendprimalpowerconedomain is wrapping [MSK_appendprimalpowerconedomain]
// function MSK_appendprimalpowerconedomain has following parameters:
// - task: MSKtask_t
// - n: MSKint64t
// - nleft: MSKint64t
// - alpha: const MSKrealt *
// - domidx: MSKint64t *
//
// [MSK_appendprimalpowerconedomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Appendprimalpowerconedomain(
	n int64,
	nleft int64,
	alpha *float64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendprimalpowerconedomain(
			task.task,
			C.MSKint64t(n),
			C.MSKint64t(nleft),
			(*C.MSKrealt)(alpha),
			(*C.MSKint64t)(domidx),
		),
	)
}

// Appendquadraticconedomain is wrapping [MSK_appendquadraticconedomain]
// function MSK_appendquadraticconedomain has following parameters:
// - task: MSKtask_t
// - n: MSKint64t
// - domidx: MSKint64t *
//
// [MSK_appendquadraticconedomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Appendquadraticconedomain(
	n int64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendquadraticconedomain(
			task.task,
			C.MSKint64t(n),
			(*C.MSKint64t)(domidx),
		),
	)
}

// Appendrdomain is wrapping [MSK_appendrdomain]
// function MSK_appendrdomain has following parameters:
// - task: MSKtask_t
// - n: MSKint64t
// - domidx: MSKint64t *
//
// [MSK_appendrdomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Appendrdomain(
	n int64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendrdomain(
			task.task,
			C.MSKint64t(n),
			(*C.MSKint64t)(domidx),
		),
	)
}

// Appendrminusdomain is wrapping [MSK_appendrminusdomain]
// function MSK_appendrminusdomain has following parameters:
// - task: MSKtask_t
// - n: MSKint64t
// - domidx: MSKint64t *
//
// [MSK_appendrminusdomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Appendrminusdomain(
	n int64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendrminusdomain(
			task.task,
			C.MSKint64t(n),
			(*C.MSKint64t)(domidx),
		),
	)
}

// Appendrplusdomain is wrapping [MSK_appendrplusdomain]
// function MSK_appendrplusdomain has following parameters:
// - task: MSKtask_t
// - n: MSKint64t
// - domidx: MSKint64t *
//
// [MSK_appendrplusdomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Appendrplusdomain(
	n int64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendrplusdomain(
			task.task,
			C.MSKint64t(n),
			(*C.MSKint64t)(domidx),
		),
	)
}

// Appendrquadraticconedomain is wrapping [MSK_appendrquadraticconedomain]
// function MSK_appendrquadraticconedomain has following parameters:
// - task: MSKtask_t
// - n: MSKint64t
// - domidx: MSKint64t *
//
// [MSK_appendrquadraticconedomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Appendrquadraticconedomain(
	n int64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendrquadraticconedomain(
			task.task,
			C.MSKint64t(n),
			(*C.MSKint64t)(domidx),
		),
	)
}

// Appendrzerodomain is wrapping [MSK_appendrzerodomain]
// function MSK_appendrzerodomain has following parameters:
// - task: MSKtask_t
// - n: MSKint64t
// - domidx: MSKint64t *
//
// [MSK_appendrzerodomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Appendrzerodomain(
	n int64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendrzerodomain(
			task.task,
			C.MSKint64t(n),
			(*C.MSKint64t)(domidx),
		),
	)
}

// Appendsparsesymmat is wrapping [MSK_appendsparsesymmat]
// function MSK_appendsparsesymmat has following parameters:
// - task: MSKtask_t
// - dim: MSKint32t
// - nz: MSKint64t
// - subi: const MSKint32t *
// - subj: const MSKint32t *
// - valij: const MSKrealt *
// - idx: MSKint64t *
//
// [MSK_appendsparsesymmat]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Appendsparsesymmat(
	dim int32,
	nz int64,
	subi *int32,
	subj *int32,
	valij *float64,
	idx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendsparsesymmat(
			task.task,
			C.MSKint32t(dim),
			C.MSKint64t(nz),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(valij),
			(*C.MSKint64t)(idx),
		),
	)
}

// Appendsparsesymmatlist is wrapping [MSK_appendsparsesymmatlist]
// function MSK_appendsparsesymmatlist has following parameters:
// - task: MSKtask_t
// - num: MSKint32t
// - dims: const MSKint32t *
// - nz: const MSKint64t *
// - subi: const MSKint32t *
// - subj: const MSKint32t *
// - valij: const MSKrealt *
// - idx: MSKint64t *
//
// [MSK_appendsparsesymmatlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Appendsparsesymmatlist(
	num int32,
	dims *int32,
	nz *int64,
	subi *int32,
	subj *int32,
	valij *float64,
	idx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendsparsesymmatlist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(dims),
			(*C.MSKint64t)(nz),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(valij),
			(*C.MSKint64t)(idx),
		),
	)
}

// Appendsvecpsdconedomain is wrapping [MSK_appendsvecpsdconedomain]
// function MSK_appendsvecpsdconedomain has following parameters:
// - task: MSKtask_t
// - n: MSKint64t
// - domidx: MSKint64t *
//
// [MSK_appendsvecpsdconedomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Appendsvecpsdconedomain(
	n int64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendsvecpsdconedomain(
			task.task,
			C.MSKint64t(n),
			(*C.MSKint64t)(domidx),
		),
	)
}

// Appendvars is wrapping [MSK_appendvars]
// function MSK_appendvars has following parameters:
// - task: MSKtask_t
// - num: MSKint32t
//
// [MSK_appendvars]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Appendvars(
	num int32,
) res.Code {
	return res.Code(
		C.MSK_appendvars(
			task.task,
			C.MSKint32t(num),
		),
	)
}

// Basiscond is wrapping [MSK_basiscond]
// function MSK_basiscond has following parameters:
// - task: MSKtask_t
// - nrmbasis: MSKrealt *
// - nrminvbasis: MSKrealt *
//
// [MSK_basiscond]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Basiscond(
	nrmbasis *float64,
	nrminvbasis *float64,
) res.Code {
	return res.Code(
		C.MSK_basiscond(
			task.task,
			(*C.MSKrealt)(nrmbasis),
			(*C.MSKrealt)(nrminvbasis),
		),
	)
}

// Bktostr is wrapping [MSK_bktostr]
// function MSK_bktostr has following parameters:
// - task: MSKtask_t
// - bk: MSKboundkeye
// - str: char *
//
// [MSK_bktostr]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Bktostr(
	bk BoundKey,
	str *byte,
) res.Code {
	return res.Code(
		C.MSK_bktostr(
			task.task,
			C.MSKboundkeye(bk),
			(*C.char)(unsafe.Pointer(str)),
		),
	)
}

// Callbackcodetostr is wrapping [MSK_callbackcodetostr]
// function MSK_callbackcodetostr has following parameters:
// - code: MSKcallbackcodee
// - callbackcodestr: char *
//
// [MSK_callbackcodetostr]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func Callbackcodetostr(
	code CallbackCode,
	callbackcodestr *byte,
) res.Code {
	return res.Code(
		C.MSK_callbackcodetostr(
			C.MSKcallbackcodee(code),
			(*C.char)(unsafe.Pointer(callbackcodestr)),
		),
	)
}

// Checkmemtask is wrapping [MSK_checkmemtask]
// function MSK_checkmemtask has following parameters:
// - task: MSKtask_t
// - file: const char *
// - line: MSKint32t
//
// [MSK_checkmemtask]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Checkmemtask(
	file *byte,
	line int32,
) res.Code {
	return res.Code(
		C.MSK_checkmemtask(
			task.task,
			(*C.char)(unsafe.Pointer(file)),
			C.MSKint32t(line),
		),
	)
}

// Chgconbound is wrapping [MSK_chgconbound]
// function MSK_chgconbound has following parameters:
// - task: MSKtask_t
// - i: MSKint32t
// - lower: MSKint32t
// - finite: MSKint32t
// - value: MSKrealt
//
// [MSK_chgconbound]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Chgconbound(
	i int32,
	lower int32,
	finite int32,
	value float64,
) res.Code {
	return res.Code(
		C.MSK_chgconbound(
			task.task,
			C.MSKint32t(i),
			C.MSKint32t(lower),
			C.MSKint32t(finite),
			C.MSKrealt(value),
		),
	)
}

// Chgvarbound is wrapping [MSK_chgvarbound]
// function MSK_chgvarbound has following parameters:
// - task: MSKtask_t
// - j: MSKint32t
// - lower: MSKint32t
// - finite: MSKint32t
// - value: MSKrealt
//
// [MSK_chgvarbound]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Chgvarbound(
	j int32,
	lower int32,
	finite int32,
	value float64,
) res.Code {
	return res.Code(
		C.MSK_chgvarbound(
			task.task,
			C.MSKint32t(j),
			C.MSKint32t(lower),
			C.MSKint32t(finite),
			C.MSKrealt(value),
		),
	)
}

// Commitchanges is wrapping [MSK_commitchanges]
// function MSK_commitchanges has following parameters:
// - task: MSKtask_t
//
// [MSK_commitchanges]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Commitchanges() res.Code {
	return res.Code(
		C.MSK_commitchanges(
			task.task,
		),
	)
}

// Conetypetostr is wrapping [MSK_conetypetostr]
// function MSK_conetypetostr has following parameters:
// - task: MSKtask_t
// - ct: MSKconetypee
// - str: char *
//
// [MSK_conetypetostr]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Conetypetostr(
	ct ConeType,
	str *byte,
) res.Code {
	return res.Code(
		C.MSK_conetypetostr(
			task.task,
			C.MSKconetypee(ct),
			(*C.char)(unsafe.Pointer(str)),
		),
	)
}

// Deletesolution is wrapping [MSK_deletesolution]
// function MSK_deletesolution has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
//
// [MSK_deletesolution]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Deletesolution(
	whichsol SolType,
) res.Code {
	return res.Code(
		C.MSK_deletesolution(
			task.task,
			C.MSKsoltypee(whichsol),
		),
	)
}

// Dualsensitivity is wrapping [MSK_dualsensitivity]
// function MSK_dualsensitivity has following parameters:
// - task: MSKtask_t
// - numj: MSKint32t
// - subj: const MSKint32t *
// - leftpricej: MSKrealt *
// - rightpricej: MSKrealt *
// - leftrangej: MSKrealt *
// - rightrangej: MSKrealt *
//
// [MSK_dualsensitivity]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Dualsensitivity(
	numj int32,
	subj *int32,
	leftpricej *float64,
	rightpricej *float64,
	leftrangej *float64,
	rightrangej *float64,
) res.Code {
	return res.Code(
		C.MSK_dualsensitivity(
			task.task,
			C.MSKint32t(numj),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(leftpricej),
			(*C.MSKrealt)(rightpricej),
			(*C.MSKrealt)(leftrangej),
			(*C.MSKrealt)(rightrangej),
		),
	)
}

// Emptyafebarfrow is wrapping [MSK_emptyafebarfrow]
// function MSK_emptyafebarfrow has following parameters:
// - task: MSKtask_t
// - afeidx: MSKint64t
//
// [MSK_emptyafebarfrow]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Emptyafebarfrow(
	afeidx int64,
) res.Code {
	return res.Code(
		C.MSK_emptyafebarfrow(
			task.task,
			C.MSKint64t(afeidx),
		),
	)
}

// Emptyafebarfrowlist is wrapping [MSK_emptyafebarfrowlist]
// function MSK_emptyafebarfrowlist has following parameters:
// - task: MSKtask_t
// - numafeidx: MSKint64t
// - afeidxlist: const MSKint64t *
//
// [MSK_emptyafebarfrowlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Emptyafebarfrowlist(
	numafeidx int64,
	afeidxlist *int64,
) res.Code {
	return res.Code(
		C.MSK_emptyafebarfrowlist(
			task.task,
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidxlist),
		),
	)
}

// Emptyafefcol is wrapping [MSK_emptyafefcol]
// function MSK_emptyafefcol has following parameters:
// - task: MSKtask_t
// - varidx: MSKint32t
//
// [MSK_emptyafefcol]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Emptyafefcol(
	varidx int32,
) res.Code {
	return res.Code(
		C.MSK_emptyafefcol(
			task.task,
			C.MSKint32t(varidx),
		),
	)
}

// Emptyafefcollist is wrapping [MSK_emptyafefcollist]
// function MSK_emptyafefcollist has following parameters:
// - task: MSKtask_t
// - numvaridx: MSKint64t
// - varidx: const MSKint32t *
//
// [MSK_emptyafefcollist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Emptyafefcollist(
	numvaridx int64,
	varidx *int32,
) res.Code {
	return res.Code(
		C.MSK_emptyafefcollist(
			task.task,
			C.MSKint64t(numvaridx),
			(*C.MSKint32t)(varidx),
		),
	)
}

// Emptyafefrow is wrapping [MSK_emptyafefrow]
// function MSK_emptyafefrow has following parameters:
// - task: MSKtask_t
// - afeidx: MSKint64t
//
// [MSK_emptyafefrow]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Emptyafefrow(
	afeidx int64,
) res.Code {
	return res.Code(
		C.MSK_emptyafefrow(
			task.task,
			C.MSKint64t(afeidx),
		),
	)
}

// Emptyafefrowlist is wrapping [MSK_emptyafefrowlist]
// function MSK_emptyafefrowlist has following parameters:
// - task: MSKtask_t
// - numafeidx: MSKint64t
// - afeidx: const MSKint64t *
//
// [MSK_emptyafefrowlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Emptyafefrowlist(
	numafeidx int64,
	afeidx *int64,
) res.Code {
	return res.Code(
		C.MSK_emptyafefrowlist(
			task.task,
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidx),
		),
	)
}

// Evaluateacc is wrapping [MSK_evaluateacc]
// function MSK_evaluateacc has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - accidx: MSKint64t
// - activity: MSKrealt *
//
// [MSK_evaluateacc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Evaluateacc(
	whichsol SolType,
	accidx int64,
	activity *float64,
) res.Code {
	return res.Code(
		C.MSK_evaluateacc(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint64t(accidx),
			(*C.MSKrealt)(activity),
		),
	)
}

// Evaluateaccs is wrapping [MSK_evaluateaccs]
// function MSK_evaluateaccs has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - activity: MSKrealt *
//
// [MSK_evaluateaccs]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Evaluateaccs(
	whichsol SolType,
	activity *float64,
) res.Code {
	return res.Code(
		C.MSK_evaluateaccs(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(activity),
		),
	)
}

// Getaccafeidxlist is wrapping [MSK_getaccafeidxlist]
// function MSK_getaccafeidxlist has following parameters:
// - task: MSKtask_t
// - accidx: MSKint64t
// - afeidxlist: MSKint64t *
//
// [MSK_getaccafeidxlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getaccafeidxlist(
	accidx int64,
	afeidxlist *int64,
) res.Code {
	return res.Code(
		C.MSK_getaccafeidxlist(
			task.task,
			C.MSKint64t(accidx),
			(*C.MSKint64t)(afeidxlist),
		),
	)
}

// Getaccb is wrapping [MSK_getaccb]
// function MSK_getaccb has following parameters:
// - task: MSKtask_t
// - accidx: MSKint64t
// - b: MSKrealt *
//
// [MSK_getaccb]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getaccb(
	accidx int64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_getaccb(
			task.task,
			C.MSKint64t(accidx),
			(*C.MSKrealt)(b),
		),
	)
}

// Getaccbarfblocktriplet is wrapping [MSK_getaccbarfblocktriplet]
// function MSK_getaccbarfblocktriplet has following parameters:
// - task: MSKtask_t
// - maxnumtrip: MSKint64t
// - numtrip: MSKint64t *
// - acc_afe: MSKint64t *
// - bar_var: MSKint32t *
// - blk_row: MSKint32t *
// - blk_col: MSKint32t *
// - blk_val: MSKrealt *
//
// [MSK_getaccbarfblocktriplet]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getaccbarfblocktriplet(
	maxnumtrip int64,
	numtrip *int64,
	acc_afe *int64,
	bar_var *int32,
	blk_row *int32,
	blk_col *int32,
	blk_val *float64,
) res.Code {
	return res.Code(
		C.MSK_getaccbarfblocktriplet(
			task.task,
			C.MSKint64t(maxnumtrip),
			(*C.MSKint64t)(numtrip),
			(*C.MSKint64t)(acc_afe),
			(*C.MSKint32t)(bar_var),
			(*C.MSKint32t)(blk_row),
			(*C.MSKint32t)(blk_col),
			(*C.MSKrealt)(blk_val),
		),
	)
}

// Getaccbarfnumblocktriplets is wrapping [MSK_getaccbarfnumblocktriplets]
// function MSK_getaccbarfnumblocktriplets has following parameters:
// - task: MSKtask_t
// - numtrip: MSKint64t *
//
// [MSK_getaccbarfnumblocktriplets]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getaccbarfnumblocktriplets(
	numtrip *int64,
) res.Code {
	return res.Code(
		C.MSK_getaccbarfnumblocktriplets(
			task.task,
			(*C.MSKint64t)(numtrip),
		),
	)
}

// Getaccdomain is wrapping [MSK_getaccdomain]
// function MSK_getaccdomain has following parameters:
// - task: MSKtask_t
// - accidx: MSKint64t
// - domidx: MSKint64t *
//
// [MSK_getaccdomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getaccdomain(
	accidx int64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_getaccdomain(
			task.task,
			C.MSKint64t(accidx),
			(*C.MSKint64t)(domidx),
		),
	)
}

// Getaccdoty is wrapping [MSK_getaccdoty]
// function MSK_getaccdoty has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - accidx: MSKint64t
// - doty: MSKrealt *
//
// [MSK_getaccdoty]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getaccdoty(
	whichsol SolType,
	accidx int64,
	doty *float64,
) res.Code {
	return res.Code(
		C.MSK_getaccdoty(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint64t(accidx),
			(*C.MSKrealt)(doty),
		),
	)
}

// Getaccdotys is wrapping [MSK_getaccdotys]
// function MSK_getaccdotys has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - doty: MSKrealt *
//
// [MSK_getaccdotys]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getaccdotys(
	whichsol SolType,
	doty *float64,
) res.Code {
	return res.Code(
		C.MSK_getaccdotys(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(doty),
		),
	)
}

// Getaccfnumnz is wrapping [MSK_getaccfnumnz]
// function MSK_getaccfnumnz has following parameters:
// - task: MSKtask_t
// - accfnnz: MSKint64t *
//
// [MSK_getaccfnumnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getaccfnumnz(
	accfnnz *int64,
) res.Code {
	return res.Code(
		C.MSK_getaccfnumnz(
			task.task,
			(*C.MSKint64t)(accfnnz),
		),
	)
}

// Getaccftrip is wrapping [MSK_getaccftrip]
// function MSK_getaccftrip has following parameters:
// - task: MSKtask_t
// - frow: MSKint64t *
// - fcol: MSKint32t *
// - fval: MSKrealt *
//
// [MSK_getaccftrip]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getaccftrip(
	frow *int64,
	fcol *int32,
	fval *float64,
) res.Code {
	return res.Code(
		C.MSK_getaccftrip(
			task.task,
			(*C.MSKint64t)(frow),
			(*C.MSKint32t)(fcol),
			(*C.MSKrealt)(fval),
		),
	)
}

// Getaccgvector is wrapping [MSK_getaccgvector]
// function MSK_getaccgvector has following parameters:
// - task: MSKtask_t
// - g: MSKrealt *
//
// [MSK_getaccgvector]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getaccgvector(
	g *float64,
) res.Code {
	return res.Code(
		C.MSK_getaccgvector(
			task.task,
			(*C.MSKrealt)(g),
		),
	)
}

// Getaccn is wrapping [MSK_getaccn]
// function MSK_getaccn has following parameters:
// - task: MSKtask_t
// - accidx: MSKint64t
// - n: MSKint64t *
//
// [MSK_getaccn]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getaccn(
	accidx int64,
	n *int64,
) res.Code {
	return res.Code(
		C.MSK_getaccn(
			task.task,
			C.MSKint64t(accidx),
			(*C.MSKint64t)(n),
		),
	)
}

// Getaccname is wrapping [MSK_getaccname]
// function MSK_getaccname has following parameters:
// - task: MSKtask_t
// - accidx: MSKint64t
// - sizename: MSKint32t
// - name: char *
//
// [MSK_getaccname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getaccname(
	accidx int64,
	sizename int32,
	name *byte,
) res.Code {
	return res.Code(
		C.MSK_getaccname(
			task.task,
			C.MSKint64t(accidx),
			C.MSKint32t(sizename),
			(*C.char)(unsafe.Pointer(name)),
		),
	)
}

// Getaccnamelen is wrapping [MSK_getaccnamelen]
// function MSK_getaccnamelen has following parameters:
// - task: MSKtask_t
// - accidx: MSKint64t
// - len: MSKint32t *
//
// [MSK_getaccnamelen]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getaccnamelen(
	accidx int64,
	len *int32,
) res.Code {
	return res.Code(
		C.MSK_getaccnamelen(
			task.task,
			C.MSKint64t(accidx),
			(*C.MSKint32t)(len),
		),
	)
}

// Getaccntot is wrapping [MSK_getaccntot]
// function MSK_getaccntot has following parameters:
// - task: MSKtask_t
// - n: MSKint64t *
//
// [MSK_getaccntot]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getaccntot(
	n *int64,
) res.Code {
	return res.Code(
		C.MSK_getaccntot(
			task.task,
			(*C.MSKint64t)(n),
		),
	)
}

// Getaccs is wrapping [MSK_getaccs]
// function MSK_getaccs has following parameters:
// - task: MSKtask_t
// - domidxlist: MSKint64t *
// - afeidxlist: MSKint64t *
// - b: MSKrealt *
//
// [MSK_getaccs]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getaccs(
	domidxlist *int64,
	afeidxlist *int64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_getaccs(
			task.task,
			(*C.MSKint64t)(domidxlist),
			(*C.MSKint64t)(afeidxlist),
			(*C.MSKrealt)(b),
		),
	)
}

// Getacol is wrapping [MSK_getacol]
// function MSK_getacol has following parameters:
// - task: MSKtask_t
// - j: MSKint32t
// - nzj: MSKint32t *
// - subj: MSKint32t *
// - valj: MSKrealt *
//
// [MSK_getacol]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getacol(
	j int32,
	nzj *int32,
	subj *int32,
	valj *float64,
) res.Code {
	return res.Code(
		C.MSK_getacol(
			task.task,
			C.MSKint32t(j),
			(*C.MSKint32t)(nzj),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(valj),
		),
	)
}

// Getacolnumnz is wrapping [MSK_getacolnumnz]
// function MSK_getacolnumnz has following parameters:
// - task: MSKtask_t
// - i: MSKint32t
// - nzj: MSKint32t *
//
// [MSK_getacolnumnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getacolnumnz(
	i int32,
	nzj *int32,
) res.Code {
	return res.Code(
		C.MSK_getacolnumnz(
			task.task,
			C.MSKint32t(i),
			(*C.MSKint32t)(nzj),
		),
	)
}

// Getacolslice is wrapping [MSK_getacolslice]
// function MSK_getacolslice has following parameters:
// - task: MSKtask_t
// - first: MSKint32t
// - last: MSKint32t
// - maxnumnz: MSKint32t
// - ptrb: MSKint32t *
// - ptre: MSKint32t *
// - sub: MSKint32t *
// - val: MSKrealt *
//
// [MSK_getacolslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getacolslice(
	first int32,
	last int32,
	maxnumnz int32,
	ptrb *int32,
	ptre *int32,
	sub *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_getacolslice(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			C.MSKint32t(maxnumnz),
			(*C.MSKint32t)(ptrb),
			(*C.MSKint32t)(ptre),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(val),
		),
	)
}

// Getacolslice64 is wrapping [MSK_getacolslice64]
// function MSK_getacolslice64 has following parameters:
// - task: MSKtask_t
// - first: MSKint32t
// - last: MSKint32t
// - maxnumnz: MSKint64t
// - ptrb: MSKint64t *
// - ptre: MSKint64t *
// - sub: MSKint32t *
// - val: MSKrealt *
//
// [MSK_getacolslice64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getacolslice64(
	first int32,
	last int32,
	maxnumnz int64,
	ptrb *int64,
	ptre *int64,
	sub *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_getacolslice64(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			C.MSKint64t(maxnumnz),
			(*C.MSKint64t)(ptrb),
			(*C.MSKint64t)(ptre),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(val),
		),
	)
}

// Getacolslicenumnz is wrapping [MSK_getacolslicenumnz]
// function MSK_getacolslicenumnz has following parameters:
// - task: MSKtask_t
// - first: MSKint32t
// - last: MSKint32t
// - numnz: MSKint32t *
//
// [MSK_getacolslicenumnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getacolslicenumnz(
	first int32,
	last int32,
	numnz *int32,
) res.Code {
	return res.Code(
		C.MSK_getacolslicenumnz(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKint32t)(numnz),
		),
	)
}

// Getacolslicenumnz64 is wrapping [MSK_getacolslicenumnz64]
// function MSK_getacolslicenumnz64 has following parameters:
// - task: MSKtask_t
// - first: MSKint32t
// - last: MSKint32t
// - numnz: MSKint64t *
//
// [MSK_getacolslicenumnz64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getacolslicenumnz64(
	first int32,
	last int32,
	numnz *int64,
) res.Code {
	return res.Code(
		C.MSK_getacolslicenumnz64(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKint64t)(numnz),
		),
	)
}

// Getacolslicetrip is wrapping [MSK_getacolslicetrip]
// function MSK_getacolslicetrip has following parameters:
// - task: MSKtask_t
// - first: MSKint32t
// - last: MSKint32t
// - maxnumnz: MSKint64t
// - subi: MSKint32t *
// - subj: MSKint32t *
// - val: MSKrealt *
//
// [MSK_getacolslicetrip]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getacolslicetrip(
	first int32,
	last int32,
	maxnumnz int64,
	subi *int32,
	subj *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_getacolslicetrip(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			C.MSKint64t(maxnumnz),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(val),
		),
	)
}

// Getafebarfblocktriplet is wrapping [MSK_getafebarfblocktriplet]
// function MSK_getafebarfblocktriplet has following parameters:
// - task: MSKtask_t
// - maxnumtrip: MSKint64t
// - numtrip: MSKint64t *
// - afeidx: MSKint64t *
// - barvaridx: MSKint32t *
// - subk: MSKint32t *
// - subl: MSKint32t *
// - valkl: MSKrealt *
//
// [MSK_getafebarfblocktriplet]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getafebarfblocktriplet(
	maxnumtrip int64,
	numtrip *int64,
	afeidx *int64,
	barvaridx *int32,
	subk *int32,
	subl *int32,
	valkl *float64,
) res.Code {
	return res.Code(
		C.MSK_getafebarfblocktriplet(
			task.task,
			C.MSKint64t(maxnumtrip),
			(*C.MSKint64t)(numtrip),
			(*C.MSKint64t)(afeidx),
			(*C.MSKint32t)(barvaridx),
			(*C.MSKint32t)(subk),
			(*C.MSKint32t)(subl),
			(*C.MSKrealt)(valkl),
		),
	)
}

// Getafebarfnumblocktriplets is wrapping [MSK_getafebarfnumblocktriplets]
// function MSK_getafebarfnumblocktriplets has following parameters:
// - task: MSKtask_t
// - numtrip: MSKint64t *
//
// [MSK_getafebarfnumblocktriplets]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getafebarfnumblocktriplets(
	numtrip *int64,
) res.Code {
	return res.Code(
		C.MSK_getafebarfnumblocktriplets(
			task.task,
			(*C.MSKint64t)(numtrip),
		),
	)
}

// Getafebarfnumrowentries is wrapping [MSK_getafebarfnumrowentries]
// function MSK_getafebarfnumrowentries has following parameters:
// - task: MSKtask_t
// - afeidx: MSKint64t
// - numentr: MSKint32t *
//
// [MSK_getafebarfnumrowentries]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getafebarfnumrowentries(
	afeidx int64,
	numentr *int32,
) res.Code {
	return res.Code(
		C.MSK_getafebarfnumrowentries(
			task.task,
			C.MSKint64t(afeidx),
			(*C.MSKint32t)(numentr),
		),
	)
}

// Getafebarfrow is wrapping [MSK_getafebarfrow]
// function MSK_getafebarfrow has following parameters:
// - task: MSKtask_t
// - afeidx: MSKint64t
// - barvaridx: MSKint32t *
// - ptrterm: MSKint64t *
// - numterm: MSKint64t *
// - termidx: MSKint64t *
// - termweight: MSKrealt *
//
// [MSK_getafebarfrow]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getafebarfrow(
	afeidx int64,
	barvaridx *int32,
	ptrterm *int64,
	numterm *int64,
	termidx *int64,
	termweight *float64,
) res.Code {
	return res.Code(
		C.MSK_getafebarfrow(
			task.task,
			C.MSKint64t(afeidx),
			(*C.MSKint32t)(barvaridx),
			(*C.MSKint64t)(ptrterm),
			(*C.MSKint64t)(numterm),
			(*C.MSKint64t)(termidx),
			(*C.MSKrealt)(termweight),
		),
	)
}

// Getafebarfrowinfo is wrapping [MSK_getafebarfrowinfo]
// function MSK_getafebarfrowinfo has following parameters:
// - task: MSKtask_t
// - afeidx: MSKint64t
// - numentr: MSKint32t *
// - numterm: MSKint64t *
//
// [MSK_getafebarfrowinfo]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getafebarfrowinfo(
	afeidx int64,
	numentr *int32,
	numterm *int64,
) res.Code {
	return res.Code(
		C.MSK_getafebarfrowinfo(
			task.task,
			C.MSKint64t(afeidx),
			(*C.MSKint32t)(numentr),
			(*C.MSKint64t)(numterm),
		),
	)
}

// Getafefnumnz is wrapping [MSK_getafefnumnz]
// function MSK_getafefnumnz has following parameters:
// - task: MSKtask_t
// - numnz: MSKint64t *
//
// [MSK_getafefnumnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getafefnumnz(
	numnz *int64,
) res.Code {
	return res.Code(
		C.MSK_getafefnumnz(
			task.task,
			(*C.MSKint64t)(numnz),
		),
	)
}

// Getafefrow is wrapping [MSK_getafefrow]
// function MSK_getafefrow has following parameters:
// - task: MSKtask_t
// - afeidx: MSKint64t
// - numnz: MSKint32t *
// - varidx: MSKint32t *
// - val: MSKrealt *
//
// [MSK_getafefrow]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getafefrow(
	afeidx int64,
	numnz *int32,
	varidx *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_getafefrow(
			task.task,
			C.MSKint64t(afeidx),
			(*C.MSKint32t)(numnz),
			(*C.MSKint32t)(varidx),
			(*C.MSKrealt)(val),
		),
	)
}

// Getafefrownumnz is wrapping [MSK_getafefrownumnz]
// function MSK_getafefrownumnz has following parameters:
// - task: MSKtask_t
// - afeidx: MSKint64t
// - numnz: MSKint32t *
//
// [MSK_getafefrownumnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getafefrownumnz(
	afeidx int64,
	numnz *int32,
) res.Code {
	return res.Code(
		C.MSK_getafefrownumnz(
			task.task,
			C.MSKint64t(afeidx),
			(*C.MSKint32t)(numnz),
		),
	)
}

// Getafeftrip is wrapping [MSK_getafeftrip]
// function MSK_getafeftrip has following parameters:
// - task: MSKtask_t
// - afeidx: MSKint64t *
// - varidx: MSKint32t *
// - val: MSKrealt *
//
// [MSK_getafeftrip]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getafeftrip(
	afeidx *int64,
	varidx *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_getafeftrip(
			task.task,
			(*C.MSKint64t)(afeidx),
			(*C.MSKint32t)(varidx),
			(*C.MSKrealt)(val),
		),
	)
}

// Getafeg is wrapping [MSK_getafeg]
// function MSK_getafeg has following parameters:
// - task: MSKtask_t
// - afeidx: MSKint64t
// - g: MSKrealt *
//
// [MSK_getafeg]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getafeg(
	afeidx int64,
	g *float64,
) res.Code {
	return res.Code(
		C.MSK_getafeg(
			task.task,
			C.MSKint64t(afeidx),
			(*C.MSKrealt)(g),
		),
	)
}

// Getafegslice is wrapping [MSK_getafegslice]
// function MSK_getafegslice has following parameters:
// - task: MSKtask_t
// - first: MSKint64t
// - last: MSKint64t
// - g: MSKrealt *
//
// [MSK_getafegslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getafegslice(
	first int64,
	last int64,
	g *float64,
) res.Code {
	return res.Code(
		C.MSK_getafegslice(
			task.task,
			C.MSKint64t(first),
			C.MSKint64t(last),
			(*C.MSKrealt)(g),
		),
	)
}

// Getaij is wrapping [MSK_getaij]
// function MSK_getaij has following parameters:
// - task: MSKtask_t
// - i: MSKint32t
// - j: MSKint32t
// - aij: MSKrealt *
//
// [MSK_getaij]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getaij(
	i int32,
	j int32,
	aij *float64,
) res.Code {
	return res.Code(
		C.MSK_getaij(
			task.task,
			C.MSKint32t(i),
			C.MSKint32t(j),
			(*C.MSKrealt)(aij),
		),
	)
}

// Getapiecenumnz is wrapping [MSK_getapiecenumnz]
// function MSK_getapiecenumnz has following parameters:
// - task: MSKtask_t
// - firsti: MSKint32t
// - lasti: MSKint32t
// - firstj: MSKint32t
// - lastj: MSKint32t
// - numnz: MSKint32t *
//
// [MSK_getapiecenumnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getapiecenumnz(
	firsti int32,
	lasti int32,
	firstj int32,
	lastj int32,
	numnz *int32,
) res.Code {
	return res.Code(
		C.MSK_getapiecenumnz(
			task.task,
			C.MSKint32t(firsti),
			C.MSKint32t(lasti),
			C.MSKint32t(firstj),
			C.MSKint32t(lastj),
			(*C.MSKint32t)(numnz),
		),
	)
}

// Getarow is wrapping [MSK_getarow]
// function MSK_getarow has following parameters:
// - task: MSKtask_t
// - i: MSKint32t
// - nzi: MSKint32t *
// - subi: MSKint32t *
// - vali: MSKrealt *
//
// [MSK_getarow]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getarow(
	i int32,
	nzi *int32,
	subi *int32,
	vali *float64,
) res.Code {
	return res.Code(
		C.MSK_getarow(
			task.task,
			C.MSKint32t(i),
			(*C.MSKint32t)(nzi),
			(*C.MSKint32t)(subi),
			(*C.MSKrealt)(vali),
		),
	)
}

// Getarownumnz is wrapping [MSK_getarownumnz]
// function MSK_getarownumnz has following parameters:
// - task: MSKtask_t
// - i: MSKint32t
// - nzi: MSKint32t *
//
// [MSK_getarownumnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getarownumnz(
	i int32,
	nzi *int32,
) res.Code {
	return res.Code(
		C.MSK_getarownumnz(
			task.task,
			C.MSKint32t(i),
			(*C.MSKint32t)(nzi),
		),
	)
}

// Getarowslice is wrapping [MSK_getarowslice]
// function MSK_getarowslice has following parameters:
// - task: MSKtask_t
// - first: MSKint32t
// - last: MSKint32t
// - maxnumnz: MSKint32t
// - ptrb: MSKint32t *
// - ptre: MSKint32t *
// - sub: MSKint32t *
// - val: MSKrealt *
//
// [MSK_getarowslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getarowslice(
	first int32,
	last int32,
	maxnumnz int32,
	ptrb *int32,
	ptre *int32,
	sub *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_getarowslice(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			C.MSKint32t(maxnumnz),
			(*C.MSKint32t)(ptrb),
			(*C.MSKint32t)(ptre),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(val),
		),
	)
}

// Getarowslice64 is wrapping [MSK_getarowslice64]
// function MSK_getarowslice64 has following parameters:
// - task: MSKtask_t
// - first: MSKint32t
// - last: MSKint32t
// - maxnumnz: MSKint64t
// - ptrb: MSKint64t *
// - ptre: MSKint64t *
// - sub: MSKint32t *
// - val: MSKrealt *
//
// [MSK_getarowslice64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getarowslice64(
	first int32,
	last int32,
	maxnumnz int64,
	ptrb *int64,
	ptre *int64,
	sub *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_getarowslice64(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			C.MSKint64t(maxnumnz),
			(*C.MSKint64t)(ptrb),
			(*C.MSKint64t)(ptre),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(val),
		),
	)
}

// Getarowslicenumnz is wrapping [MSK_getarowslicenumnz]
// function MSK_getarowslicenumnz has following parameters:
// - task: MSKtask_t
// - first: MSKint32t
// - last: MSKint32t
// - numnz: MSKint32t *
//
// [MSK_getarowslicenumnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getarowslicenumnz(
	first int32,
	last int32,
	numnz *int32,
) res.Code {
	return res.Code(
		C.MSK_getarowslicenumnz(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKint32t)(numnz),
		),
	)
}

// Getarowslicenumnz64 is wrapping [MSK_getarowslicenumnz64]
// function MSK_getarowslicenumnz64 has following parameters:
// - task: MSKtask_t
// - first: MSKint32t
// - last: MSKint32t
// - numnz: MSKint64t *
//
// [MSK_getarowslicenumnz64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getarowslicenumnz64(
	first int32,
	last int32,
	numnz *int64,
) res.Code {
	return res.Code(
		C.MSK_getarowslicenumnz64(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKint64t)(numnz),
		),
	)
}

// Getarowslicetrip is wrapping [MSK_getarowslicetrip]
// function MSK_getarowslicetrip has following parameters:
// - task: MSKtask_t
// - first: MSKint32t
// - last: MSKint32t
// - maxnumnz: MSKint64t
// - subi: MSKint32t *
// - subj: MSKint32t *
// - val: MSKrealt *
//
// [MSK_getarowslicetrip]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getarowslicetrip(
	first int32,
	last int32,
	maxnumnz int64,
	subi *int32,
	subj *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_getarowslicetrip(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			C.MSKint64t(maxnumnz),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(val),
		),
	)
}

// Getatrip is wrapping [MSK_getatrip]
// function MSK_getatrip has following parameters:
// - task: MSKtask_t
// - maxnumnz: MSKint64t
// - subi: MSKint32t *
// - subj: MSKint32t *
// - val: MSKrealt *
//
// [MSK_getatrip]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getatrip(
	maxnumnz int64,
	subi *int32,
	subj *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_getatrip(
			task.task,
			C.MSKint64t(maxnumnz),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(val),
		),
	)
}

// Getatruncatetol is wrapping [MSK_getatruncatetol]
// function MSK_getatruncatetol has following parameters:
// - task: MSKtask_t
// - tolzero: MSKrealt *
//
// [MSK_getatruncatetol]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getatruncatetol(
	tolzero *float64,
) res.Code {
	return res.Code(
		C.MSK_getatruncatetol(
			task.task,
			(*C.MSKrealt)(tolzero),
		),
	)
}

// Getbarablocktriplet is wrapping [MSK_getbarablocktriplet]
// function MSK_getbarablocktriplet has following parameters:
// - task: MSKtask_t
// - maxnum: MSKint64t
// - num: MSKint64t *
// - subi: MSKint32t *
// - subj: MSKint32t *
// - subk: MSKint32t *
// - subl: MSKint32t *
// - valijkl: MSKrealt *
//
// [MSK_getbarablocktriplet]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getbarablocktriplet(
	maxnum int64,
	num *int64,
	subi *int32,
	subj *int32,
	subk *int32,
	subl *int32,
	valijkl *float64,
) res.Code {
	return res.Code(
		C.MSK_getbarablocktriplet(
			task.task,
			C.MSKint64t(maxnum),
			(*C.MSKint64t)(num),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKint32t)(subk),
			(*C.MSKint32t)(subl),
			(*C.MSKrealt)(valijkl),
		),
	)
}

// Getbaraidx is wrapping [MSK_getbaraidx]
// function MSK_getbaraidx has following parameters:
// - task: MSKtask_t
// - idx: MSKint64t
// - maxnum: MSKint64t
// - i: MSKint32t *
// - j: MSKint32t *
// - num: MSKint64t *
// - sub: MSKint64t *
// - weights: MSKrealt *
//
// [MSK_getbaraidx]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getbaraidx(
	idx int64,
	maxnum int64,
	i *int32,
	j *int32,
	num *int64,
	sub *int64,
	weights *float64,
) res.Code {
	return res.Code(
		C.MSK_getbaraidx(
			task.task,
			C.MSKint64t(idx),
			C.MSKint64t(maxnum),
			(*C.MSKint32t)(i),
			(*C.MSKint32t)(j),
			(*C.MSKint64t)(num),
			(*C.MSKint64t)(sub),
			(*C.MSKrealt)(weights),
		),
	)
}

// Getbaraidxij is wrapping [MSK_getbaraidxij]
// function MSK_getbaraidxij has following parameters:
// - task: MSKtask_t
// - idx: MSKint64t
// - i: MSKint32t *
// - j: MSKint32t *
//
// [MSK_getbaraidxij]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getbaraidxij(
	idx int64,
	i *int32,
	j *int32,
) res.Code {
	return res.Code(
		C.MSK_getbaraidxij(
			task.task,
			C.MSKint64t(idx),
			(*C.MSKint32t)(i),
			(*C.MSKint32t)(j),
		),
	)
}

// Getbaraidxinfo is wrapping [MSK_getbaraidxinfo]
// function MSK_getbaraidxinfo has following parameters:
// - task: MSKtask_t
// - idx: MSKint64t
// - num: MSKint64t *
//
// [MSK_getbaraidxinfo]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getbaraidxinfo(
	idx int64,
	num *int64,
) res.Code {
	return res.Code(
		C.MSK_getbaraidxinfo(
			task.task,
			C.MSKint64t(idx),
			(*C.MSKint64t)(num),
		),
	)
}

// Getbarasparsity is wrapping [MSK_getbarasparsity]
// function MSK_getbarasparsity has following parameters:
// - task: MSKtask_t
// - maxnumnz: MSKint64t
// - numnz: MSKint64t *
// - idxij: MSKint64t *
//
// [MSK_getbarasparsity]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getbarasparsity(
	maxnumnz int64,
	numnz *int64,
	idxij *int64,
) res.Code {
	return res.Code(
		C.MSK_getbarasparsity(
			task.task,
			C.MSKint64t(maxnumnz),
			(*C.MSKint64t)(numnz),
			(*C.MSKint64t)(idxij),
		),
	)
}

// Getbarcblocktriplet is wrapping [MSK_getbarcblocktriplet]
// function MSK_getbarcblocktriplet has following parameters:
// - task: MSKtask_t
// - maxnum: MSKint64t
// - num: MSKint64t *
// - subj: MSKint32t *
// - subk: MSKint32t *
// - subl: MSKint32t *
// - valjkl: MSKrealt *
//
// [MSK_getbarcblocktriplet]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getbarcblocktriplet(
	maxnum int64,
	num *int64,
	subj *int32,
	subk *int32,
	subl *int32,
	valjkl *float64,
) res.Code {
	return res.Code(
		C.MSK_getbarcblocktriplet(
			task.task,
			C.MSKint64t(maxnum),
			(*C.MSKint64t)(num),
			(*C.MSKint32t)(subj),
			(*C.MSKint32t)(subk),
			(*C.MSKint32t)(subl),
			(*C.MSKrealt)(valjkl),
		),
	)
}

// Getbarcidx is wrapping [MSK_getbarcidx]
// function MSK_getbarcidx has following parameters:
// - task: MSKtask_t
// - idx: MSKint64t
// - maxnum: MSKint64t
// - j: MSKint32t *
// - num: MSKint64t *
// - sub: MSKint64t *
// - weights: MSKrealt *
//
// [MSK_getbarcidx]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getbarcidx(
	idx int64,
	maxnum int64,
	j *int32,
	num *int64,
	sub *int64,
	weights *float64,
) res.Code {
	return res.Code(
		C.MSK_getbarcidx(
			task.task,
			C.MSKint64t(idx),
			C.MSKint64t(maxnum),
			(*C.MSKint32t)(j),
			(*C.MSKint64t)(num),
			(*C.MSKint64t)(sub),
			(*C.MSKrealt)(weights),
		),
	)
}

// Getbarcidxinfo is wrapping [MSK_getbarcidxinfo]
// function MSK_getbarcidxinfo has following parameters:
// - task: MSKtask_t
// - idx: MSKint64t
// - num: MSKint64t *
//
// [MSK_getbarcidxinfo]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getbarcidxinfo(
	idx int64,
	num *int64,
) res.Code {
	return res.Code(
		C.MSK_getbarcidxinfo(
			task.task,
			C.MSKint64t(idx),
			(*C.MSKint64t)(num),
		),
	)
}

// Getbarcidxj is wrapping [MSK_getbarcidxj]
// function MSK_getbarcidxj has following parameters:
// - task: MSKtask_t
// - idx: MSKint64t
// - j: MSKint32t *
//
// [MSK_getbarcidxj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getbarcidxj(
	idx int64,
	j *int32,
) res.Code {
	return res.Code(
		C.MSK_getbarcidxj(
			task.task,
			C.MSKint64t(idx),
			(*C.MSKint32t)(j),
		),
	)
}

// Getbarcsparsity is wrapping [MSK_getbarcsparsity]
// function MSK_getbarcsparsity has following parameters:
// - task: MSKtask_t
// - maxnumnz: MSKint64t
// - numnz: MSKint64t *
// - idxj: MSKint64t *
//
// [MSK_getbarcsparsity]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getbarcsparsity(
	maxnumnz int64,
	numnz *int64,
	idxj *int64,
) res.Code {
	return res.Code(
		C.MSK_getbarcsparsity(
			task.task,
			C.MSKint64t(maxnumnz),
			(*C.MSKint64t)(numnz),
			(*C.MSKint64t)(idxj),
		),
	)
}

// Getbarsj is wrapping [MSK_getbarsj]
// function MSK_getbarsj has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - j: MSKint32t
// - barsj: MSKrealt *
//
// [MSK_getbarsj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getbarsj(
	whichsol SolType,
	j int32,
	barsj *float64,
) res.Code {
	return res.Code(
		C.MSK_getbarsj(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(j),
			(*C.MSKrealt)(barsj),
		),
	)
}

// Getbarsslice is wrapping [MSK_getbarsslice]
// function MSK_getbarsslice has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - first: MSKint32t
// - last: MSKint32t
// - slicesize: MSKint64t
// - barsslice: MSKrealt *
//
// [MSK_getbarsslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getbarsslice(
	whichsol SolType,
	first int32,
	last int32,
	slicesize int64,
	barsslice *float64,
) res.Code {
	return res.Code(
		C.MSK_getbarsslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			C.MSKint64t(slicesize),
			(*C.MSKrealt)(barsslice),
		),
	)
}

// Getbarvarname is wrapping [MSK_getbarvarname]
// function MSK_getbarvarname has following parameters:
// - task: MSKtask_t
// - i: MSKint32t
// - sizename: MSKint32t
// - name: char *
//
// [MSK_getbarvarname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getbarvarname(
	i int32,
	sizename int32,
	name *byte,
) res.Code {
	return res.Code(
		C.MSK_getbarvarname(
			task.task,
			C.MSKint32t(i),
			C.MSKint32t(sizename),
			(*C.char)(unsafe.Pointer(name)),
		),
	)
}

// Getbarvarnameindex is wrapping [MSK_getbarvarnameindex]
// function MSK_getbarvarnameindex has following parameters:
// - task: MSKtask_t
// - somename: const char *
// - asgn: MSKint32t *
// - index: MSKint32t *
//
// [MSK_getbarvarnameindex]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getbarvarnameindex(
	somename *byte,
	asgn *int32,
	index *int32,
) res.Code {
	return res.Code(
		C.MSK_getbarvarnameindex(
			task.task,
			(*C.char)(unsafe.Pointer(somename)),
			(*C.MSKint32t)(asgn),
			(*C.MSKint32t)(index),
		),
	)
}

// Getbarvarnamelen is wrapping [MSK_getbarvarnamelen]
// function MSK_getbarvarnamelen has following parameters:
// - task: MSKtask_t
// - i: MSKint32t
// - len: MSKint32t *
//
// [MSK_getbarvarnamelen]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getbarvarnamelen(
	i int32,
	len *int32,
) res.Code {
	return res.Code(
		C.MSK_getbarvarnamelen(
			task.task,
			C.MSKint32t(i),
			(*C.MSKint32t)(len),
		),
	)
}

// Getbarxj is wrapping [MSK_getbarxj]
// function MSK_getbarxj has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - j: MSKint32t
// - barxj: MSKrealt *
//
// [MSK_getbarxj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getbarxj(
	whichsol SolType,
	j int32,
	barxj *float64,
) res.Code {
	return res.Code(
		C.MSK_getbarxj(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(j),
			(*C.MSKrealt)(barxj),
		),
	)
}

// Getbarxslice is wrapping [MSK_getbarxslice]
// function MSK_getbarxslice has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - first: MSKint32t
// - last: MSKint32t
// - slicesize: MSKint64t
// - barxslice: MSKrealt *
//
// [MSK_getbarxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getbarxslice(
	whichsol SolType,
	first int32,
	last int32,
	slicesize int64,
	barxslice *float64,
) res.Code {
	return res.Code(
		C.MSK_getbarxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			C.MSKint64t(slicesize),
			(*C.MSKrealt)(barxslice),
		),
	)
}

// Getc is wrapping [MSK_getc]
// function MSK_getc has following parameters:
// - task: MSKtask_t
// - c: MSKrealt *
//
// [MSK_getc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getc(
	c *float64,
) res.Code {
	return res.Code(
		C.MSK_getc(
			task.task,
			(*C.MSKrealt)(c),
		),
	)
}

// Getcfix is wrapping [MSK_getcfix]
// function MSK_getcfix has following parameters:
// - task: MSKtask_t
// - cfix: MSKrealt *
//
// [MSK_getcfix]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getcfix(
	cfix *float64,
) res.Code {
	return res.Code(
		C.MSK_getcfix(
			task.task,
			(*C.MSKrealt)(cfix),
		),
	)
}

// Getcj is wrapping [MSK_getcj]
// function MSK_getcj has following parameters:
// - task: MSKtask_t
// - j: MSKint32t
// - cj: MSKrealt *
//
// [MSK_getcj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getcj(
	j int32,
	cj *float64,
) res.Code {
	return res.Code(
		C.MSK_getcj(
			task.task,
			C.MSKint32t(j),
			(*C.MSKrealt)(cj),
		),
	)
}

// Getclist is wrapping [MSK_getclist]
// function MSK_getclist has following parameters:
// - task: MSKtask_t
// - num: MSKint32t
// - subj: const MSKint32t *
// - c: MSKrealt *
//
// [MSK_getclist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getclist(
	num int32,
	subj *int32,
	c *float64,
) res.Code {
	return res.Code(
		C.MSK_getclist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(c),
		),
	)
}

// Getconbound is wrapping [MSK_getconbound]
// function MSK_getconbound has following parameters:
// - task: MSKtask_t
// - i: MSKint32t
// - bk: MSKboundkeye *
// - bl: MSKrealt *
// - bu: MSKrealt *
//
// [MSK_getconbound]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getconbound(
	i int32,
	bk *BoundKey,
	bl *float64,
	bu *float64,
) res.Code {
	return res.Code(
		C.MSK_getconbound(
			task.task,
			C.MSKint32t(i),
			(*C.MSKboundkeye)(bk),
			(*C.MSKrealt)(bl),
			(*C.MSKrealt)(bu),
		),
	)
}

// Getconboundslice is wrapping [MSK_getconboundslice]
// function MSK_getconboundslice has following parameters:
// - task: MSKtask_t
// - first: MSKint32t
// - last: MSKint32t
// - bk: MSKboundkeye *
// - bl: MSKrealt *
// - bu: MSKrealt *
//
// [MSK_getconboundslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getconboundslice(
	first int32,
	last int32,
	bk *BoundKey,
	bl *float64,
	bu *float64,
) res.Code {
	return res.Code(
		C.MSK_getconboundslice(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKboundkeye)(bk),
			(*C.MSKrealt)(bl),
			(*C.MSKrealt)(bu),
		),
	)
}

// Getcone is wrapping [MSK_getcone]
// function MSK_getcone has following parameters:
// - task: MSKtask_t
// - k: MSKint32t
// - ct: MSKconetypee *
// - conepar: MSKrealt *
// - nummem: MSKint32t *
// - submem: MSKint32t *
//
// [MSK_getcone]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getcone(
	k int32,
	ct *ConeType,
	conepar *float64,
	nummem *int32,
	submem *int32,
) res.Code {
	return res.Code(
		C.MSK_getcone(
			task.task,
			C.MSKint32t(k),
			(*C.MSKconetypee)(ct),
			(*C.MSKrealt)(conepar),
			(*C.MSKint32t)(nummem),
			(*C.MSKint32t)(submem),
		),
	)
}

// Getconeinfo is wrapping [MSK_getconeinfo]
// function MSK_getconeinfo has following parameters:
// - task: MSKtask_t
// - k: MSKint32t
// - ct: MSKconetypee *
// - conepar: MSKrealt *
// - nummem: MSKint32t *
//
// [MSK_getconeinfo]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getconeinfo(
	k int32,
	ct *ConeType,
	conepar *float64,
	nummem *int32,
) res.Code {
	return res.Code(
		C.MSK_getconeinfo(
			task.task,
			C.MSKint32t(k),
			(*C.MSKconetypee)(ct),
			(*C.MSKrealt)(conepar),
			(*C.MSKint32t)(nummem),
		),
	)
}

// Getconename is wrapping [MSK_getconename]
// function MSK_getconename has following parameters:
// - task: MSKtask_t
// - i: MSKint32t
// - sizename: MSKint32t
// - name: char *
//
// [MSK_getconename]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getconename(
	i int32,
	sizename int32,
	name *byte,
) res.Code {
	return res.Code(
		C.MSK_getconename(
			task.task,
			C.MSKint32t(i),
			C.MSKint32t(sizename),
			(*C.char)(unsafe.Pointer(name)),
		),
	)
}

// Getconenameindex is wrapping [MSK_getconenameindex]
// function MSK_getconenameindex has following parameters:
// - task: MSKtask_t
// - somename: const char *
// - asgn: MSKint32t *
// - index: MSKint32t *
//
// [MSK_getconenameindex]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getconenameindex(
	somename *byte,
	asgn *int32,
	index *int32,
) res.Code {
	return res.Code(
		C.MSK_getconenameindex(
			task.task,
			(*C.char)(unsafe.Pointer(somename)),
			(*C.MSKint32t)(asgn),
			(*C.MSKint32t)(index),
		),
	)
}

// Getconenamelen is wrapping [MSK_getconenamelen]
// function MSK_getconenamelen has following parameters:
// - task: MSKtask_t
// - i: MSKint32t
// - len: MSKint32t *
//
// [MSK_getconenamelen]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getconenamelen(
	i int32,
	len *int32,
) res.Code {
	return res.Code(
		C.MSK_getconenamelen(
			task.task,
			C.MSKint32t(i),
			(*C.MSKint32t)(len),
		),
	)
}

// Getconname is wrapping [MSK_getconname]
// function MSK_getconname has following parameters:
// - task: MSKtask_t
// - i: MSKint32t
// - sizename: MSKint32t
// - name: char *
//
// [MSK_getconname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getconname(
	i int32,
	sizename int32,
	name *byte,
) res.Code {
	return res.Code(
		C.MSK_getconname(
			task.task,
			C.MSKint32t(i),
			C.MSKint32t(sizename),
			(*C.char)(unsafe.Pointer(name)),
		),
	)
}

// Getconnameindex is wrapping [MSK_getconnameindex]
// function MSK_getconnameindex has following parameters:
// - task: MSKtask_t
// - somename: const char *
// - asgn: MSKint32t *
// - index: MSKint32t *
//
// [MSK_getconnameindex]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getconnameindex(
	somename *byte,
	asgn *int32,
	index *int32,
) res.Code {
	return res.Code(
		C.MSK_getconnameindex(
			task.task,
			(*C.char)(unsafe.Pointer(somename)),
			(*C.MSKint32t)(asgn),
			(*C.MSKint32t)(index),
		),
	)
}

// Getconnamelen is wrapping [MSK_getconnamelen]
// function MSK_getconnamelen has following parameters:
// - task: MSKtask_t
// - i: MSKint32t
// - len: MSKint32t *
//
// [MSK_getconnamelen]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getconnamelen(
	i int32,
	len *int32,
) res.Code {
	return res.Code(
		C.MSK_getconnamelen(
			task.task,
			C.MSKint32t(i),
			(*C.MSKint32t)(len),
		),
	)
}

// Getcslice is wrapping [MSK_getcslice]
// function MSK_getcslice has following parameters:
// - task: MSKtask_t
// - first: MSKint32t
// - last: MSKint32t
// - c: MSKrealt *
//
// [MSK_getcslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getcslice(
	first int32,
	last int32,
	c *float64,
) res.Code {
	return res.Code(
		C.MSK_getcslice(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(c),
		),
	)
}

// Getdimbarvarj is wrapping [MSK_getdimbarvarj]
// function MSK_getdimbarvarj has following parameters:
// - task: MSKtask_t
// - j: MSKint32t
// - dimbarvarj: MSKint32t *
//
// [MSK_getdimbarvarj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getdimbarvarj(
	j int32,
	dimbarvarj *int32,
) res.Code {
	return res.Code(
		C.MSK_getdimbarvarj(
			task.task,
			C.MSKint32t(j),
			(*C.MSKint32t)(dimbarvarj),
		),
	)
}

// Getdjcafeidxlist is wrapping [MSK_getdjcafeidxlist]
// function MSK_getdjcafeidxlist has following parameters:
// - task: MSKtask_t
// - djcidx: MSKint64t
// - afeidxlist: MSKint64t *
//
// [MSK_getdjcafeidxlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getdjcafeidxlist(
	djcidx int64,
	afeidxlist *int64,
) res.Code {
	return res.Code(
		C.MSK_getdjcafeidxlist(
			task.task,
			C.MSKint64t(djcidx),
			(*C.MSKint64t)(afeidxlist),
		),
	)
}

// Getdjcb is wrapping [MSK_getdjcb]
// function MSK_getdjcb has following parameters:
// - task: MSKtask_t
// - djcidx: MSKint64t
// - b: MSKrealt *
//
// [MSK_getdjcb]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getdjcb(
	djcidx int64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_getdjcb(
			task.task,
			C.MSKint64t(djcidx),
			(*C.MSKrealt)(b),
		),
	)
}

// Getdjcdomainidxlist is wrapping [MSK_getdjcdomainidxlist]
// function MSK_getdjcdomainidxlist has following parameters:
// - task: MSKtask_t
// - djcidx: MSKint64t
// - domidxlist: MSKint64t *
//
// [MSK_getdjcdomainidxlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getdjcdomainidxlist(
	djcidx int64,
	domidxlist *int64,
) res.Code {
	return res.Code(
		C.MSK_getdjcdomainidxlist(
			task.task,
			C.MSKint64t(djcidx),
			(*C.MSKint64t)(domidxlist),
		),
	)
}

// Getdjcname is wrapping [MSK_getdjcname]
// function MSK_getdjcname has following parameters:
// - task: MSKtask_t
// - djcidx: MSKint64t
// - sizename: MSKint32t
// - name: char *
//
// [MSK_getdjcname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getdjcname(
	djcidx int64,
	sizename int32,
	name *byte,
) res.Code {
	return res.Code(
		C.MSK_getdjcname(
			task.task,
			C.MSKint64t(djcidx),
			C.MSKint32t(sizename),
			(*C.char)(unsafe.Pointer(name)),
		),
	)
}

// Getdjcnamelen is wrapping [MSK_getdjcnamelen]
// function MSK_getdjcnamelen has following parameters:
// - task: MSKtask_t
// - djcidx: MSKint64t
// - len: MSKint32t *
//
// [MSK_getdjcnamelen]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getdjcnamelen(
	djcidx int64,
	len *int32,
) res.Code {
	return res.Code(
		C.MSK_getdjcnamelen(
			task.task,
			C.MSKint64t(djcidx),
			(*C.MSKint32t)(len),
		),
	)
}

// Getdjcnumafe is wrapping [MSK_getdjcnumafe]
// function MSK_getdjcnumafe has following parameters:
// - task: MSKtask_t
// - djcidx: MSKint64t
// - numafe: MSKint64t *
//
// [MSK_getdjcnumafe]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getdjcnumafe(
	djcidx int64,
	numafe *int64,
) res.Code {
	return res.Code(
		C.MSK_getdjcnumafe(
			task.task,
			C.MSKint64t(djcidx),
			(*C.MSKint64t)(numafe),
		),
	)
}

// Getdjcnumafetot is wrapping [MSK_getdjcnumafetot]
// function MSK_getdjcnumafetot has following parameters:
// - task: MSKtask_t
// - numafetot: MSKint64t *
//
// [MSK_getdjcnumafetot]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getdjcnumafetot(
	numafetot *int64,
) res.Code {
	return res.Code(
		C.MSK_getdjcnumafetot(
			task.task,
			(*C.MSKint64t)(numafetot),
		),
	)
}

// Getdjcnumdomain is wrapping [MSK_getdjcnumdomain]
// function MSK_getdjcnumdomain has following parameters:
// - task: MSKtask_t
// - djcidx: MSKint64t
// - numdomain: MSKint64t *
//
// [MSK_getdjcnumdomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getdjcnumdomain(
	djcidx int64,
	numdomain *int64,
) res.Code {
	return res.Code(
		C.MSK_getdjcnumdomain(
			task.task,
			C.MSKint64t(djcidx),
			(*C.MSKint64t)(numdomain),
		),
	)
}

// Getdjcnumdomaintot is wrapping [MSK_getdjcnumdomaintot]
// function MSK_getdjcnumdomaintot has following parameters:
// - task: MSKtask_t
// - numdomaintot: MSKint64t *
//
// [MSK_getdjcnumdomaintot]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getdjcnumdomaintot(
	numdomaintot *int64,
) res.Code {
	return res.Code(
		C.MSK_getdjcnumdomaintot(
			task.task,
			(*C.MSKint64t)(numdomaintot),
		),
	)
}

// Getdjcnumterm is wrapping [MSK_getdjcnumterm]
// function MSK_getdjcnumterm has following parameters:
// - task: MSKtask_t
// - djcidx: MSKint64t
// - numterm: MSKint64t *
//
// [MSK_getdjcnumterm]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getdjcnumterm(
	djcidx int64,
	numterm *int64,
) res.Code {
	return res.Code(
		C.MSK_getdjcnumterm(
			task.task,
			C.MSKint64t(djcidx),
			(*C.MSKint64t)(numterm),
		),
	)
}

// Getdjcnumtermtot is wrapping [MSK_getdjcnumtermtot]
// function MSK_getdjcnumtermtot has following parameters:
// - task: MSKtask_t
// - numtermtot: MSKint64t *
//
// [MSK_getdjcnumtermtot]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getdjcnumtermtot(
	numtermtot *int64,
) res.Code {
	return res.Code(
		C.MSK_getdjcnumtermtot(
			task.task,
			(*C.MSKint64t)(numtermtot),
		),
	)
}

// Getdjcs is wrapping [MSK_getdjcs]
// function MSK_getdjcs has following parameters:
// - task: MSKtask_t
// - domidxlist: MSKint64t *
// - afeidxlist: MSKint64t *
// - b: MSKrealt *
// - termsizelist: MSKint64t *
// - numterms: MSKint64t *
//
// [MSK_getdjcs]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getdjcs(
	domidxlist *int64,
	afeidxlist *int64,
	b *float64,
	termsizelist *int64,
	numterms *int64,
) res.Code {
	return res.Code(
		C.MSK_getdjcs(
			task.task,
			(*C.MSKint64t)(domidxlist),
			(*C.MSKint64t)(afeidxlist),
			(*C.MSKrealt)(b),
			(*C.MSKint64t)(termsizelist),
			(*C.MSKint64t)(numterms),
		),
	)
}

// Getdjctermsizelist is wrapping [MSK_getdjctermsizelist]
// function MSK_getdjctermsizelist has following parameters:
// - task: MSKtask_t
// - djcidx: MSKint64t
// - termsizelist: MSKint64t *
//
// [MSK_getdjctermsizelist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getdjctermsizelist(
	djcidx int64,
	termsizelist *int64,
) res.Code {
	return res.Code(
		C.MSK_getdjctermsizelist(
			task.task,
			C.MSKint64t(djcidx),
			(*C.MSKint64t)(termsizelist),
		),
	)
}

// Getdomainn is wrapping [MSK_getdomainn]
// function MSK_getdomainn has following parameters:
// - task: MSKtask_t
// - domidx: MSKint64t
// - n: MSKint64t *
//
// [MSK_getdomainn]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getdomainn(
	domidx int64,
	n *int64,
) res.Code {
	return res.Code(
		C.MSK_getdomainn(
			task.task,
			C.MSKint64t(domidx),
			(*C.MSKint64t)(n),
		),
	)
}

// Getdomainname is wrapping [MSK_getdomainname]
// function MSK_getdomainname has following parameters:
// - task: MSKtask_t
// - domidx: MSKint64t
// - sizename: MSKint32t
// - name: char *
//
// [MSK_getdomainname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getdomainname(
	domidx int64,
	sizename int32,
	name *byte,
) res.Code {
	return res.Code(
		C.MSK_getdomainname(
			task.task,
			C.MSKint64t(domidx),
			C.MSKint32t(sizename),
			(*C.char)(unsafe.Pointer(name)),
		),
	)
}

// Getdomainnamelen is wrapping [MSK_getdomainnamelen]
// function MSK_getdomainnamelen has following parameters:
// - task: MSKtask_t
// - domidx: MSKint64t
// - len: MSKint32t *
//
// [MSK_getdomainnamelen]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getdomainnamelen(
	domidx int64,
	len *int32,
) res.Code {
	return res.Code(
		C.MSK_getdomainnamelen(
			task.task,
			C.MSKint64t(domidx),
			(*C.MSKint32t)(len),
		),
	)
}

// Getdomaintype is wrapping [MSK_getdomaintype]
// function MSK_getdomaintype has following parameters:
// - task: MSKtask_t
// - domidx: MSKint64t
// - domtype: MSKdomaintypee *
//
// [MSK_getdomaintype]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getdomaintype(
	domidx int64,
	domtype *DomainType,
) res.Code {
	return res.Code(
		C.MSK_getdomaintype(
			task.task,
			C.MSKint64t(domidx),
			(*C.MSKdomaintypee)(domtype),
		),
	)
}

// Getdouinf is wrapping [MSK_getdouinf]
// function MSK_getdouinf has following parameters:
// - task: MSKtask_t
// - whichdinf: MSKdinfiteme
// - dvalue: MSKrealt *
//
// [MSK_getdouinf]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getdouinf(
	whichdinf DInfItem,
	dvalue *float64,
) res.Code {
	return res.Code(
		C.MSK_getdouinf(
			task.task,
			C.MSKdinfiteme(whichdinf),
			(*C.MSKrealt)(dvalue),
		),
	)
}

// Getdouparam is wrapping [MSK_getdouparam]
// function MSK_getdouparam has following parameters:
// - task: MSKtask_t
// - param: MSKdparame
// - parvalue: MSKrealt *
//
// [MSK_getdouparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getdouparam(
	param DParam,
	parvalue *float64,
) res.Code {
	return res.Code(
		C.MSK_getdouparam(
			task.task,
			C.MSKdparame(param),
			(*C.MSKrealt)(parvalue),
		),
	)
}

// Getdualobj is wrapping [MSK_getdualobj]
// function MSK_getdualobj has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - dualobj: MSKrealt *
//
// [MSK_getdualobj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getdualobj(
	whichsol SolType,
	dualobj *float64,
) res.Code {
	return res.Code(
		C.MSK_getdualobj(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(dualobj),
		),
	)
}

// Getdualsolutionnorms is wrapping [MSK_getdualsolutionnorms]
// function MSK_getdualsolutionnorms has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - nrmy: MSKrealt *
// - nrmslc: MSKrealt *
// - nrmsuc: MSKrealt *
// - nrmslx: MSKrealt *
// - nrmsux: MSKrealt *
// - nrmsnx: MSKrealt *
// - nrmbars: MSKrealt *
//
// [MSK_getdualsolutionnorms]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getdualsolutionnorms(
	whichsol SolType,
	nrmy *float64,
	nrmslc *float64,
	nrmsuc *float64,
	nrmslx *float64,
	nrmsux *float64,
	nrmsnx *float64,
	nrmbars *float64,
) res.Code {
	return res.Code(
		C.MSK_getdualsolutionnorms(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(nrmy),
			(*C.MSKrealt)(nrmslc),
			(*C.MSKrealt)(nrmsuc),
			(*C.MSKrealt)(nrmslx),
			(*C.MSKrealt)(nrmsux),
			(*C.MSKrealt)(nrmsnx),
			(*C.MSKrealt)(nrmbars),
		),
	)
}

// Getdviolacc is wrapping [MSK_getdviolacc]
// function MSK_getdviolacc has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - numaccidx: MSKint64t
// - accidxlist: const MSKint64t *
// - viol: MSKrealt *
//
// [MSK_getdviolacc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getdviolacc(
	whichsol SolType,
	numaccidx int64,
	accidxlist *int64,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getdviolacc(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint64t(numaccidx),
			(*C.MSKint64t)(accidxlist),
			(*C.MSKrealt)(viol),
		),
	)
}

// Getdviolbarvar is wrapping [MSK_getdviolbarvar]
// function MSK_getdviolbarvar has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - num: MSKint32t
// - sub: const MSKint32t *
// - viol: MSKrealt *
//
// [MSK_getdviolbarvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getdviolbarvar(
	whichsol SolType,
	num int32,
	sub *int32,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getdviolbarvar(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(viol),
		),
	)
}

// Getdviolcon is wrapping [MSK_getdviolcon]
// function MSK_getdviolcon has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - num: MSKint32t
// - sub: const MSKint32t *
// - viol: MSKrealt *
//
// [MSK_getdviolcon]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getdviolcon(
	whichsol SolType,
	num int32,
	sub *int32,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getdviolcon(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(viol),
		),
	)
}

// Getdviolcones is wrapping [MSK_getdviolcones]
// function MSK_getdviolcones has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - num: MSKint32t
// - sub: const MSKint32t *
// - viol: MSKrealt *
//
// [MSK_getdviolcones]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getdviolcones(
	whichsol SolType,
	num int32,
	sub *int32,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getdviolcones(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(viol),
		),
	)
}

// Getdviolvar is wrapping [MSK_getdviolvar]
// function MSK_getdviolvar has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - num: MSKint32t
// - sub: const MSKint32t *
// - viol: MSKrealt *
//
// [MSK_getdviolvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getdviolvar(
	whichsol SolType,
	num int32,
	sub *int32,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getdviolvar(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(viol),
		),
	)
}

// Getinfindex is wrapping [MSK_getinfindex]
// function MSK_getinfindex has following parameters:
// - task: MSKtask_t
// - inftype: MSKinftypee
// - infname: const char *
// - infindex: MSKint32t *
//
// [MSK_getinfindex]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getinfindex(
	inftype InfType,
	infname *byte,
	infindex *int32,
) res.Code {
	return res.Code(
		C.MSK_getinfindex(
			task.task,
			C.MSKinftypee(inftype),
			(*C.char)(unsafe.Pointer(infname)),
			(*C.MSKint32t)(infindex),
		),
	)
}

// Getinfmax is wrapping [MSK_getinfmax]
// function MSK_getinfmax has following parameters:
// - task: MSKtask_t
// - inftype: MSKinftypee
// - infmax: MSKint32t *
//
// [MSK_getinfmax]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getinfmax(
	inftype InfType,
	infmax *int32,
) res.Code {
	return res.Code(
		C.MSK_getinfmax(
			task.task,
			C.MSKinftypee(inftype),
			(*C.MSKint32t)(infmax),
		),
	)
}

// Getinfname is wrapping [MSK_getinfname]
// function MSK_getinfname has following parameters:
// - task: MSKtask_t
// - inftype: MSKinftypee
// - whichinf: MSKint32t
// - infname: char *
//
// [MSK_getinfname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getinfname(
	inftype InfType,
	whichinf int32,
	infname *byte,
) res.Code {
	return res.Code(
		C.MSK_getinfname(
			task.task,
			C.MSKinftypee(inftype),
			C.MSKint32t(whichinf),
			(*C.char)(unsafe.Pointer(infname)),
		),
	)
}

// Getintinf is wrapping [MSK_getintinf]
// function MSK_getintinf has following parameters:
// - task: MSKtask_t
// - whichiinf: MSKiinfiteme
// - ivalue: MSKint32t *
//
// [MSK_getintinf]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getintinf(
	whichiinf IInfItem,
	ivalue *int32,
) res.Code {
	return res.Code(
		C.MSK_getintinf(
			task.task,
			C.MSKiinfiteme(whichiinf),
			(*C.MSKint32t)(ivalue),
		),
	)
}

// Getintparam is wrapping [MSK_getintparam]
// function MSK_getintparam has following parameters:
// - task: MSKtask_t
// - param: MSKiparame
// - parvalue: MSKint32t *
//
// [MSK_getintparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getintparam(
	param IParam,
	parvalue *int32,
) res.Code {
	return res.Code(
		C.MSK_getintparam(
			task.task,
			C.MSKiparame(param),
			(*C.MSKint32t)(parvalue),
		),
	)
}

// Getlasterror is wrapping [MSK_getlasterror]
// function MSK_getlasterror has following parameters:
// - task: MSKtask_t
// - lastrescode: MSKrescodee *
// - sizelastmsg: MSKint32t
// - lastmsglen: MSKint32t *
// - lastmsg: char *
//
// [MSK_getlasterror]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getlasterror(
	lastrescode *res.Code,
	sizelastmsg int32,
	lastmsglen *int32,
	lastmsg *byte,
) res.Code {
	return res.Code(
		C.MSK_getlasterror(
			task.task,
			(*C.MSKrescodee)(lastrescode),
			C.MSKint32t(sizelastmsg),
			(*C.MSKint32t)(lastmsglen),
			(*C.char)(unsafe.Pointer(lastmsg)),
		),
	)
}

// Getlasterror64 is wrapping [MSK_getlasterror64]
// function MSK_getlasterror64 has following parameters:
// - task: MSKtask_t
// - lastrescode: MSKrescodee *
// - sizelastmsg: MSKint64t
// - lastmsglen: MSKint64t *
// - lastmsg: char *
//
// [MSK_getlasterror64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getlasterror64(
	lastrescode *res.Code,
	sizelastmsg int64,
	lastmsglen *int64,
	lastmsg *byte,
) res.Code {
	return res.Code(
		C.MSK_getlasterror64(
			task.task,
			(*C.MSKrescodee)(lastrescode),
			C.MSKint64t(sizelastmsg),
			(*C.MSKint64t)(lastmsglen),
			(*C.char)(unsafe.Pointer(lastmsg)),
		),
	)
}

// Getlenbarvarj is wrapping [MSK_getlenbarvarj]
// function MSK_getlenbarvarj has following parameters:
// - task: MSKtask_t
// - j: MSKint32t
// - lenbarvarj: MSKint64t *
//
// [MSK_getlenbarvarj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getlenbarvarj(
	j int32,
	lenbarvarj *int64,
) res.Code {
	return res.Code(
		C.MSK_getlenbarvarj(
			task.task,
			C.MSKint32t(j),
			(*C.MSKint64t)(lenbarvarj),
		),
	)
}

// Getlintinf is wrapping [MSK_getlintinf]
// function MSK_getlintinf has following parameters:
// - task: MSKtask_t
// - whichliinf: MSKliinfiteme
// - ivalue: MSKint64t *
//
// [MSK_getlintinf]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getlintinf(
	whichliinf LIInfItem,
	ivalue *int64,
) res.Code {
	return res.Code(
		C.MSK_getlintinf(
			task.task,
			C.MSKliinfiteme(whichliinf),
			(*C.MSKint64t)(ivalue),
		),
	)
}

// Getmaxnamelen is wrapping [MSK_getmaxnamelen]
// function MSK_getmaxnamelen has following parameters:
// - task: MSKtask_t
// - maxlen: MSKint32t *
//
// [MSK_getmaxnamelen]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getmaxnamelen(
	maxlen *int32,
) res.Code {
	return res.Code(
		C.MSK_getmaxnamelen(
			task.task,
			(*C.MSKint32t)(maxlen),
		),
	)
}

// Getmaxnumanz is wrapping [MSK_getmaxnumanz]
// function MSK_getmaxnumanz has following parameters:
// - task: MSKtask_t
// - maxnumanz: MSKint32t *
//
// [MSK_getmaxnumanz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getmaxnumanz(
	maxnumanz *int32,
) res.Code {
	return res.Code(
		C.MSK_getmaxnumanz(
			task.task,
			(*C.MSKint32t)(maxnumanz),
		),
	)
}

// Getmaxnumanz64 is wrapping [MSK_getmaxnumanz64]
// function MSK_getmaxnumanz64 has following parameters:
// - task: MSKtask_t
// - maxnumanz: MSKint64t *
//
// [MSK_getmaxnumanz64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getmaxnumanz64(
	maxnumanz *int64,
) res.Code {
	return res.Code(
		C.MSK_getmaxnumanz64(
			task.task,
			(*C.MSKint64t)(maxnumanz),
		),
	)
}

// Getmaxnumbarvar is wrapping [MSK_getmaxnumbarvar]
// function MSK_getmaxnumbarvar has following parameters:
// - task: MSKtask_t
// - maxnumbarvar: MSKint32t *
//
// [MSK_getmaxnumbarvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getmaxnumbarvar(
	maxnumbarvar *int32,
) res.Code {
	return res.Code(
		C.MSK_getmaxnumbarvar(
			task.task,
			(*C.MSKint32t)(maxnumbarvar),
		),
	)
}

// Getmaxnumcon is wrapping [MSK_getmaxnumcon]
// function MSK_getmaxnumcon has following parameters:
// - task: MSKtask_t
// - maxnumcon: MSKint32t *
//
// [MSK_getmaxnumcon]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getmaxnumcon(
	maxnumcon *int32,
) res.Code {
	return res.Code(
		C.MSK_getmaxnumcon(
			task.task,
			(*C.MSKint32t)(maxnumcon),
		),
	)
}

// Getmaxnumcone is wrapping [MSK_getmaxnumcone]
// function MSK_getmaxnumcone has following parameters:
// - task: MSKtask_t
// - maxnumcone: MSKint32t *
//
// [MSK_getmaxnumcone]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getmaxnumcone(
	maxnumcone *int32,
) res.Code {
	return res.Code(
		C.MSK_getmaxnumcone(
			task.task,
			(*C.MSKint32t)(maxnumcone),
		),
	)
}

// Getmaxnumqnz is wrapping [MSK_getmaxnumqnz]
// function MSK_getmaxnumqnz has following parameters:
// - task: MSKtask_t
// - maxnumqnz: MSKint32t *
//
// [MSK_getmaxnumqnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getmaxnumqnz(
	maxnumqnz *int32,
) res.Code {
	return res.Code(
		C.MSK_getmaxnumqnz(
			task.task,
			(*C.MSKint32t)(maxnumqnz),
		),
	)
}

// Getmaxnumqnz64 is wrapping [MSK_getmaxnumqnz64]
// function MSK_getmaxnumqnz64 has following parameters:
// - task: MSKtask_t
// - maxnumqnz: MSKint64t *
//
// [MSK_getmaxnumqnz64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getmaxnumqnz64(
	maxnumqnz *int64,
) res.Code {
	return res.Code(
		C.MSK_getmaxnumqnz64(
			task.task,
			(*C.MSKint64t)(maxnumqnz),
		),
	)
}

// Getmaxnumvar is wrapping [MSK_getmaxnumvar]
// function MSK_getmaxnumvar has following parameters:
// - task: MSKtask_t
// - maxnumvar: MSKint32t *
//
// [MSK_getmaxnumvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getmaxnumvar(
	maxnumvar *int32,
) res.Code {
	return res.Code(
		C.MSK_getmaxnumvar(
			task.task,
			(*C.MSKint32t)(maxnumvar),
		),
	)
}

// Getmemusagetask is wrapping [MSK_getmemusagetask]
// function MSK_getmemusagetask has following parameters:
// - task: MSKtask_t
// - meminuse: MSKint64t *
// - maxmemuse: MSKint64t *
//
// [MSK_getmemusagetask]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getmemusagetask(
	meminuse *int64,
	maxmemuse *int64,
) res.Code {
	return res.Code(
		C.MSK_getmemusagetask(
			task.task,
			(*C.MSKint64t)(meminuse),
			(*C.MSKint64t)(maxmemuse),
		),
	)
}

// Getnadouinf is wrapping [MSK_getnadouinf]
// function MSK_getnadouinf has following parameters:
// - task: MSKtask_t
// - infitemname: const char *
// - dvalue: MSKrealt *
//
// [MSK_getnadouinf]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getnadouinf(
	infitemname *byte,
	dvalue *float64,
) res.Code {
	return res.Code(
		C.MSK_getnadouinf(
			task.task,
			(*C.char)(unsafe.Pointer(infitemname)),
			(*C.MSKrealt)(dvalue),
		),
	)
}

// Getnadouparam is wrapping [MSK_getnadouparam]
// function MSK_getnadouparam has following parameters:
// - task: MSKtask_t
// - paramname: const char *
// - parvalue: MSKrealt *
//
// [MSK_getnadouparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getnadouparam(
	paramname *byte,
	parvalue *float64,
) res.Code {
	return res.Code(
		C.MSK_getnadouparam(
			task.task,
			(*C.char)(unsafe.Pointer(paramname)),
			(*C.MSKrealt)(parvalue),
		),
	)
}

// Getnaintinf is wrapping [MSK_getnaintinf]
// function MSK_getnaintinf has following parameters:
// - task: MSKtask_t
// - infitemname: const char *
// - ivalue: MSKint32t *
//
// [MSK_getnaintinf]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getnaintinf(
	infitemname *byte,
	ivalue *int32,
) res.Code {
	return res.Code(
		C.MSK_getnaintinf(
			task.task,
			(*C.char)(unsafe.Pointer(infitemname)),
			(*C.MSKint32t)(ivalue),
		),
	)
}

// Getnaintparam is wrapping [MSK_getnaintparam]
// function MSK_getnaintparam has following parameters:
// - task: MSKtask_t
// - paramname: const char *
// - parvalue: MSKint32t *
//
// [MSK_getnaintparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getnaintparam(
	paramname *byte,
	parvalue *int32,
) res.Code {
	return res.Code(
		C.MSK_getnaintparam(
			task.task,
			(*C.char)(unsafe.Pointer(paramname)),
			(*C.MSKint32t)(parvalue),
		),
	)
}

// Getnastrparam is wrapping [MSK_getnastrparam]
// function MSK_getnastrparam has following parameters:
// - task: MSKtask_t
// - paramname: const char *
// - sizeparamname: MSKint32t
// - len: MSKint32t *
// - parvalue: char *
//
// [MSK_getnastrparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getnastrparam(
	paramname *byte,
	sizeparamname int32,
	len *int32,
	parvalue *byte,
) res.Code {
	return res.Code(
		C.MSK_getnastrparam(
			task.task,
			(*C.char)(unsafe.Pointer(paramname)),
			C.MSKint32t(sizeparamname),
			(*C.MSKint32t)(len),
			(*C.char)(unsafe.Pointer(parvalue)),
		),
	)
}

// Getnumacc is wrapping [MSK_getnumacc]
// function MSK_getnumacc has following parameters:
// - task: MSKtask_t
// - num: MSKint64t *
//
// [MSK_getnumacc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getnumacc(
	num *int64,
) res.Code {
	return res.Code(
		C.MSK_getnumacc(
			task.task,
			(*C.MSKint64t)(num),
		),
	)
}

// Getnumafe is wrapping [MSK_getnumafe]
// function MSK_getnumafe has following parameters:
// - task: MSKtask_t
// - numafe: MSKint64t *
//
// [MSK_getnumafe]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getnumafe(
	numafe *int64,
) res.Code {
	return res.Code(
		C.MSK_getnumafe(
			task.task,
			(*C.MSKint64t)(numafe),
		),
	)
}

// Getnumanz is wrapping [MSK_getnumanz]
// function MSK_getnumanz has following parameters:
// - task: MSKtask_t
// - numanz: MSKint32t *
//
// [MSK_getnumanz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getnumanz(
	numanz *int32,
) res.Code {
	return res.Code(
		C.MSK_getnumanz(
			task.task,
			(*C.MSKint32t)(numanz),
		),
	)
}

// Getnumanz64 is wrapping [MSK_getnumanz64]
// function MSK_getnumanz64 has following parameters:
// - task: MSKtask_t
// - numanz: MSKint64t *
//
// [MSK_getnumanz64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getnumanz64(
	numanz *int64,
) res.Code {
	return res.Code(
		C.MSK_getnumanz64(
			task.task,
			(*C.MSKint64t)(numanz),
		),
	)
}

// Getnumbarablocktriplets is wrapping [MSK_getnumbarablocktriplets]
// function MSK_getnumbarablocktriplets has following parameters:
// - task: MSKtask_t
// - num: MSKint64t *
//
// [MSK_getnumbarablocktriplets]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getnumbarablocktriplets(
	num *int64,
) res.Code {
	return res.Code(
		C.MSK_getnumbarablocktriplets(
			task.task,
			(*C.MSKint64t)(num),
		),
	)
}

// Getnumbaranz is wrapping [MSK_getnumbaranz]
// function MSK_getnumbaranz has following parameters:
// - task: MSKtask_t
// - nz: MSKint64t *
//
// [MSK_getnumbaranz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getnumbaranz(
	nz *int64,
) res.Code {
	return res.Code(
		C.MSK_getnumbaranz(
			task.task,
			(*C.MSKint64t)(nz),
		),
	)
}

// Getnumbarcblocktriplets is wrapping [MSK_getnumbarcblocktriplets]
// function MSK_getnumbarcblocktriplets has following parameters:
// - task: MSKtask_t
// - num: MSKint64t *
//
// [MSK_getnumbarcblocktriplets]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getnumbarcblocktriplets(
	num *int64,
) res.Code {
	return res.Code(
		C.MSK_getnumbarcblocktriplets(
			task.task,
			(*C.MSKint64t)(num),
		),
	)
}

// Getnumbarcnz is wrapping [MSK_getnumbarcnz]
// function MSK_getnumbarcnz has following parameters:
// - task: MSKtask_t
// - nz: MSKint64t *
//
// [MSK_getnumbarcnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getnumbarcnz(
	nz *int64,
) res.Code {
	return res.Code(
		C.MSK_getnumbarcnz(
			task.task,
			(*C.MSKint64t)(nz),
		),
	)
}

// Getnumbarvar is wrapping [MSK_getnumbarvar]
// function MSK_getnumbarvar has following parameters:
// - task: MSKtask_t
// - numbarvar: MSKint32t *
//
// [MSK_getnumbarvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getnumbarvar(
	numbarvar *int32,
) res.Code {
	return res.Code(
		C.MSK_getnumbarvar(
			task.task,
			(*C.MSKint32t)(numbarvar),
		),
	)
}

// Getnumcon is wrapping [MSK_getnumcon]
// function MSK_getnumcon has following parameters:
// - task: MSKtask_t
// - numcon: MSKint32t *
//
// [MSK_getnumcon]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getnumcon(
	numcon *int32,
) res.Code {
	return res.Code(
		C.MSK_getnumcon(
			task.task,
			(*C.MSKint32t)(numcon),
		),
	)
}

// Getnumcone is wrapping [MSK_getnumcone]
// function MSK_getnumcone has following parameters:
// - task: MSKtask_t
// - numcone: MSKint32t *
//
// [MSK_getnumcone]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getnumcone(
	numcone *int32,
) res.Code {
	return res.Code(
		C.MSK_getnumcone(
			task.task,
			(*C.MSKint32t)(numcone),
		),
	)
}

// Getnumconemem is wrapping [MSK_getnumconemem]
// function MSK_getnumconemem has following parameters:
// - task: MSKtask_t
// - k: MSKint32t
// - nummem: MSKint32t *
//
// [MSK_getnumconemem]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getnumconemem(
	k int32,
	nummem *int32,
) res.Code {
	return res.Code(
		C.MSK_getnumconemem(
			task.task,
			C.MSKint32t(k),
			(*C.MSKint32t)(nummem),
		),
	)
}

// Getnumdjc is wrapping [MSK_getnumdjc]
// function MSK_getnumdjc has following parameters:
// - task: MSKtask_t
// - num: MSKint64t *
//
// [MSK_getnumdjc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getnumdjc(
	num *int64,
) res.Code {
	return res.Code(
		C.MSK_getnumdjc(
			task.task,
			(*C.MSKint64t)(num),
		),
	)
}

// Getnumdomain is wrapping [MSK_getnumdomain]
// function MSK_getnumdomain has following parameters:
// - task: MSKtask_t
// - numdomain: MSKint64t *
//
// [MSK_getnumdomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getnumdomain(
	numdomain *int64,
) res.Code {
	return res.Code(
		C.MSK_getnumdomain(
			task.task,
			(*C.MSKint64t)(numdomain),
		),
	)
}

// Getnumintvar is wrapping [MSK_getnumintvar]
// function MSK_getnumintvar has following parameters:
// - task: MSKtask_t
// - numintvar: MSKint32t *
//
// [MSK_getnumintvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getnumintvar(
	numintvar *int32,
) res.Code {
	return res.Code(
		C.MSK_getnumintvar(
			task.task,
			(*C.MSKint32t)(numintvar),
		),
	)
}

// Getnumparam is wrapping [MSK_getnumparam]
// function MSK_getnumparam has following parameters:
// - task: MSKtask_t
// - partype: MSKparametertypee
// - numparam: MSKint32t *
//
// [MSK_getnumparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getnumparam(
	partype ParameterType,
	numparam *int32,
) res.Code {
	return res.Code(
		C.MSK_getnumparam(
			task.task,
			C.MSKparametertypee(partype),
			(*C.MSKint32t)(numparam),
		),
	)
}

// Getnumqconknz is wrapping [MSK_getnumqconknz]
// function MSK_getnumqconknz has following parameters:
// - task: MSKtask_t
// - k: MSKint32t
// - numqcnz: MSKint32t *
//
// [MSK_getnumqconknz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getnumqconknz(
	k int32,
	numqcnz *int32,
) res.Code {
	return res.Code(
		C.MSK_getnumqconknz(
			task.task,
			C.MSKint32t(k),
			(*C.MSKint32t)(numqcnz),
		),
	)
}

// Getnumqconknz64 is wrapping [MSK_getnumqconknz64]
// function MSK_getnumqconknz64 has following parameters:
// - task: MSKtask_t
// - k: MSKint32t
// - numqcnz: MSKint64t *
//
// [MSK_getnumqconknz64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getnumqconknz64(
	k int32,
	numqcnz *int64,
) res.Code {
	return res.Code(
		C.MSK_getnumqconknz64(
			task.task,
			C.MSKint32t(k),
			(*C.MSKint64t)(numqcnz),
		),
	)
}

// Getnumqobjnz is wrapping [MSK_getnumqobjnz]
// function MSK_getnumqobjnz has following parameters:
// - task: MSKtask_t
// - numqonz: MSKint32t *
//
// [MSK_getnumqobjnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getnumqobjnz(
	numqonz *int32,
) res.Code {
	return res.Code(
		C.MSK_getnumqobjnz(
			task.task,
			(*C.MSKint32t)(numqonz),
		),
	)
}

// Getnumqobjnz64 is wrapping [MSK_getnumqobjnz64]
// function MSK_getnumqobjnz64 has following parameters:
// - task: MSKtask_t
// - numqonz: MSKint64t *
//
// [MSK_getnumqobjnz64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getnumqobjnz64(
	numqonz *int64,
) res.Code {
	return res.Code(
		C.MSK_getnumqobjnz64(
			task.task,
			(*C.MSKint64t)(numqonz),
		),
	)
}

// Getnumsymmat is wrapping [MSK_getnumsymmat]
// function MSK_getnumsymmat has following parameters:
// - task: MSKtask_t
// - num: MSKint64t *
//
// [MSK_getnumsymmat]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getnumsymmat(
	num *int64,
) res.Code {
	return res.Code(
		C.MSK_getnumsymmat(
			task.task,
			(*C.MSKint64t)(num),
		),
	)
}

// Getnumvar is wrapping [MSK_getnumvar]
// function MSK_getnumvar has following parameters:
// - task: MSKtask_t
// - numvar: MSKint32t *
//
// [MSK_getnumvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getnumvar(
	numvar *int32,
) res.Code {
	return res.Code(
		C.MSK_getnumvar(
			task.task,
			(*C.MSKint32t)(numvar),
		),
	)
}

// Getobjname is wrapping [MSK_getobjname]
// function MSK_getobjname has following parameters:
// - task: MSKtask_t
// - sizeobjname: MSKint32t
// - objname: char *
//
// [MSK_getobjname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getobjname(
	sizeobjname int32,
	objname *byte,
) res.Code {
	return res.Code(
		C.MSK_getobjname(
			task.task,
			C.MSKint32t(sizeobjname),
			(*C.char)(unsafe.Pointer(objname)),
		),
	)
}

// Getobjnamelen is wrapping [MSK_getobjnamelen]
// function MSK_getobjnamelen has following parameters:
// - task: MSKtask_t
// - len: MSKint32t *
//
// [MSK_getobjnamelen]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getobjnamelen(
	len *int32,
) res.Code {
	return res.Code(
		C.MSK_getobjnamelen(
			task.task,
			(*C.MSKint32t)(len),
		),
	)
}

// Getobjsense is wrapping [MSK_getobjsense]
// function MSK_getobjsense has following parameters:
// - task: MSKtask_t
// - sense: MSKobjsensee *
//
// [MSK_getobjsense]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getobjsense(
	sense *ObjectiveSense,
) res.Code {
	return res.Code(
		C.MSK_getobjsense(
			task.task,
			(*C.MSKobjsensee)(sense),
		),
	)
}

// Getparammax is wrapping [MSK_getparammax]
// function MSK_getparammax has following parameters:
// - task: MSKtask_t
// - partype: MSKparametertypee
// - parammax: MSKint32t *
//
// [MSK_getparammax]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getparammax(
	partype ParameterType,
	parammax *int32,
) res.Code {
	return res.Code(
		C.MSK_getparammax(
			task.task,
			C.MSKparametertypee(partype),
			(*C.MSKint32t)(parammax),
		),
	)
}

// Getparamname is wrapping [MSK_getparamname]
// function MSK_getparamname has following parameters:
// - task: MSKtask_t
// - partype: MSKparametertypee
// - param: MSKint32t
// - parname: char *
//
// [MSK_getparamname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getparamname(
	partype ParameterType,
	param int32,
	parname *byte,
) res.Code {
	return res.Code(
		C.MSK_getparamname(
			task.task,
			C.MSKparametertypee(partype),
			C.MSKint32t(param),
			(*C.char)(unsafe.Pointer(parname)),
		),
	)
}

// Getpowerdomainalpha is wrapping [MSK_getpowerdomainalpha]
// function MSK_getpowerdomainalpha has following parameters:
// - task: MSKtask_t
// - domidx: MSKint64t
// - alpha: MSKrealt *
//
// [MSK_getpowerdomainalpha]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getpowerdomainalpha(
	domidx int64,
	alpha *float64,
) res.Code {
	return res.Code(
		C.MSK_getpowerdomainalpha(
			task.task,
			C.MSKint64t(domidx),
			(*C.MSKrealt)(alpha),
		),
	)
}

// Getpowerdomaininfo is wrapping [MSK_getpowerdomaininfo]
// function MSK_getpowerdomaininfo has following parameters:
// - task: MSKtask_t
// - domidx: MSKint64t
// - n: MSKint64t *
// - nleft: MSKint64t *
//
// [MSK_getpowerdomaininfo]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getpowerdomaininfo(
	domidx int64,
	n *int64,
	nleft *int64,
) res.Code {
	return res.Code(
		C.MSK_getpowerdomaininfo(
			task.task,
			C.MSKint64t(domidx),
			(*C.MSKint64t)(n),
			(*C.MSKint64t)(nleft),
		),
	)
}

// Getprimalobj is wrapping [MSK_getprimalobj]
// function MSK_getprimalobj has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - primalobj: MSKrealt *
//
// [MSK_getprimalobj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getprimalobj(
	whichsol SolType,
	primalobj *float64,
) res.Code {
	return res.Code(
		C.MSK_getprimalobj(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(primalobj),
		),
	)
}

// Getprimalsolutionnorms is wrapping [MSK_getprimalsolutionnorms]
// function MSK_getprimalsolutionnorms has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - nrmxc: MSKrealt *
// - nrmxx: MSKrealt *
// - nrmbarx: MSKrealt *
//
// [MSK_getprimalsolutionnorms]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getprimalsolutionnorms(
	whichsol SolType,
	nrmxc *float64,
	nrmxx *float64,
	nrmbarx *float64,
) res.Code {
	return res.Code(
		C.MSK_getprimalsolutionnorms(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(nrmxc),
			(*C.MSKrealt)(nrmxx),
			(*C.MSKrealt)(nrmbarx),
		),
	)
}

// Getprobtype is wrapping [MSK_getprobtype]
// function MSK_getprobtype has following parameters:
// - task: MSKtask_t
// - probtype: MSKproblemtypee *
//
// [MSK_getprobtype]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getprobtype(
	probtype *ProblemType,
) res.Code {
	return res.Code(
		C.MSK_getprobtype(
			task.task,
			(*C.MSKproblemtypee)(probtype),
		),
	)
}

// Getprosta is wrapping [MSK_getprosta]
// function MSK_getprosta has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - problemsta: MSKprostae *
//
// [MSK_getprosta]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getprosta(
	whichsol SolType,
	problemsta *ProSta,
) res.Code {
	return res.Code(
		C.MSK_getprosta(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKprostae)(problemsta),
		),
	)
}

// Getpviolacc is wrapping [MSK_getpviolacc]
// function MSK_getpviolacc has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - numaccidx: MSKint64t
// - accidxlist: const MSKint64t *
// - viol: MSKrealt *
//
// [MSK_getpviolacc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getpviolacc(
	whichsol SolType,
	numaccidx int64,
	accidxlist *int64,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getpviolacc(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint64t(numaccidx),
			(*C.MSKint64t)(accidxlist),
			(*C.MSKrealt)(viol),
		),
	)
}

// Getpviolbarvar is wrapping [MSK_getpviolbarvar]
// function MSK_getpviolbarvar has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - num: MSKint32t
// - sub: const MSKint32t *
// - viol: MSKrealt *
//
// [MSK_getpviolbarvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getpviolbarvar(
	whichsol SolType,
	num int32,
	sub *int32,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getpviolbarvar(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(viol),
		),
	)
}

// Getpviolcon is wrapping [MSK_getpviolcon]
// function MSK_getpviolcon has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - num: MSKint32t
// - sub: const MSKint32t *
// - viol: MSKrealt *
//
// [MSK_getpviolcon]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getpviolcon(
	whichsol SolType,
	num int32,
	sub *int32,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getpviolcon(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(viol),
		),
	)
}

// Getpviolcones is wrapping [MSK_getpviolcones]
// function MSK_getpviolcones has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - num: MSKint32t
// - sub: const MSKint32t *
// - viol: MSKrealt *
//
// [MSK_getpviolcones]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getpviolcones(
	whichsol SolType,
	num int32,
	sub *int32,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getpviolcones(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(viol),
		),
	)
}

// Getpvioldjc is wrapping [MSK_getpvioldjc]
// function MSK_getpvioldjc has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - numdjcidx: MSKint64t
// - djcidxlist: const MSKint64t *
// - viol: MSKrealt *
//
// [MSK_getpvioldjc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getpvioldjc(
	whichsol SolType,
	numdjcidx int64,
	djcidxlist *int64,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getpvioldjc(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint64t(numdjcidx),
			(*C.MSKint64t)(djcidxlist),
			(*C.MSKrealt)(viol),
		),
	)
}

// Getpviolvar is wrapping [MSK_getpviolvar]
// function MSK_getpviolvar has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - num: MSKint32t
// - sub: const MSKint32t *
// - viol: MSKrealt *
//
// [MSK_getpviolvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getpviolvar(
	whichsol SolType,
	num int32,
	sub *int32,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getpviolvar(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(viol),
		),
	)
}

// Getqconk is wrapping [MSK_getqconk]
// function MSK_getqconk has following parameters:
// - task: MSKtask_t
// - k: MSKint32t
// - maxnumqcnz: MSKint32t
// - numqcnz: MSKint32t *
// - qcsubi: MSKint32t *
// - qcsubj: MSKint32t *
// - qcval: MSKrealt *
//
// [MSK_getqconk]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getqconk(
	k int32,
	maxnumqcnz int32,
	numqcnz *int32,
	qcsubi *int32,
	qcsubj *int32,
	qcval *float64,
) res.Code {
	return res.Code(
		C.MSK_getqconk(
			task.task,
			C.MSKint32t(k),
			C.MSKint32t(maxnumqcnz),
			(*C.MSKint32t)(numqcnz),
			(*C.MSKint32t)(qcsubi),
			(*C.MSKint32t)(qcsubj),
			(*C.MSKrealt)(qcval),
		),
	)
}

// Getqconk64 is wrapping [MSK_getqconk64]
// function MSK_getqconk64 has following parameters:
// - task: MSKtask_t
// - k: MSKint32t
// - maxnumqcnz: MSKint64t
// - numqcnz: MSKint64t *
// - qcsubi: MSKint32t *
// - qcsubj: MSKint32t *
// - qcval: MSKrealt *
//
// [MSK_getqconk64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getqconk64(
	k int32,
	maxnumqcnz int64,
	numqcnz *int64,
	qcsubi *int32,
	qcsubj *int32,
	qcval *float64,
) res.Code {
	return res.Code(
		C.MSK_getqconk64(
			task.task,
			C.MSKint32t(k),
			C.MSKint64t(maxnumqcnz),
			(*C.MSKint64t)(numqcnz),
			(*C.MSKint32t)(qcsubi),
			(*C.MSKint32t)(qcsubj),
			(*C.MSKrealt)(qcval),
		),
	)
}

// Getqobj is wrapping [MSK_getqobj]
// function MSK_getqobj has following parameters:
// - task: MSKtask_t
// - maxnumqonz: MSKint32t
// - numqonz: MSKint32t *
// - qosubi: MSKint32t *
// - qosubj: MSKint32t *
// - qoval: MSKrealt *
//
// [MSK_getqobj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getqobj(
	maxnumqonz int32,
	numqonz *int32,
	qosubi *int32,
	qosubj *int32,
	qoval *float64,
) res.Code {
	return res.Code(
		C.MSK_getqobj(
			task.task,
			C.MSKint32t(maxnumqonz),
			(*C.MSKint32t)(numqonz),
			(*C.MSKint32t)(qosubi),
			(*C.MSKint32t)(qosubj),
			(*C.MSKrealt)(qoval),
		),
	)
}

// Getqobj64 is wrapping [MSK_getqobj64]
// function MSK_getqobj64 has following parameters:
// - task: MSKtask_t
// - maxnumqonz: MSKint64t
// - numqonz: MSKint64t *
// - qosubi: MSKint32t *
// - qosubj: MSKint32t *
// - qoval: MSKrealt *
//
// [MSK_getqobj64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getqobj64(
	maxnumqonz int64,
	numqonz *int64,
	qosubi *int32,
	qosubj *int32,
	qoval *float64,
) res.Code {
	return res.Code(
		C.MSK_getqobj64(
			task.task,
			C.MSKint64t(maxnumqonz),
			(*C.MSKint64t)(numqonz),
			(*C.MSKint32t)(qosubi),
			(*C.MSKint32t)(qosubj),
			(*C.MSKrealt)(qoval),
		),
	)
}

// Getqobjij is wrapping [MSK_getqobjij]
// function MSK_getqobjij has following parameters:
// - task: MSKtask_t
// - i: MSKint32t
// - j: MSKint32t
// - qoij: MSKrealt *
//
// [MSK_getqobjij]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getqobjij(
	i int32,
	j int32,
	qoij *float64,
) res.Code {
	return res.Code(
		C.MSK_getqobjij(
			task.task,
			C.MSKint32t(i),
			C.MSKint32t(j),
			(*C.MSKrealt)(qoij),
		),
	)
}

// Getreducedcosts is wrapping [MSK_getreducedcosts]
// function MSK_getreducedcosts has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - first: MSKint32t
// - last: MSKint32t
// - redcosts: MSKrealt *
//
// [MSK_getreducedcosts]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getreducedcosts(
	whichsol SolType,
	first int32,
	last int32,
	redcosts *float64,
) res.Code {
	return res.Code(
		C.MSK_getreducedcosts(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(redcosts),
		),
	)
}

// Getskc is wrapping [MSK_getskc]
// function MSK_getskc has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - skc: MSKstakeye *
//
// [MSK_getskc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getskc(
	whichsol SolType,
	skc *StaKey,
) res.Code {
	return res.Code(
		C.MSK_getskc(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKstakeye)(skc),
		),
	)
}

// Getskcslice is wrapping [MSK_getskcslice]
// function MSK_getskcslice has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - first: MSKint32t
// - last: MSKint32t
// - skc: MSKstakeye *
//
// [MSK_getskcslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getskcslice(
	whichsol SolType,
	first int32,
	last int32,
	skc *StaKey,
) res.Code {
	return res.Code(
		C.MSK_getskcslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKstakeye)(skc),
		),
	)
}

// Getskn is wrapping [MSK_getskn]
// function MSK_getskn has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - skn: MSKstakeye *
//
// [MSK_getskn]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getskn(
	whichsol SolType,
	skn *StaKey,
) res.Code {
	return res.Code(
		C.MSK_getskn(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKstakeye)(skn),
		),
	)
}

// Getskx is wrapping [MSK_getskx]
// function MSK_getskx has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - skx: MSKstakeye *
//
// [MSK_getskx]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getskx(
	whichsol SolType,
	skx *StaKey,
) res.Code {
	return res.Code(
		C.MSK_getskx(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKstakeye)(skx),
		),
	)
}

// Getskxslice is wrapping [MSK_getskxslice]
// function MSK_getskxslice has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - first: MSKint32t
// - last: MSKint32t
// - skx: MSKstakeye *
//
// [MSK_getskxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getskxslice(
	whichsol SolType,
	first int32,
	last int32,
	skx *StaKey,
) res.Code {
	return res.Code(
		C.MSK_getskxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKstakeye)(skx),
		),
	)
}

// Getslc is wrapping [MSK_getslc]
// function MSK_getslc has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - slc: MSKrealt *
//
// [MSK_getslc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getslc(
	whichsol SolType,
	slc *float64,
) res.Code {
	return res.Code(
		C.MSK_getslc(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(slc),
		),
	)
}

// Getslcslice is wrapping [MSK_getslcslice]
// function MSK_getslcslice has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - first: MSKint32t
// - last: MSKint32t
// - slc: MSKrealt *
//
// [MSK_getslcslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getslcslice(
	whichsol SolType,
	first int32,
	last int32,
	slc *float64,
) res.Code {
	return res.Code(
		C.MSK_getslcslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(slc),
		),
	)
}

// Getslx is wrapping [MSK_getslx]
// function MSK_getslx has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - slx: MSKrealt *
//
// [MSK_getslx]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getslx(
	whichsol SolType,
	slx *float64,
) res.Code {
	return res.Code(
		C.MSK_getslx(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(slx),
		),
	)
}

// Getslxslice is wrapping [MSK_getslxslice]
// function MSK_getslxslice has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - first: MSKint32t
// - last: MSKint32t
// - slx: MSKrealt *
//
// [MSK_getslxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getslxslice(
	whichsol SolType,
	first int32,
	last int32,
	slx *float64,
) res.Code {
	return res.Code(
		C.MSK_getslxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(slx),
		),
	)
}

// Getsnx is wrapping [MSK_getsnx]
// function MSK_getsnx has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - snx: MSKrealt *
//
// [MSK_getsnx]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getsnx(
	whichsol SolType,
	snx *float64,
) res.Code {
	return res.Code(
		C.MSK_getsnx(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(snx),
		),
	)
}

// Getsnxslice is wrapping [MSK_getsnxslice]
// function MSK_getsnxslice has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - first: MSKint32t
// - last: MSKint32t
// - snx: MSKrealt *
//
// [MSK_getsnxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getsnxslice(
	whichsol SolType,
	first int32,
	last int32,
	snx *float64,
) res.Code {
	return res.Code(
		C.MSK_getsnxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(snx),
		),
	)
}

// Getsolsta is wrapping [MSK_getsolsta]
// function MSK_getsolsta has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - solutionsta: MSKsolstae *
//
// [MSK_getsolsta]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getsolsta(
	whichsol SolType,
	solutionsta *SolSta,
) res.Code {
	return res.Code(
		C.MSK_getsolsta(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKsolstae)(solutionsta),
		),
	)
}

// Getsolution is wrapping [MSK_getsolution]
// function MSK_getsolution has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - problemsta: MSKprostae *
// - solutionsta: MSKsolstae *
// - skc: MSKstakeye *
// - skx: MSKstakeye *
// - skn: MSKstakeye *
// - xc: MSKrealt *
// - xx: MSKrealt *
// - y: MSKrealt *
// - slc: MSKrealt *
// - suc: MSKrealt *
// - slx: MSKrealt *
// - sux: MSKrealt *
// - snx: MSKrealt *
//
// [MSK_getsolution]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getsolution(
	whichsol SolType,
	problemsta *ProSta,
	solutionsta *SolSta,
	skc *StaKey,
	skx *StaKey,
	skn *StaKey,
	xc *float64,
	xx *float64,
	y *float64,
	slc *float64,
	suc *float64,
	slx *float64,
	sux *float64,
	snx *float64,
) res.Code {
	return res.Code(
		C.MSK_getsolution(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKprostae)(problemsta),
			(*C.MSKsolstae)(solutionsta),
			(*C.MSKstakeye)(skc),
			(*C.MSKstakeye)(skx),
			(*C.MSKstakeye)(skn),
			(*C.MSKrealt)(xc),
			(*C.MSKrealt)(xx),
			(*C.MSKrealt)(y),
			(*C.MSKrealt)(slc),
			(*C.MSKrealt)(suc),
			(*C.MSKrealt)(slx),
			(*C.MSKrealt)(sux),
			(*C.MSKrealt)(snx),
		),
	)
}

// Getsolutioninfo is wrapping [MSK_getsolutioninfo]
// function MSK_getsolutioninfo has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - pobj: MSKrealt *
// - pviolcon: MSKrealt *
// - pviolvar: MSKrealt *
// - pviolbarvar: MSKrealt *
// - pviolcone: MSKrealt *
// - pviolitg: MSKrealt *
// - dobj: MSKrealt *
// - dviolcon: MSKrealt *
// - dviolvar: MSKrealt *
// - dviolbarvar: MSKrealt *
// - dviolcone: MSKrealt *
//
// [MSK_getsolutioninfo]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getsolutioninfo(
	whichsol SolType,
	pobj *float64,
	pviolcon *float64,
	pviolvar *float64,
	pviolbarvar *float64,
	pviolcone *float64,
	pviolitg *float64,
	dobj *float64,
	dviolcon *float64,
	dviolvar *float64,
	dviolbarvar *float64,
	dviolcone *float64,
) res.Code {
	return res.Code(
		C.MSK_getsolutioninfo(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(pobj),
			(*C.MSKrealt)(pviolcon),
			(*C.MSKrealt)(pviolvar),
			(*C.MSKrealt)(pviolbarvar),
			(*C.MSKrealt)(pviolcone),
			(*C.MSKrealt)(pviolitg),
			(*C.MSKrealt)(dobj),
			(*C.MSKrealt)(dviolcon),
			(*C.MSKrealt)(dviolvar),
			(*C.MSKrealt)(dviolbarvar),
			(*C.MSKrealt)(dviolcone),
		),
	)
}

// Getsolutioninfonew is wrapping [MSK_getsolutioninfonew]
// function MSK_getsolutioninfonew has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - pobj: MSKrealt *
// - pviolcon: MSKrealt *
// - pviolvar: MSKrealt *
// - pviolbarvar: MSKrealt *
// - pviolcone: MSKrealt *
// - pviolacc: MSKrealt *
// - pvioldjc: MSKrealt *
// - pviolitg: MSKrealt *
// - dobj: MSKrealt *
// - dviolcon: MSKrealt *
// - dviolvar: MSKrealt *
// - dviolbarvar: MSKrealt *
// - dviolcone: MSKrealt *
// - dviolacc: MSKrealt *
//
// [MSK_getsolutioninfonew]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getsolutioninfonew(
	whichsol SolType,
	pobj *float64,
	pviolcon *float64,
	pviolvar *float64,
	pviolbarvar *float64,
	pviolcone *float64,
	pviolacc *float64,
	pvioldjc *float64,
	pviolitg *float64,
	dobj *float64,
	dviolcon *float64,
	dviolvar *float64,
	dviolbarvar *float64,
	dviolcone *float64,
	dviolacc *float64,
) res.Code {
	return res.Code(
		C.MSK_getsolutioninfonew(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(pobj),
			(*C.MSKrealt)(pviolcon),
			(*C.MSKrealt)(pviolvar),
			(*C.MSKrealt)(pviolbarvar),
			(*C.MSKrealt)(pviolcone),
			(*C.MSKrealt)(pviolacc),
			(*C.MSKrealt)(pvioldjc),
			(*C.MSKrealt)(pviolitg),
			(*C.MSKrealt)(dobj),
			(*C.MSKrealt)(dviolcon),
			(*C.MSKrealt)(dviolvar),
			(*C.MSKrealt)(dviolbarvar),
			(*C.MSKrealt)(dviolcone),
			(*C.MSKrealt)(dviolacc),
		),
	)
}

// Getsolutionnew is wrapping [MSK_getsolutionnew]
// function MSK_getsolutionnew has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - problemsta: MSKprostae *
// - solutionsta: MSKsolstae *
// - skc: MSKstakeye *
// - skx: MSKstakeye *
// - skn: MSKstakeye *
// - xc: MSKrealt *
// - xx: MSKrealt *
// - y: MSKrealt *
// - slc: MSKrealt *
// - suc: MSKrealt *
// - slx: MSKrealt *
// - sux: MSKrealt *
// - snx: MSKrealt *
// - doty: MSKrealt *
//
// [MSK_getsolutionnew]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getsolutionnew(
	whichsol SolType,
	problemsta *ProSta,
	solutionsta *SolSta,
	skc *StaKey,
	skx *StaKey,
	skn *StaKey,
	xc *float64,
	xx *float64,
	y *float64,
	slc *float64,
	suc *float64,
	slx *float64,
	sux *float64,
	snx *float64,
	doty *float64,
) res.Code {
	return res.Code(
		C.MSK_getsolutionnew(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKprostae)(problemsta),
			(*C.MSKsolstae)(solutionsta),
			(*C.MSKstakeye)(skc),
			(*C.MSKstakeye)(skx),
			(*C.MSKstakeye)(skn),
			(*C.MSKrealt)(xc),
			(*C.MSKrealt)(xx),
			(*C.MSKrealt)(y),
			(*C.MSKrealt)(slc),
			(*C.MSKrealt)(suc),
			(*C.MSKrealt)(slx),
			(*C.MSKrealt)(sux),
			(*C.MSKrealt)(snx),
			(*C.MSKrealt)(doty),
		),
	)
}

// Getsolutionslice is wrapping [MSK_getsolutionslice]
// function MSK_getsolutionslice has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - solitem: MSKsoliteme
// - first: MSKint32t
// - last: MSKint32t
// - values: MSKrealt *
//
// [MSK_getsolutionslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getsolutionslice(
	whichsol SolType,
	solitem SolItem,
	first int32,
	last int32,
	values *float64,
) res.Code {
	return res.Code(
		C.MSK_getsolutionslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKsoliteme(solitem),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(values),
		),
	)
}

// Getsparsesymmat is wrapping [MSK_getsparsesymmat]
// function MSK_getsparsesymmat has following parameters:
// - task: MSKtask_t
// - idx: MSKint64t
// - maxlen: MSKint64t
// - subi: MSKint32t *
// - subj: MSKint32t *
// - valij: MSKrealt *
//
// [MSK_getsparsesymmat]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getsparsesymmat(
	idx int64,
	maxlen int64,
	subi *int32,
	subj *int32,
	valij *float64,
) res.Code {
	return res.Code(
		C.MSK_getsparsesymmat(
			task.task,
			C.MSKint64t(idx),
			C.MSKint64t(maxlen),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(valij),
		),
	)
}

// Getstrparam is wrapping [MSK_getstrparam]
// function MSK_getstrparam has following parameters:
// - task: MSKtask_t
// - param: MSKsparame
// - maxlen: MSKint32t
// - len: MSKint32t *
// - parvalue: char *
//
// [MSK_getstrparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getstrparam(
	param SParam,
	maxlen int32,
	len *int32,
	parvalue *byte,
) res.Code {
	return res.Code(
		C.MSK_getstrparam(
			task.task,
			C.MSKsparame(param),
			C.MSKint32t(maxlen),
			(*C.MSKint32t)(len),
			(*C.char)(unsafe.Pointer(parvalue)),
		),
	)
}

// Getstrparamlen is wrapping [MSK_getstrparamlen]
// function MSK_getstrparamlen has following parameters:
// - task: MSKtask_t
// - param: MSKsparame
// - len: MSKint32t *
//
// [MSK_getstrparamlen]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getstrparamlen(
	param SParam,
	len *int32,
) res.Code {
	return res.Code(
		C.MSK_getstrparamlen(
			task.task,
			C.MSKsparame(param),
			(*C.MSKint32t)(len),
		),
	)
}

// Getsuc is wrapping [MSK_getsuc]
// function MSK_getsuc has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - suc: MSKrealt *
//
// [MSK_getsuc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getsuc(
	whichsol SolType,
	suc *float64,
) res.Code {
	return res.Code(
		C.MSK_getsuc(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(suc),
		),
	)
}

// Getsucslice is wrapping [MSK_getsucslice]
// function MSK_getsucslice has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - first: MSKint32t
// - last: MSKint32t
// - suc: MSKrealt *
//
// [MSK_getsucslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getsucslice(
	whichsol SolType,
	first int32,
	last int32,
	suc *float64,
) res.Code {
	return res.Code(
		C.MSK_getsucslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(suc),
		),
	)
}

// Getsux is wrapping [MSK_getsux]
// function MSK_getsux has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - sux: MSKrealt *
//
// [MSK_getsux]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getsux(
	whichsol SolType,
	sux *float64,
) res.Code {
	return res.Code(
		C.MSK_getsux(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(sux),
		),
	)
}

// Getsuxslice is wrapping [MSK_getsuxslice]
// function MSK_getsuxslice has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - first: MSKint32t
// - last: MSKint32t
// - sux: MSKrealt *
//
// [MSK_getsuxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getsuxslice(
	whichsol SolType,
	first int32,
	last int32,
	sux *float64,
) res.Code {
	return res.Code(
		C.MSK_getsuxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(sux),
		),
	)
}

// Getsymbcon is wrapping [MSK_getsymbcon]
// function MSK_getsymbcon has following parameters:
// - task: MSKtask_t
// - i: MSKint32t
// - sizevalue: MSKint32t
// - name: char *
// - value: MSKint32t *
//
// [MSK_getsymbcon]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getsymbcon(
	i int32,
	sizevalue int32,
	name *byte,
	value *int32,
) res.Code {
	return res.Code(
		C.MSK_getsymbcon(
			task.task,
			C.MSKint32t(i),
			C.MSKint32t(sizevalue),
			(*C.char)(unsafe.Pointer(name)),
			(*C.MSKint32t)(value),
		),
	)
}

// Getsymmatinfo is wrapping [MSK_getsymmatinfo]
// function MSK_getsymmatinfo has following parameters:
// - task: MSKtask_t
// - idx: MSKint64t
// - dim: MSKint32t *
// - nz: MSKint64t *
// - mattype: MSKsymmattypee *
//
// [MSK_getsymmatinfo]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getsymmatinfo(
	idx int64,
	dim *int32,
	nz *int64,
	mattype *SymmatType,
) res.Code {
	return res.Code(
		C.MSK_getsymmatinfo(
			task.task,
			C.MSKint64t(idx),
			(*C.MSKint32t)(dim),
			(*C.MSKint64t)(nz),
			(*C.MSKsymmattypee)(mattype),
		),
	)
}

// Gettaskname is wrapping [MSK_gettaskname]
// function MSK_gettaskname has following parameters:
// - task: MSKtask_t
// - sizetaskname: MSKint32t
// - taskname: char *
//
// [MSK_gettaskname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Gettaskname(
	sizetaskname int32,
	taskname *byte,
) res.Code {
	return res.Code(
		C.MSK_gettaskname(
			task.task,
			C.MSKint32t(sizetaskname),
			(*C.char)(unsafe.Pointer(taskname)),
		),
	)
}

// Gettasknamelen is wrapping [MSK_gettasknamelen]
// function MSK_gettasknamelen has following parameters:
// - task: MSKtask_t
// - len: MSKint32t *
//
// [MSK_gettasknamelen]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Gettasknamelen(
	len *int32,
) res.Code {
	return res.Code(
		C.MSK_gettasknamelen(
			task.task,
			(*C.MSKint32t)(len),
		),
	)
}

// Getvarbound is wrapping [MSK_getvarbound]
// function MSK_getvarbound has following parameters:
// - task: MSKtask_t
// - i: MSKint32t
// - bk: MSKboundkeye *
// - bl: MSKrealt *
// - bu: MSKrealt *
//
// [MSK_getvarbound]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getvarbound(
	i int32,
	bk *BoundKey,
	bl *float64,
	bu *float64,
) res.Code {
	return res.Code(
		C.MSK_getvarbound(
			task.task,
			C.MSKint32t(i),
			(*C.MSKboundkeye)(bk),
			(*C.MSKrealt)(bl),
			(*C.MSKrealt)(bu),
		),
	)
}

// Getvarboundslice is wrapping [MSK_getvarboundslice]
// function MSK_getvarboundslice has following parameters:
// - task: MSKtask_t
// - first: MSKint32t
// - last: MSKint32t
// - bk: MSKboundkeye *
// - bl: MSKrealt *
// - bu: MSKrealt *
//
// [MSK_getvarboundslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getvarboundslice(
	first int32,
	last int32,
	bk *BoundKey,
	bl *float64,
	bu *float64,
) res.Code {
	return res.Code(
		C.MSK_getvarboundslice(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKboundkeye)(bk),
			(*C.MSKrealt)(bl),
			(*C.MSKrealt)(bu),
		),
	)
}

// Getvarname is wrapping [MSK_getvarname]
// function MSK_getvarname has following parameters:
// - task: MSKtask_t
// - j: MSKint32t
// - sizename: MSKint32t
// - name: char *
//
// [MSK_getvarname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getvarname(
	j int32,
	sizename int32,
	name *byte,
) res.Code {
	return res.Code(
		C.MSK_getvarname(
			task.task,
			C.MSKint32t(j),
			C.MSKint32t(sizename),
			(*C.char)(unsafe.Pointer(name)),
		),
	)
}

// Getvarnameindex is wrapping [MSK_getvarnameindex]
// function MSK_getvarnameindex has following parameters:
// - task: MSKtask_t
// - somename: const char *
// - asgn: MSKint32t *
// - index: MSKint32t *
//
// [MSK_getvarnameindex]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getvarnameindex(
	somename *byte,
	asgn *int32,
	index *int32,
) res.Code {
	return res.Code(
		C.MSK_getvarnameindex(
			task.task,
			(*C.char)(unsafe.Pointer(somename)),
			(*C.MSKint32t)(asgn),
			(*C.MSKint32t)(index),
		),
	)
}

// Getvarnamelen is wrapping [MSK_getvarnamelen]
// function MSK_getvarnamelen has following parameters:
// - task: MSKtask_t
// - i: MSKint32t
// - len: MSKint32t *
//
// [MSK_getvarnamelen]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getvarnamelen(
	i int32,
	len *int32,
) res.Code {
	return res.Code(
		C.MSK_getvarnamelen(
			task.task,
			C.MSKint32t(i),
			(*C.MSKint32t)(len),
		),
	)
}

// Getvartype is wrapping [MSK_getvartype]
// function MSK_getvartype has following parameters:
// - task: MSKtask_t
// - j: MSKint32t
// - vartype: MSKvariabletypee *
//
// [MSK_getvartype]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getvartype(
	j int32,
	vartype *VariableType,
) res.Code {
	return res.Code(
		C.MSK_getvartype(
			task.task,
			C.MSKint32t(j),
			(*C.MSKvariabletypee)(vartype),
		),
	)
}

// Getvartypelist is wrapping [MSK_getvartypelist]
// function MSK_getvartypelist has following parameters:
// - task: MSKtask_t
// - num: MSKint32t
// - subj: const MSKint32t *
// - vartype: MSKvariabletypee *
//
// [MSK_getvartypelist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getvartypelist(
	num int32,
	subj *int32,
	vartype *VariableType,
) res.Code {
	return res.Code(
		C.MSK_getvartypelist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subj),
			(*C.MSKvariabletypee)(vartype),
		),
	)
}

// Getxc is wrapping [MSK_getxc]
// function MSK_getxc has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - xc: MSKrealt *
//
// [MSK_getxc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getxc(
	whichsol SolType,
	xc *float64,
) res.Code {
	return res.Code(
		C.MSK_getxc(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(xc),
		),
	)
}

// Getxcslice is wrapping [MSK_getxcslice]
// function MSK_getxcslice has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - first: MSKint32t
// - last: MSKint32t
// - xc: MSKrealt *
//
// [MSK_getxcslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getxcslice(
	whichsol SolType,
	first int32,
	last int32,
	xc *float64,
) res.Code {
	return res.Code(
		C.MSK_getxcslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(xc),
		),
	)
}

// Getxx is wrapping [MSK_getxx]
// function MSK_getxx has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - xx: MSKrealt *
//
// [MSK_getxx]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getxx(
	whichsol SolType,
	xx *float64,
) res.Code {
	return res.Code(
		C.MSK_getxx(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(xx),
		),
	)
}

// Getxxslice is wrapping [MSK_getxxslice]
// function MSK_getxxslice has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - first: MSKint32t
// - last: MSKint32t
// - xx: MSKrealt *
//
// [MSK_getxxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getxxslice(
	whichsol SolType,
	first int32,
	last int32,
	xx *float64,
) res.Code {
	return res.Code(
		C.MSK_getxxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(xx),
		),
	)
}

// Gety is wrapping [MSK_gety]
// function MSK_gety has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - y: MSKrealt *
//
// [MSK_gety]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Gety(
	whichsol SolType,
	y *float64,
) res.Code {
	return res.Code(
		C.MSK_gety(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(y),
		),
	)
}

// Getyslice is wrapping [MSK_getyslice]
// function MSK_getyslice has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - first: MSKint32t
// - last: MSKint32t
// - y: MSKrealt *
//
// [MSK_getyslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Getyslice(
	whichsol SolType,
	first int32,
	last int32,
	y *float64,
) res.Code {
	return res.Code(
		C.MSK_getyslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(y),
		),
	)
}

// Infeasibilityreport is wrapping [MSK_infeasibilityreport]
// function MSK_infeasibilityreport has following parameters:
// - task: MSKtask_t
// - whichstream: MSKstreamtypee
// - whichsol: MSKsoltypee
//
// [MSK_infeasibilityreport]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Infeasibilityreport(
	whichstream StreamType,
	whichsol SolType,
) res.Code {
	return res.Code(
		C.MSK_infeasibilityreport(
			task.task,
			C.MSKstreamtypee(whichstream),
			C.MSKsoltypee(whichsol),
		),
	)
}

// Initbasissolve is wrapping [MSK_initbasissolve]
// function MSK_initbasissolve has following parameters:
// - task: MSKtask_t
// - basis: MSKint32t *
//
// [MSK_initbasissolve]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Initbasissolve(
	basis *int32,
) res.Code {
	return res.Code(
		C.MSK_initbasissolve(
			task.task,
			(*C.MSKint32t)(basis),
		),
	)
}

// Inputdata is wrapping [MSK_inputdata]
// function MSK_inputdata has following parameters:
// - task: MSKtask_t
// - maxnumcon: MSKint32t
// - maxnumvar: MSKint32t
// - numcon: MSKint32t
// - numvar: MSKint32t
// - c: const MSKrealt *
// - cfix: MSKrealt
// - aptrb: const MSKint32t *
// - aptre: const MSKint32t *
// - asub: const MSKint32t *
// - aval: const MSKrealt *
// - bkc: const MSKboundkeye *
// - blc: const MSKrealt *
// - buc: const MSKrealt *
// - bkx: const MSKboundkeye *
// - blx: const MSKrealt *
// - bux: const MSKrealt *
//
// [MSK_inputdata]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Inputdata(
	maxnumcon int32,
	maxnumvar int32,
	numcon int32,
	numvar int32,
	c *float64,
	cfix float64,
	aptrb *int32,
	aptre *int32,
	asub *int32,
	aval *float64,
	bkc *BoundKey,
	blc *float64,
	buc *float64,
	bkx *BoundKey,
	blx *float64,
	bux *float64,
) res.Code {
	return res.Code(
		C.MSK_inputdata(
			task.task,
			C.MSKint32t(maxnumcon),
			C.MSKint32t(maxnumvar),
			C.MSKint32t(numcon),
			C.MSKint32t(numvar),
			(*C.MSKrealt)(c),
			C.MSKrealt(cfix),
			(*C.MSKint32t)(aptrb),
			(*C.MSKint32t)(aptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
			(*C.MSKboundkeye)(bkc),
			(*C.MSKrealt)(blc),
			(*C.MSKrealt)(buc),
			(*C.MSKboundkeye)(bkx),
			(*C.MSKrealt)(blx),
			(*C.MSKrealt)(bux),
		),
	)
}

// Inputdata64 is wrapping [MSK_inputdata64]
// function MSK_inputdata64 has following parameters:
// - task: MSKtask_t
// - maxnumcon: MSKint32t
// - maxnumvar: MSKint32t
// - numcon: MSKint32t
// - numvar: MSKint32t
// - c: const MSKrealt *
// - cfix: MSKrealt
// - aptrb: const MSKint64t *
// - aptre: const MSKint64t *
// - asub: const MSKint32t *
// - aval: const MSKrealt *
// - bkc: const MSKboundkeye *
// - blc: const MSKrealt *
// - buc: const MSKrealt *
// - bkx: const MSKboundkeye *
// - blx: const MSKrealt *
// - bux: const MSKrealt *
//
// [MSK_inputdata64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Inputdata64(
	maxnumcon int32,
	maxnumvar int32,
	numcon int32,
	numvar int32,
	c *float64,
	cfix float64,
	aptrb *int64,
	aptre *int64,
	asub *int32,
	aval *float64,
	bkc *BoundKey,
	blc *float64,
	buc *float64,
	bkx *BoundKey,
	blx *float64,
	bux *float64,
) res.Code {
	return res.Code(
		C.MSK_inputdata64(
			task.task,
			C.MSKint32t(maxnumcon),
			C.MSKint32t(maxnumvar),
			C.MSKint32t(numcon),
			C.MSKint32t(numvar),
			(*C.MSKrealt)(c),
			C.MSKrealt(cfix),
			(*C.MSKint64t)(aptrb),
			(*C.MSKint64t)(aptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
			(*C.MSKboundkeye)(bkc),
			(*C.MSKrealt)(blc),
			(*C.MSKrealt)(buc),
			(*C.MSKboundkeye)(bkx),
			(*C.MSKrealt)(blx),
			(*C.MSKrealt)(bux),
		),
	)
}

// Isdouparname is wrapping [MSK_isdouparname]
// function MSK_isdouparname has following parameters:
// - task: MSKtask_t
// - parname: const char *
// - param: MSKdparame *
//
// [MSK_isdouparname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Isdouparname(
	parname *byte,
	param *DParam,
) res.Code {
	return res.Code(
		C.MSK_isdouparname(
			task.task,
			(*C.char)(unsafe.Pointer(parname)),
			(*C.MSKdparame)(param),
		),
	)
}

// Isintparname is wrapping [MSK_isintparname]
// function MSK_isintparname has following parameters:
// - task: MSKtask_t
// - parname: const char *
// - param: MSKiparame *
//
// [MSK_isintparname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Isintparname(
	parname *byte,
	param *IParam,
) res.Code {
	return res.Code(
		C.MSK_isintparname(
			task.task,
			(*C.char)(unsafe.Pointer(parname)),
			(*C.MSKiparame)(param),
		),
	)
}

// Isstrparname is wrapping [MSK_isstrparname]
// function MSK_isstrparname has following parameters:
// - task: MSKtask_t
// - parname: const char *
// - param: MSKsparame *
//
// [MSK_isstrparname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Isstrparname(
	parname *byte,
	param *SParam,
) res.Code {
	return res.Code(
		C.MSK_isstrparname(
			task.task,
			(*C.char)(unsafe.Pointer(parname)),
			(*C.MSKsparame)(param),
		),
	)
}

// Linkfiletotaskstream is wrapping [MSK_linkfiletotaskstream]
// function MSK_linkfiletotaskstream has following parameters:
// - task: MSKtask_t
// - whichstream: MSKstreamtypee
// - filename: const char *
// - append: MSKint32t
//
// [MSK_linkfiletotaskstream]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Linkfiletotaskstream(
	whichstream StreamType,
	filename *byte,
	append int32,
) res.Code {
	return res.Code(
		C.MSK_linkfiletotaskstream(
			task.task,
			C.MSKstreamtypee(whichstream),
			(*C.char)(unsafe.Pointer(filename)),
			C.MSKint32t(append),
		),
	)
}

// Onesolutionsummary is wrapping [MSK_onesolutionsummary]
// function MSK_onesolutionsummary has following parameters:
// - task: MSKtask_t
// - whichstream: MSKstreamtypee
// - whichsol: MSKsoltypee
//
// [MSK_onesolutionsummary]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Onesolutionsummary(
	whichstream StreamType,
	whichsol SolType,
) res.Code {
	return res.Code(
		C.MSK_onesolutionsummary(
			task.task,
			C.MSKstreamtypee(whichstream),
			C.MSKsoltypee(whichsol),
		),
	)
}

// Optimize is wrapping [MSK_optimize]
// function MSK_optimize has following parameters:
// - task: MSKtask_t
//
// [MSK_optimize]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Optimize() res.Code {
	return res.Code(
		C.MSK_optimize(
			task.task,
		),
	)
}

// Optimizermt is wrapping [MSK_optimizermt]
// function MSK_optimizermt has following parameters:
// - task: MSKtask_t
// - address: const char *
// - accesstoken: const char *
// - trmcode: MSKrescodee *
//
// [MSK_optimizermt]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Optimizermt(
	address *byte,
	accesstoken *byte,
	trmcode *res.Code,
) res.Code {
	return res.Code(
		C.MSK_optimizermt(
			task.task,
			(*C.char)(unsafe.Pointer(address)),
			(*C.char)(unsafe.Pointer(accesstoken)),
			(*C.MSKrescodee)(trmcode),
		),
	)
}

// Optimizersummary is wrapping [MSK_optimizersummary]
// function MSK_optimizersummary has following parameters:
// - task: MSKtask_t
// - whichstream: MSKstreamtypee
//
// [MSK_optimizersummary]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Optimizersummary(
	whichstream StreamType,
) res.Code {
	return res.Code(
		C.MSK_optimizersummary(
			task.task,
			C.MSKstreamtypee(whichstream),
		),
	)
}

// Optimizetrm is wrapping [MSK_optimizetrm]
// function MSK_optimizetrm has following parameters:
// - task: MSKtask_t
// - trmcode: MSKrescodee *
//
// [MSK_optimizetrm]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Optimizetrm(
	trmcode *res.Code,
) res.Code {
	return res.Code(
		C.MSK_optimizetrm(
			task.task,
			(*C.MSKrescodee)(trmcode),
		),
	)
}

// Primalrepair is wrapping [MSK_primalrepair]
// function MSK_primalrepair has following parameters:
// - task: MSKtask_t
// - wlc: const MSKrealt *
// - wuc: const MSKrealt *
// - wlx: const MSKrealt *
// - wux: const MSKrealt *
//
// [MSK_primalrepair]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Primalrepair(
	wlc *float64,
	wuc *float64,
	wlx *float64,
	wux *float64,
) res.Code {
	return res.Code(
		C.MSK_primalrepair(
			task.task,
			(*C.MSKrealt)(wlc),
			(*C.MSKrealt)(wuc),
			(*C.MSKrealt)(wlx),
			(*C.MSKrealt)(wux),
		),
	)
}

// Primalsensitivity is wrapping [MSK_primalsensitivity]
// function MSK_primalsensitivity has following parameters:
// - task: MSKtask_t
// - numi: MSKint32t
// - subi: const MSKint32t *
// - marki: const MSKmarke *
// - numj: MSKint32t
// - subj: const MSKint32t *
// - markj: const MSKmarke *
// - leftpricei: MSKrealt *
// - rightpricei: MSKrealt *
// - leftrangei: MSKrealt *
// - rightrangei: MSKrealt *
// - leftpricej: MSKrealt *
// - rightpricej: MSKrealt *
// - leftrangej: MSKrealt *
// - rightrangej: MSKrealt *
//
// [MSK_primalsensitivity]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Primalsensitivity(
	numi int32,
	subi *int32,
	marki *Mark,
	numj int32,
	subj *int32,
	markj *Mark,
	leftpricei *float64,
	rightpricei *float64,
	leftrangei *float64,
	rightrangei *float64,
	leftpricej *float64,
	rightpricej *float64,
	leftrangej *float64,
	rightrangej *float64,
) res.Code {
	return res.Code(
		C.MSK_primalsensitivity(
			task.task,
			C.MSKint32t(numi),
			(*C.MSKint32t)(subi),
			(*C.MSKmarke)(marki),
			C.MSKint32t(numj),
			(*C.MSKint32t)(subj),
			(*C.MSKmarke)(markj),
			(*C.MSKrealt)(leftpricei),
			(*C.MSKrealt)(rightpricei),
			(*C.MSKrealt)(leftrangei),
			(*C.MSKrealt)(rightrangei),
			(*C.MSKrealt)(leftpricej),
			(*C.MSKrealt)(rightpricej),
			(*C.MSKrealt)(leftrangej),
			(*C.MSKrealt)(rightrangej),
		),
	)
}

// Printparam is wrapping [MSK_printparam]
// function MSK_printparam has following parameters:
// - task: MSKtask_t
//
// [MSK_printparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Printparam() res.Code {
	return res.Code(
		C.MSK_printparam(
			task.task,
		),
	)
}

// Probtypetostr is wrapping [MSK_probtypetostr]
// function MSK_probtypetostr has following parameters:
// - task: MSKtask_t
// - probtype: MSKproblemtypee
// - str: char *
//
// [MSK_probtypetostr]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Probtypetostr(
	probtype ProblemType,
	str *byte,
) res.Code {
	return res.Code(
		C.MSK_probtypetostr(
			task.task,
			C.MSKproblemtypee(probtype),
			(*C.char)(unsafe.Pointer(str)),
		),
	)
}

// Prostatostr is wrapping [MSK_prostatostr]
// function MSK_prostatostr has following parameters:
// - task: MSKtask_t
// - problemsta: MSKprostae
// - str: char *
//
// [MSK_prostatostr]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Prostatostr(
	problemsta ProSta,
	str *byte,
) res.Code {
	return res.Code(
		C.MSK_prostatostr(
			task.task,
			C.MSKprostae(problemsta),
			(*C.char)(unsafe.Pointer(str)),
		),
	)
}

// Putacc is wrapping [MSK_putacc]
// function MSK_putacc has following parameters:
// - task: MSKtask_t
// - accidx: MSKint64t
// - domidx: MSKint64t
// - numafeidx: MSKint64t
// - afeidxlist: const MSKint64t *
// - b: const MSKrealt *
//
// [MSK_putacc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putacc(
	accidx int64,
	domidx int64,
	numafeidx int64,
	afeidxlist *int64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_putacc(
			task.task,
			C.MSKint64t(accidx),
			C.MSKint64t(domidx),
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidxlist),
			(*C.MSKrealt)(b),
		),
	)
}

// Putaccb is wrapping [MSK_putaccb]
// function MSK_putaccb has following parameters:
// - task: MSKtask_t
// - accidx: MSKint64t
// - lengthb: MSKint64t
// - b: const MSKrealt *
//
// [MSK_putaccb]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putaccb(
	accidx int64,
	lengthb int64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_putaccb(
			task.task,
			C.MSKint64t(accidx),
			C.MSKint64t(lengthb),
			(*C.MSKrealt)(b),
		),
	)
}

// Putaccbj is wrapping [MSK_putaccbj]
// function MSK_putaccbj has following parameters:
// - task: MSKtask_t
// - accidx: MSKint64t
// - j: MSKint64t
// - bj: MSKrealt
//
// [MSK_putaccbj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putaccbj(
	accidx int64,
	j int64,
	bj float64,
) res.Code {
	return res.Code(
		C.MSK_putaccbj(
			task.task,
			C.MSKint64t(accidx),
			C.MSKint64t(j),
			C.MSKrealt(bj),
		),
	)
}

// Putaccdoty is wrapping [MSK_putaccdoty]
// function MSK_putaccdoty has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - accidx: MSKint64t
// - doty: MSKrealt *
//
// [MSK_putaccdoty]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putaccdoty(
	whichsol SolType,
	accidx int64,
	doty *float64,
) res.Code {
	return res.Code(
		C.MSK_putaccdoty(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint64t(accidx),
			(*C.MSKrealt)(doty),
		),
	)
}

// Putacclist is wrapping [MSK_putacclist]
// function MSK_putacclist has following parameters:
// - task: MSKtask_t
// - numaccs: MSKint64t
// - accidxs: const MSKint64t *
// - domidxs: const MSKint64t *
// - numafeidx: MSKint64t
// - afeidxlist: const MSKint64t *
// - b: const MSKrealt *
//
// [MSK_putacclist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putacclist(
	numaccs int64,
	accidxs *int64,
	domidxs *int64,
	numafeidx int64,
	afeidxlist *int64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_putacclist(
			task.task,
			C.MSKint64t(numaccs),
			(*C.MSKint64t)(accidxs),
			(*C.MSKint64t)(domidxs),
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidxlist),
			(*C.MSKrealt)(b),
		),
	)
}

// Putaccname is wrapping [MSK_putaccname]
// function MSK_putaccname has following parameters:
// - task: MSKtask_t
// - accidx: MSKint64t
// - name: const char *
//
// [MSK_putaccname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putaccname(
	accidx int64,
	name *byte,
) res.Code {
	return res.Code(
		C.MSK_putaccname(
			task.task,
			C.MSKint64t(accidx),
			(*C.char)(unsafe.Pointer(name)),
		),
	)
}

// Putacol is wrapping [MSK_putacol]
// function MSK_putacol has following parameters:
// - task: MSKtask_t
// - j: MSKint32t
// - nzj: MSKint32t
// - subj: const MSKint32t *
// - valj: const MSKrealt *
//
// [MSK_putacol]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putacol(
	j int32,
	nzj int32,
	subj *int32,
	valj *float64,
) res.Code {
	return res.Code(
		C.MSK_putacol(
			task.task,
			C.MSKint32t(j),
			C.MSKint32t(nzj),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(valj),
		),
	)
}

// Putacollist is wrapping [MSK_putacollist]
// function MSK_putacollist has following parameters:
// - task: MSKtask_t
// - num: MSKint32t
// - sub: const MSKint32t *
// - ptrb: const MSKint32t *
// - ptre: const MSKint32t *
// - asub: const MSKint32t *
// - aval: const MSKrealt *
//
// [MSK_putacollist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putacollist(
	num int32,
	sub *int32,
	ptrb *int32,
	ptre *int32,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putacollist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKint32t)(ptrb),
			(*C.MSKint32t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// Putacollist64 is wrapping [MSK_putacollist64]
// function MSK_putacollist64 has following parameters:
// - task: MSKtask_t
// - num: MSKint32t
// - sub: const MSKint32t *
// - ptrb: const MSKint64t *
// - ptre: const MSKint64t *
// - asub: const MSKint32t *
// - aval: const MSKrealt *
//
// [MSK_putacollist64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putacollist64(
	num int32,
	sub *int32,
	ptrb *int64,
	ptre *int64,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putacollist64(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKint64t)(ptrb),
			(*C.MSKint64t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// Putacolslice is wrapping [MSK_putacolslice]
// function MSK_putacolslice has following parameters:
// - task: MSKtask_t
// - first: MSKint32t
// - last: MSKint32t
// - ptrb: const MSKint32t *
// - ptre: const MSKint32t *
// - asub: const MSKint32t *
// - aval: const MSKrealt *
//
// [MSK_putacolslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putacolslice(
	first int32,
	last int32,
	ptrb *int32,
	ptre *int32,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putacolslice(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKint32t)(ptrb),
			(*C.MSKint32t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// Putacolslice64 is wrapping [MSK_putacolslice64]
// function MSK_putacolslice64 has following parameters:
// - task: MSKtask_t
// - first: MSKint32t
// - last: MSKint32t
// - ptrb: const MSKint64t *
// - ptre: const MSKint64t *
// - asub: const MSKint32t *
// - aval: const MSKrealt *
//
// [MSK_putacolslice64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putacolslice64(
	first int32,
	last int32,
	ptrb *int64,
	ptre *int64,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putacolslice64(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKint64t)(ptrb),
			(*C.MSKint64t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// Putafebarfblocktriplet is wrapping [MSK_putafebarfblocktriplet]
// function MSK_putafebarfblocktriplet has following parameters:
// - task: MSKtask_t
// - numtrip: MSKint64t
// - afeidx: const MSKint64t *
// - barvaridx: const MSKint32t *
// - subk: const MSKint32t *
// - subl: const MSKint32t *
// - valkl: const MSKrealt *
//
// [MSK_putafebarfblocktriplet]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putafebarfblocktriplet(
	numtrip int64,
	afeidx *int64,
	barvaridx *int32,
	subk *int32,
	subl *int32,
	valkl *float64,
) res.Code {
	return res.Code(
		C.MSK_putafebarfblocktriplet(
			task.task,
			C.MSKint64t(numtrip),
			(*C.MSKint64t)(afeidx),
			(*C.MSKint32t)(barvaridx),
			(*C.MSKint32t)(subk),
			(*C.MSKint32t)(subl),
			(*C.MSKrealt)(valkl),
		),
	)
}

// Putafebarfentry is wrapping [MSK_putafebarfentry]
// function MSK_putafebarfentry has following parameters:
// - task: MSKtask_t
// - afeidx: MSKint64t
// - barvaridx: MSKint32t
// - numterm: MSKint64t
// - termidx: const MSKint64t *
// - termweight: const MSKrealt *
//
// [MSK_putafebarfentry]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putafebarfentry(
	afeidx int64,
	barvaridx int32,
	numterm int64,
	termidx *int64,
	termweight *float64,
) res.Code {
	return res.Code(
		C.MSK_putafebarfentry(
			task.task,
			C.MSKint64t(afeidx),
			C.MSKint32t(barvaridx),
			C.MSKint64t(numterm),
			(*C.MSKint64t)(termidx),
			(*C.MSKrealt)(termweight),
		),
	)
}

// Putafebarfentrylist is wrapping [MSK_putafebarfentrylist]
// function MSK_putafebarfentrylist has following parameters:
// - task: MSKtask_t
// - numafeidx: MSKint64t
// - afeidx: const MSKint64t *
// - barvaridx: const MSKint32t *
// - numterm: const MSKint64t *
// - ptrterm: const MSKint64t *
// - lenterm: MSKint64t
// - termidx: const MSKint64t *
// - termweight: const MSKrealt *
//
// [MSK_putafebarfentrylist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putafebarfentrylist(
	numafeidx int64,
	afeidx *int64,
	barvaridx *int32,
	numterm *int64,
	ptrterm *int64,
	lenterm int64,
	termidx *int64,
	termweight *float64,
) res.Code {
	return res.Code(
		C.MSK_putafebarfentrylist(
			task.task,
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidx),
			(*C.MSKint32t)(barvaridx),
			(*C.MSKint64t)(numterm),
			(*C.MSKint64t)(ptrterm),
			C.MSKint64t(lenterm),
			(*C.MSKint64t)(termidx),
			(*C.MSKrealt)(termweight),
		),
	)
}

// Putafebarfrow is wrapping [MSK_putafebarfrow]
// function MSK_putafebarfrow has following parameters:
// - task: MSKtask_t
// - afeidx: MSKint64t
// - numentr: MSKint32t
// - barvaridx: const MSKint32t *
// - numterm: const MSKint64t *
// - ptrterm: const MSKint64t *
// - lenterm: MSKint64t
// - termidx: const MSKint64t *
// - termweight: const MSKrealt *
//
// [MSK_putafebarfrow]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putafebarfrow(
	afeidx int64,
	numentr int32,
	barvaridx *int32,
	numterm *int64,
	ptrterm *int64,
	lenterm int64,
	termidx *int64,
	termweight *float64,
) res.Code {
	return res.Code(
		C.MSK_putafebarfrow(
			task.task,
			C.MSKint64t(afeidx),
			C.MSKint32t(numentr),
			(*C.MSKint32t)(barvaridx),
			(*C.MSKint64t)(numterm),
			(*C.MSKint64t)(ptrterm),
			C.MSKint64t(lenterm),
			(*C.MSKint64t)(termidx),
			(*C.MSKrealt)(termweight),
		),
	)
}

// Putafefcol is wrapping [MSK_putafefcol]
// function MSK_putafefcol has following parameters:
// - task: MSKtask_t
// - varidx: MSKint32t
// - numnz: MSKint64t
// - afeidx: const MSKint64t *
// - val: const MSKrealt *
//
// [MSK_putafefcol]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putafefcol(
	varidx int32,
	numnz int64,
	afeidx *int64,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_putafefcol(
			task.task,
			C.MSKint32t(varidx),
			C.MSKint64t(numnz),
			(*C.MSKint64t)(afeidx),
			(*C.MSKrealt)(val),
		),
	)
}

// Putafefentry is wrapping [MSK_putafefentry]
// function MSK_putafefentry has following parameters:
// - task: MSKtask_t
// - afeidx: MSKint64t
// - varidx: MSKint32t
// - value: MSKrealt
//
// [MSK_putafefentry]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putafefentry(
	afeidx int64,
	varidx int32,
	value float64,
) res.Code {
	return res.Code(
		C.MSK_putafefentry(
			task.task,
			C.MSKint64t(afeidx),
			C.MSKint32t(varidx),
			C.MSKrealt(value),
		),
	)
}

// Putafefentrylist is wrapping [MSK_putafefentrylist]
// function MSK_putafefentrylist has following parameters:
// - task: MSKtask_t
// - numentr: MSKint64t
// - afeidx: const MSKint64t *
// - varidx: const MSKint32t *
// - val: const MSKrealt *
//
// [MSK_putafefentrylist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putafefentrylist(
	numentr int64,
	afeidx *int64,
	varidx *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_putafefentrylist(
			task.task,
			C.MSKint64t(numentr),
			(*C.MSKint64t)(afeidx),
			(*C.MSKint32t)(varidx),
			(*C.MSKrealt)(val),
		),
	)
}

// Putafefrow is wrapping [MSK_putafefrow]
// function MSK_putafefrow has following parameters:
// - task: MSKtask_t
// - afeidx: MSKint64t
// - numnz: MSKint32t
// - varidx: const MSKint32t *
// - val: const MSKrealt *
//
// [MSK_putafefrow]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putafefrow(
	afeidx int64,
	numnz int32,
	varidx *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_putafefrow(
			task.task,
			C.MSKint64t(afeidx),
			C.MSKint32t(numnz),
			(*C.MSKint32t)(varidx),
			(*C.MSKrealt)(val),
		),
	)
}

// Putafefrowlist is wrapping [MSK_putafefrowlist]
// function MSK_putafefrowlist has following parameters:
// - task: MSKtask_t
// - numafeidx: MSKint64t
// - afeidx: const MSKint64t *
// - numnzrow: const MSKint32t *
// - ptrrow: const MSKint64t *
// - lenidxval: MSKint64t
// - varidx: const MSKint32t *
// - val: const MSKrealt *
//
// [MSK_putafefrowlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putafefrowlist(
	numafeidx int64,
	afeidx *int64,
	numnzrow *int32,
	ptrrow *int64,
	lenidxval int64,
	varidx *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_putafefrowlist(
			task.task,
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidx),
			(*C.MSKint32t)(numnzrow),
			(*C.MSKint64t)(ptrrow),
			C.MSKint64t(lenidxval),
			(*C.MSKint32t)(varidx),
			(*C.MSKrealt)(val),
		),
	)
}

// Putafeg is wrapping [MSK_putafeg]
// function MSK_putafeg has following parameters:
// - task: MSKtask_t
// - afeidx: MSKint64t
// - g: MSKrealt
//
// [MSK_putafeg]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putafeg(
	afeidx int64,
	g float64,
) res.Code {
	return res.Code(
		C.MSK_putafeg(
			task.task,
			C.MSKint64t(afeidx),
			C.MSKrealt(g),
		),
	)
}

// Putafeglist is wrapping [MSK_putafeglist]
// function MSK_putafeglist has following parameters:
// - task: MSKtask_t
// - numafeidx: MSKint64t
// - afeidx: const MSKint64t *
// - g: const MSKrealt *
//
// [MSK_putafeglist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putafeglist(
	numafeidx int64,
	afeidx *int64,
	g *float64,
) res.Code {
	return res.Code(
		C.MSK_putafeglist(
			task.task,
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidx),
			(*C.MSKrealt)(g),
		),
	)
}

// Putafegslice is wrapping [MSK_putafegslice]
// function MSK_putafegslice has following parameters:
// - task: MSKtask_t
// - first: MSKint64t
// - last: MSKint64t
// - slice: const MSKrealt *
//
// [MSK_putafegslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putafegslice(
	first int64,
	last int64,
	slice *float64,
) res.Code {
	return res.Code(
		C.MSK_putafegslice(
			task.task,
			C.MSKint64t(first),
			C.MSKint64t(last),
			(*C.MSKrealt)(slice),
		),
	)
}

// Putaij is wrapping [MSK_putaij]
// function MSK_putaij has following parameters:
// - task: MSKtask_t
// - i: MSKint32t
// - j: MSKint32t
// - aij: MSKrealt
//
// [MSK_putaij]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putaij(
	i int32,
	j int32,
	aij float64,
) res.Code {
	return res.Code(
		C.MSK_putaij(
			task.task,
			C.MSKint32t(i),
			C.MSKint32t(j),
			C.MSKrealt(aij),
		),
	)
}

// Putaijlist is wrapping [MSK_putaijlist]
// function MSK_putaijlist has following parameters:
// - task: MSKtask_t
// - num: MSKint32t
// - subi: const MSKint32t *
// - subj: const MSKint32t *
// - valij: const MSKrealt *
//
// [MSK_putaijlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putaijlist(
	num int32,
	subi *int32,
	subj *int32,
	valij *float64,
) res.Code {
	return res.Code(
		C.MSK_putaijlist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(valij),
		),
	)
}

// Putaijlist64 is wrapping [MSK_putaijlist64]
// function MSK_putaijlist64 has following parameters:
// - task: MSKtask_t
// - num: MSKint64t
// - subi: const MSKint32t *
// - subj: const MSKint32t *
// - valij: const MSKrealt *
//
// [MSK_putaijlist64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putaijlist64(
	num int64,
	subi *int32,
	subj *int32,
	valij *float64,
) res.Code {
	return res.Code(
		C.MSK_putaijlist64(
			task.task,
			C.MSKint64t(num),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(valij),
		),
	)
}

// Putarow is wrapping [MSK_putarow]
// function MSK_putarow has following parameters:
// - task: MSKtask_t
// - i: MSKint32t
// - nzi: MSKint32t
// - subi: const MSKint32t *
// - vali: const MSKrealt *
//
// [MSK_putarow]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putarow(
	i int32,
	nzi int32,
	subi *int32,
	vali *float64,
) res.Code {
	return res.Code(
		C.MSK_putarow(
			task.task,
			C.MSKint32t(i),
			C.MSKint32t(nzi),
			(*C.MSKint32t)(subi),
			(*C.MSKrealt)(vali),
		),
	)
}

// Putarowlist is wrapping [MSK_putarowlist]
// function MSK_putarowlist has following parameters:
// - task: MSKtask_t
// - num: MSKint32t
// - sub: const MSKint32t *
// - ptrb: const MSKint32t *
// - ptre: const MSKint32t *
// - asub: const MSKint32t *
// - aval: const MSKrealt *
//
// [MSK_putarowlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putarowlist(
	num int32,
	sub *int32,
	ptrb *int32,
	ptre *int32,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putarowlist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKint32t)(ptrb),
			(*C.MSKint32t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// Putarowlist64 is wrapping [MSK_putarowlist64]
// function MSK_putarowlist64 has following parameters:
// - task: MSKtask_t
// - num: MSKint32t
// - sub: const MSKint32t *
// - ptrb: const MSKint64t *
// - ptre: const MSKint64t *
// - asub: const MSKint32t *
// - aval: const MSKrealt *
//
// [MSK_putarowlist64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putarowlist64(
	num int32,
	sub *int32,
	ptrb *int64,
	ptre *int64,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putarowlist64(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKint64t)(ptrb),
			(*C.MSKint64t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// Putarowslice is wrapping [MSK_putarowslice]
// function MSK_putarowslice has following parameters:
// - task: MSKtask_t
// - first: MSKint32t
// - last: MSKint32t
// - ptrb: const MSKint32t *
// - ptre: const MSKint32t *
// - asub: const MSKint32t *
// - aval: const MSKrealt *
//
// [MSK_putarowslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putarowslice(
	first int32,
	last int32,
	ptrb *int32,
	ptre *int32,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putarowslice(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKint32t)(ptrb),
			(*C.MSKint32t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// Putarowslice64 is wrapping [MSK_putarowslice64]
// function MSK_putarowslice64 has following parameters:
// - task: MSKtask_t
// - first: MSKint32t
// - last: MSKint32t
// - ptrb: const MSKint64t *
// - ptre: const MSKint64t *
// - asub: const MSKint32t *
// - aval: const MSKrealt *
//
// [MSK_putarowslice64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putarowslice64(
	first int32,
	last int32,
	ptrb *int64,
	ptre *int64,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putarowslice64(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKint64t)(ptrb),
			(*C.MSKint64t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// Putatruncatetol is wrapping [MSK_putatruncatetol]
// function MSK_putatruncatetol has following parameters:
// - task: MSKtask_t
// - tolzero: MSKrealt
//
// [MSK_putatruncatetol]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putatruncatetol(
	tolzero float64,
) res.Code {
	return res.Code(
		C.MSK_putatruncatetol(
			task.task,
			C.MSKrealt(tolzero),
		),
	)
}

// Putbarablocktriplet is wrapping [MSK_putbarablocktriplet]
// function MSK_putbarablocktriplet has following parameters:
// - task: MSKtask_t
// - num: MSKint64t
// - subi: const MSKint32t *
// - subj: const MSKint32t *
// - subk: const MSKint32t *
// - subl: const MSKint32t *
// - valijkl: const MSKrealt *
//
// [MSK_putbarablocktriplet]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putbarablocktriplet(
	num int64,
	subi *int32,
	subj *int32,
	subk *int32,
	subl *int32,
	valijkl *float64,
) res.Code {
	return res.Code(
		C.MSK_putbarablocktriplet(
			task.task,
			C.MSKint64t(num),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKint32t)(subk),
			(*C.MSKint32t)(subl),
			(*C.MSKrealt)(valijkl),
		),
	)
}

// Putbaraij is wrapping [MSK_putbaraij]
// function MSK_putbaraij has following parameters:
// - task: MSKtask_t
// - i: MSKint32t
// - j: MSKint32t
// - num: MSKint64t
// - sub: const MSKint64t *
// - weights: const MSKrealt *
//
// [MSK_putbaraij]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putbaraij(
	i int32,
	j int32,
	num int64,
	sub *int64,
	weights *float64,
) res.Code {
	return res.Code(
		C.MSK_putbaraij(
			task.task,
			C.MSKint32t(i),
			C.MSKint32t(j),
			C.MSKint64t(num),
			(*C.MSKint64t)(sub),
			(*C.MSKrealt)(weights),
		),
	)
}

// Putbaraijlist is wrapping [MSK_putbaraijlist]
// function MSK_putbaraijlist has following parameters:
// - task: MSKtask_t
// - num: MSKint32t
// - subi: const MSKint32t *
// - subj: const MSKint32t *
// - alphaptrb: const MSKint64t *
// - alphaptre: const MSKint64t *
// - matidx: const MSKint64t *
// - weights: const MSKrealt *
//
// [MSK_putbaraijlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putbaraijlist(
	num int32,
	subi *int32,
	subj *int32,
	alphaptrb *int64,
	alphaptre *int64,
	matidx *int64,
	weights *float64,
) res.Code {
	return res.Code(
		C.MSK_putbaraijlist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKint64t)(alphaptrb),
			(*C.MSKint64t)(alphaptre),
			(*C.MSKint64t)(matidx),
			(*C.MSKrealt)(weights),
		),
	)
}

// Putbararowlist is wrapping [MSK_putbararowlist]
// function MSK_putbararowlist has following parameters:
// - task: MSKtask_t
// - num: MSKint32t
// - subi: const MSKint32t *
// - ptrb: const MSKint64t *
// - ptre: const MSKint64t *
// - subj: const MSKint32t *
// - nummat: const MSKint64t *
// - matidx: const MSKint64t *
// - weights: const MSKrealt *
//
// [MSK_putbararowlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putbararowlist(
	num int32,
	subi *int32,
	ptrb *int64,
	ptre *int64,
	subj *int32,
	nummat *int64,
	matidx *int64,
	weights *float64,
) res.Code {
	return res.Code(
		C.MSK_putbararowlist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subi),
			(*C.MSKint64t)(ptrb),
			(*C.MSKint64t)(ptre),
			(*C.MSKint32t)(subj),
			(*C.MSKint64t)(nummat),
			(*C.MSKint64t)(matidx),
			(*C.MSKrealt)(weights),
		),
	)
}

// Putbarcblocktriplet is wrapping [MSK_putbarcblocktriplet]
// function MSK_putbarcblocktriplet has following parameters:
// - task: MSKtask_t
// - num: MSKint64t
// - subj: const MSKint32t *
// - subk: const MSKint32t *
// - subl: const MSKint32t *
// - valjkl: const MSKrealt *
//
// [MSK_putbarcblocktriplet]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putbarcblocktriplet(
	num int64,
	subj *int32,
	subk *int32,
	subl *int32,
	valjkl *float64,
) res.Code {
	return res.Code(
		C.MSK_putbarcblocktriplet(
			task.task,
			C.MSKint64t(num),
			(*C.MSKint32t)(subj),
			(*C.MSKint32t)(subk),
			(*C.MSKint32t)(subl),
			(*C.MSKrealt)(valjkl),
		),
	)
}

// Putbarcj is wrapping [MSK_putbarcj]
// function MSK_putbarcj has following parameters:
// - task: MSKtask_t
// - j: MSKint32t
// - num: MSKint64t
// - sub: const MSKint64t *
// - weights: const MSKrealt *
//
// [MSK_putbarcj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putbarcj(
	j int32,
	num int64,
	sub *int64,
	weights *float64,
) res.Code {
	return res.Code(
		C.MSK_putbarcj(
			task.task,
			C.MSKint32t(j),
			C.MSKint64t(num),
			(*C.MSKint64t)(sub),
			(*C.MSKrealt)(weights),
		),
	)
}

// Putbarsj is wrapping [MSK_putbarsj]
// function MSK_putbarsj has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - j: MSKint32t
// - barsj: const MSKrealt *
//
// [MSK_putbarsj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putbarsj(
	whichsol SolType,
	j int32,
	barsj *float64,
) res.Code {
	return res.Code(
		C.MSK_putbarsj(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(j),
			(*C.MSKrealt)(barsj),
		),
	)
}

// Putbarvarname is wrapping [MSK_putbarvarname]
// function MSK_putbarvarname has following parameters:
// - task: MSKtask_t
// - j: MSKint32t
// - name: const char *
//
// [MSK_putbarvarname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putbarvarname(
	j int32,
	name *byte,
) res.Code {
	return res.Code(
		C.MSK_putbarvarname(
			task.task,
			C.MSKint32t(j),
			(*C.char)(unsafe.Pointer(name)),
		),
	)
}

// Putbarxj is wrapping [MSK_putbarxj]
// function MSK_putbarxj has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - j: MSKint32t
// - barxj: const MSKrealt *
//
// [MSK_putbarxj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putbarxj(
	whichsol SolType,
	j int32,
	barxj *float64,
) res.Code {
	return res.Code(
		C.MSK_putbarxj(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(j),
			(*C.MSKrealt)(barxj),
		),
	)
}

// Putcfix is wrapping [MSK_putcfix]
// function MSK_putcfix has following parameters:
// - task: MSKtask_t
// - cfix: MSKrealt
//
// [MSK_putcfix]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putcfix(
	cfix float64,
) res.Code {
	return res.Code(
		C.MSK_putcfix(
			task.task,
			C.MSKrealt(cfix),
		),
	)
}

// Putcj is wrapping [MSK_putcj]
// function MSK_putcj has following parameters:
// - task: MSKtask_t
// - j: MSKint32t
// - cj: MSKrealt
//
// [MSK_putcj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putcj(
	j int32,
	cj float64,
) res.Code {
	return res.Code(
		C.MSK_putcj(
			task.task,
			C.MSKint32t(j),
			C.MSKrealt(cj),
		),
	)
}

// Putclist is wrapping [MSK_putclist]
// function MSK_putclist has following parameters:
// - task: MSKtask_t
// - num: MSKint32t
// - subj: const MSKint32t *
// - val: const MSKrealt *
//
// [MSK_putclist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putclist(
	num int32,
	subj *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_putclist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(val),
		),
	)
}

// Putconbound is wrapping [MSK_putconbound]
// function MSK_putconbound has following parameters:
// - task: MSKtask_t
// - i: MSKint32t
// - bkc: MSKboundkeye
// - blc: MSKrealt
// - buc: MSKrealt
//
// [MSK_putconbound]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putconbound(
	i int32,
	bkc BoundKey,
	blc float64,
	buc float64,
) res.Code {
	return res.Code(
		C.MSK_putconbound(
			task.task,
			C.MSKint32t(i),
			C.MSKboundkeye(bkc),
			C.MSKrealt(blc),
			C.MSKrealt(buc),
		),
	)
}

// Putconboundlist is wrapping [MSK_putconboundlist]
// function MSK_putconboundlist has following parameters:
// - task: MSKtask_t
// - num: MSKint32t
// - sub: const MSKint32t *
// - bkc: const MSKboundkeye *
// - blc: const MSKrealt *
// - buc: const MSKrealt *
//
// [MSK_putconboundlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putconboundlist(
	num int32,
	sub *int32,
	bkc *BoundKey,
	blc *float64,
	buc *float64,
) res.Code {
	return res.Code(
		C.MSK_putconboundlist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKboundkeye)(bkc),
			(*C.MSKrealt)(blc),
			(*C.MSKrealt)(buc),
		),
	)
}

// Putconboundlistconst is wrapping [MSK_putconboundlistconst]
// function MSK_putconboundlistconst has following parameters:
// - task: MSKtask_t
// - num: MSKint32t
// - sub: const MSKint32t *
// - bkc: MSKboundkeye
// - blc: MSKrealt
// - buc: MSKrealt
//
// [MSK_putconboundlistconst]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putconboundlistconst(
	num int32,
	sub *int32,
	bkc BoundKey,
	blc float64,
	buc float64,
) res.Code {
	return res.Code(
		C.MSK_putconboundlistconst(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			C.MSKboundkeye(bkc),
			C.MSKrealt(blc),
			C.MSKrealt(buc),
		),
	)
}

// Putconboundslice is wrapping [MSK_putconboundslice]
// function MSK_putconboundslice has following parameters:
// - task: MSKtask_t
// - first: MSKint32t
// - last: MSKint32t
// - bkc: const MSKboundkeye *
// - blc: const MSKrealt *
// - buc: const MSKrealt *
//
// [MSK_putconboundslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putconboundslice(
	first int32,
	last int32,
	bkc *BoundKey,
	blc *float64,
	buc *float64,
) res.Code {
	return res.Code(
		C.MSK_putconboundslice(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKboundkeye)(bkc),
			(*C.MSKrealt)(blc),
			(*C.MSKrealt)(buc),
		),
	)
}

// Putconboundsliceconst is wrapping [MSK_putconboundsliceconst]
// function MSK_putconboundsliceconst has following parameters:
// - task: MSKtask_t
// - first: MSKint32t
// - last: MSKint32t
// - bkc: MSKboundkeye
// - blc: MSKrealt
// - buc: MSKrealt
//
// [MSK_putconboundsliceconst]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putconboundsliceconst(
	first int32,
	last int32,
	bkc BoundKey,
	blc float64,
	buc float64,
) res.Code {
	return res.Code(
		C.MSK_putconboundsliceconst(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			C.MSKboundkeye(bkc),
			C.MSKrealt(blc),
			C.MSKrealt(buc),
		),
	)
}

// Putcone is wrapping [MSK_putcone]
// function MSK_putcone has following parameters:
// - task: MSKtask_t
// - k: MSKint32t
// - ct: MSKconetypee
// - conepar: MSKrealt
// - nummem: MSKint32t
// - submem: const MSKint32t *
//
// [MSK_putcone]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putcone(
	k int32,
	ct ConeType,
	conepar float64,
	nummem int32,
	submem *int32,
) res.Code {
	return res.Code(
		C.MSK_putcone(
			task.task,
			C.MSKint32t(k),
			C.MSKconetypee(ct),
			C.MSKrealt(conepar),
			C.MSKint32t(nummem),
			(*C.MSKint32t)(submem),
		),
	)
}

// Putconename is wrapping [MSK_putconename]
// function MSK_putconename has following parameters:
// - task: MSKtask_t
// - j: MSKint32t
// - name: const char *
//
// [MSK_putconename]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putconename(
	j int32,
	name *byte,
) res.Code {
	return res.Code(
		C.MSK_putconename(
			task.task,
			C.MSKint32t(j),
			(*C.char)(unsafe.Pointer(name)),
		),
	)
}

// Putconname is wrapping [MSK_putconname]
// function MSK_putconname has following parameters:
// - task: MSKtask_t
// - i: MSKint32t
// - name: const char *
//
// [MSK_putconname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putconname(
	i int32,
	name *byte,
) res.Code {
	return res.Code(
		C.MSK_putconname(
			task.task,
			C.MSKint32t(i),
			(*C.char)(unsafe.Pointer(name)),
		),
	)
}

// Putconsolutioni is wrapping [MSK_putconsolutioni]
// function MSK_putconsolutioni has following parameters:
// - task: MSKtask_t
// - i: MSKint32t
// - whichsol: MSKsoltypee
// - sk: MSKstakeye
// - x: MSKrealt
// - sl: MSKrealt
// - su: MSKrealt
//
// [MSK_putconsolutioni]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putconsolutioni(
	i int32,
	whichsol SolType,
	sk StaKey,
	x float64,
	sl float64,
	su float64,
) res.Code {
	return res.Code(
		C.MSK_putconsolutioni(
			task.task,
			C.MSKint32t(i),
			C.MSKsoltypee(whichsol),
			C.MSKstakeye(sk),
			C.MSKrealt(x),
			C.MSKrealt(sl),
			C.MSKrealt(su),
		),
	)
}

// Putcslice is wrapping [MSK_putcslice]
// function MSK_putcslice has following parameters:
// - task: MSKtask_t
// - first: MSKint32t
// - last: MSKint32t
// - slice: const MSKrealt *
//
// [MSK_putcslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putcslice(
	first int32,
	last int32,
	slice *float64,
) res.Code {
	return res.Code(
		C.MSK_putcslice(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(slice),
		),
	)
}

// Putdjc is wrapping [MSK_putdjc]
// function MSK_putdjc has following parameters:
// - task: MSKtask_t
// - djcidx: MSKint64t
// - numdomidx: MSKint64t
// - domidxlist: const MSKint64t *
// - numafeidx: MSKint64t
// - afeidxlist: const MSKint64t *
// - b: const MSKrealt *
// - numterms: MSKint64t
// - termsizelist: const MSKint64t *
//
// [MSK_putdjc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putdjc(
	djcidx int64,
	numdomidx int64,
	domidxlist *int64,
	numafeidx int64,
	afeidxlist *int64,
	b *float64,
	numterms int64,
	termsizelist *int64,
) res.Code {
	return res.Code(
		C.MSK_putdjc(
			task.task,
			C.MSKint64t(djcidx),
			C.MSKint64t(numdomidx),
			(*C.MSKint64t)(domidxlist),
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidxlist),
			(*C.MSKrealt)(b),
			C.MSKint64t(numterms),
			(*C.MSKint64t)(termsizelist),
		),
	)
}

// Putdjcname is wrapping [MSK_putdjcname]
// function MSK_putdjcname has following parameters:
// - task: MSKtask_t
// - djcidx: MSKint64t
// - name: const char *
//
// [MSK_putdjcname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putdjcname(
	djcidx int64,
	name *byte,
) res.Code {
	return res.Code(
		C.MSK_putdjcname(
			task.task,
			C.MSKint64t(djcidx),
			(*C.char)(unsafe.Pointer(name)),
		),
	)
}

// Putdjcslice is wrapping [MSK_putdjcslice]
// function MSK_putdjcslice has following parameters:
// - task: MSKtask_t
// - idxfirst: MSKint64t
// - idxlast: MSKint64t
// - numdomidx: MSKint64t
// - domidxlist: const MSKint64t *
// - numafeidx: MSKint64t
// - afeidxlist: const MSKint64t *
// - b: const MSKrealt *
// - numterms: MSKint64t
// - termsizelist: const MSKint64t *
// - termsindjc: const MSKint64t *
//
// [MSK_putdjcslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putdjcslice(
	idxfirst int64,
	idxlast int64,
	numdomidx int64,
	domidxlist *int64,
	numafeidx int64,
	afeidxlist *int64,
	b *float64,
	numterms int64,
	termsizelist *int64,
	termsindjc *int64,
) res.Code {
	return res.Code(
		C.MSK_putdjcslice(
			task.task,
			C.MSKint64t(idxfirst),
			C.MSKint64t(idxlast),
			C.MSKint64t(numdomidx),
			(*C.MSKint64t)(domidxlist),
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidxlist),
			(*C.MSKrealt)(b),
			C.MSKint64t(numterms),
			(*C.MSKint64t)(termsizelist),
			(*C.MSKint64t)(termsindjc),
		),
	)
}

// Putdomainname is wrapping [MSK_putdomainname]
// function MSK_putdomainname has following parameters:
// - task: MSKtask_t
// - domidx: MSKint64t
// - name: const char *
//
// [MSK_putdomainname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putdomainname(
	domidx int64,
	name *byte,
) res.Code {
	return res.Code(
		C.MSK_putdomainname(
			task.task,
			C.MSKint64t(domidx),
			(*C.char)(unsafe.Pointer(name)),
		),
	)
}

// Putdouparam is wrapping [MSK_putdouparam]
// function MSK_putdouparam has following parameters:
// - task: MSKtask_t
// - param: MSKdparame
// - parvalue: MSKrealt
//
// [MSK_putdouparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putdouparam(
	param DParam,
	parvalue float64,
) res.Code {
	return res.Code(
		C.MSK_putdouparam(
			task.task,
			C.MSKdparame(param),
			C.MSKrealt(parvalue),
		),
	)
}

// Putintparam is wrapping [MSK_putintparam]
// function MSK_putintparam has following parameters:
// - task: MSKtask_t
// - param: MSKiparame
// - parvalue: MSKint32t
//
// [MSK_putintparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putintparam(
	param IParam,
	parvalue int32,
) res.Code {
	return res.Code(
		C.MSK_putintparam(
			task.task,
			C.MSKiparame(param),
			C.MSKint32t(parvalue),
		),
	)
}

// Putmaxnumacc is wrapping [MSK_putmaxnumacc]
// function MSK_putmaxnumacc has following parameters:
// - task: MSKtask_t
// - maxnumacc: MSKint64t
//
// [MSK_putmaxnumacc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putmaxnumacc(
	maxnumacc int64,
) res.Code {
	return res.Code(
		C.MSK_putmaxnumacc(
			task.task,
			C.MSKint64t(maxnumacc),
		),
	)
}

// Putmaxnumafe is wrapping [MSK_putmaxnumafe]
// function MSK_putmaxnumafe has following parameters:
// - task: MSKtask_t
// - maxnumafe: MSKint64t
//
// [MSK_putmaxnumafe]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putmaxnumafe(
	maxnumafe int64,
) res.Code {
	return res.Code(
		C.MSK_putmaxnumafe(
			task.task,
			C.MSKint64t(maxnumafe),
		),
	)
}

// Putmaxnumanz is wrapping [MSK_putmaxnumanz]
// function MSK_putmaxnumanz has following parameters:
// - task: MSKtask_t
// - maxnumanz: MSKint64t
//
// [MSK_putmaxnumanz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putmaxnumanz(
	maxnumanz int64,
) res.Code {
	return res.Code(
		C.MSK_putmaxnumanz(
			task.task,
			C.MSKint64t(maxnumanz),
		),
	)
}

// Putmaxnumbarvar is wrapping [MSK_putmaxnumbarvar]
// function MSK_putmaxnumbarvar has following parameters:
// - task: MSKtask_t
// - maxnumbarvar: MSKint32t
//
// [MSK_putmaxnumbarvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putmaxnumbarvar(
	maxnumbarvar int32,
) res.Code {
	return res.Code(
		C.MSK_putmaxnumbarvar(
			task.task,
			C.MSKint32t(maxnumbarvar),
		),
	)
}

// Putmaxnumcon is wrapping [MSK_putmaxnumcon]
// function MSK_putmaxnumcon has following parameters:
// - task: MSKtask_t
// - maxnumcon: MSKint32t
//
// [MSK_putmaxnumcon]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putmaxnumcon(
	maxnumcon int32,
) res.Code {
	return res.Code(
		C.MSK_putmaxnumcon(
			task.task,
			C.MSKint32t(maxnumcon),
		),
	)
}

// Putmaxnumcone is wrapping [MSK_putmaxnumcone]
// function MSK_putmaxnumcone has following parameters:
// - task: MSKtask_t
// - maxnumcone: MSKint32t
//
// [MSK_putmaxnumcone]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putmaxnumcone(
	maxnumcone int32,
) res.Code {
	return res.Code(
		C.MSK_putmaxnumcone(
			task.task,
			C.MSKint32t(maxnumcone),
		),
	)
}

// Putmaxnumdjc is wrapping [MSK_putmaxnumdjc]
// function MSK_putmaxnumdjc has following parameters:
// - task: MSKtask_t
// - maxnumdjc: MSKint64t
//
// [MSK_putmaxnumdjc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putmaxnumdjc(
	maxnumdjc int64,
) res.Code {
	return res.Code(
		C.MSK_putmaxnumdjc(
			task.task,
			C.MSKint64t(maxnumdjc),
		),
	)
}

// Putmaxnumdomain is wrapping [MSK_putmaxnumdomain]
// function MSK_putmaxnumdomain has following parameters:
// - task: MSKtask_t
// - maxnumdomain: MSKint64t
//
// [MSK_putmaxnumdomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putmaxnumdomain(
	maxnumdomain int64,
) res.Code {
	return res.Code(
		C.MSK_putmaxnumdomain(
			task.task,
			C.MSKint64t(maxnumdomain),
		),
	)
}

// Putmaxnumqnz is wrapping [MSK_putmaxnumqnz]
// function MSK_putmaxnumqnz has following parameters:
// - task: MSKtask_t
// - maxnumqnz: MSKint64t
//
// [MSK_putmaxnumqnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putmaxnumqnz(
	maxnumqnz int64,
) res.Code {
	return res.Code(
		C.MSK_putmaxnumqnz(
			task.task,
			C.MSKint64t(maxnumqnz),
		),
	)
}

// Putmaxnumvar is wrapping [MSK_putmaxnumvar]
// function MSK_putmaxnumvar has following parameters:
// - task: MSKtask_t
// - maxnumvar: MSKint32t
//
// [MSK_putmaxnumvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putmaxnumvar(
	maxnumvar int32,
) res.Code {
	return res.Code(
		C.MSK_putmaxnumvar(
			task.task,
			C.MSKint32t(maxnumvar),
		),
	)
}

// Putnadouparam is wrapping [MSK_putnadouparam]
// function MSK_putnadouparam has following parameters:
// - task: MSKtask_t
// - paramname: const char *
// - parvalue: MSKrealt
//
// [MSK_putnadouparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putnadouparam(
	paramname *byte,
	parvalue float64,
) res.Code {
	return res.Code(
		C.MSK_putnadouparam(
			task.task,
			(*C.char)(unsafe.Pointer(paramname)),
			C.MSKrealt(parvalue),
		),
	)
}

// Putnaintparam is wrapping [MSK_putnaintparam]
// function MSK_putnaintparam has following parameters:
// - task: MSKtask_t
// - paramname: const char *
// - parvalue: MSKint32t
//
// [MSK_putnaintparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putnaintparam(
	paramname *byte,
	parvalue int32,
) res.Code {
	return res.Code(
		C.MSK_putnaintparam(
			task.task,
			(*C.char)(unsafe.Pointer(paramname)),
			C.MSKint32t(parvalue),
		),
	)
}

// Putnastrparam is wrapping [MSK_putnastrparam]
// function MSK_putnastrparam has following parameters:
// - task: MSKtask_t
// - paramname: const char *
// - parvalue: const char *
//
// [MSK_putnastrparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putnastrparam(
	paramname *byte,
	parvalue *byte,
) res.Code {
	return res.Code(
		C.MSK_putnastrparam(
			task.task,
			(*C.char)(unsafe.Pointer(paramname)),
			(*C.char)(unsafe.Pointer(parvalue)),
		),
	)
}

// Putobjname is wrapping [MSK_putobjname]
// function MSK_putobjname has following parameters:
// - task: MSKtask_t
// - objname: const char *
//
// [MSK_putobjname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putobjname(
	objname *byte,
) res.Code {
	return res.Code(
		C.MSK_putobjname(
			task.task,
			(*C.char)(unsafe.Pointer(objname)),
		),
	)
}

// Putobjsense is wrapping [MSK_putobjsense]
// function MSK_putobjsense has following parameters:
// - task: MSKtask_t
// - sense: MSKobjsensee
//
// [MSK_putobjsense]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putobjsense(
	sense ObjectiveSense,
) res.Code {
	return res.Code(
		C.MSK_putobjsense(
			task.task,
			C.MSKobjsensee(sense),
		),
	)
}

// Putoptserverhost is wrapping [MSK_putoptserverhost]
// function MSK_putoptserverhost has following parameters:
// - task: MSKtask_t
// - host: const char *
//
// [MSK_putoptserverhost]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putoptserverhost(
	host *byte,
) res.Code {
	return res.Code(
		C.MSK_putoptserverhost(
			task.task,
			(*C.char)(unsafe.Pointer(host)),
		),
	)
}

// Putparam is wrapping [MSK_putparam]
// function MSK_putparam has following parameters:
// - task: MSKtask_t
// - parname: const char *
// - parvalue: const char *
//
// [MSK_putparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putparam(
	parname *byte,
	parvalue *byte,
) res.Code {
	return res.Code(
		C.MSK_putparam(
			task.task,
			(*C.char)(unsafe.Pointer(parname)),
			(*C.char)(unsafe.Pointer(parvalue)),
		),
	)
}

// Putqcon is wrapping [MSK_putqcon]
// function MSK_putqcon has following parameters:
// - task: MSKtask_t
// - numqcnz: MSKint32t
// - qcsubk: const MSKint32t *
// - qcsubi: const MSKint32t *
// - qcsubj: const MSKint32t *
// - qcval: const MSKrealt *
//
// [MSK_putqcon]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putqcon(
	numqcnz int32,
	qcsubk *int32,
	qcsubi *int32,
	qcsubj *int32,
	qcval *float64,
) res.Code {
	return res.Code(
		C.MSK_putqcon(
			task.task,
			C.MSKint32t(numqcnz),
			(*C.MSKint32t)(qcsubk),
			(*C.MSKint32t)(qcsubi),
			(*C.MSKint32t)(qcsubj),
			(*C.MSKrealt)(qcval),
		),
	)
}

// Putqconk is wrapping [MSK_putqconk]
// function MSK_putqconk has following parameters:
// - task: MSKtask_t
// - k: MSKint32t
// - numqcnz: MSKint32t
// - qcsubi: const MSKint32t *
// - qcsubj: const MSKint32t *
// - qcval: const MSKrealt *
//
// [MSK_putqconk]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putqconk(
	k int32,
	numqcnz int32,
	qcsubi *int32,
	qcsubj *int32,
	qcval *float64,
) res.Code {
	return res.Code(
		C.MSK_putqconk(
			task.task,
			C.MSKint32t(k),
			C.MSKint32t(numqcnz),
			(*C.MSKint32t)(qcsubi),
			(*C.MSKint32t)(qcsubj),
			(*C.MSKrealt)(qcval),
		),
	)
}

// Putqobj is wrapping [MSK_putqobj]
// function MSK_putqobj has following parameters:
// - task: MSKtask_t
// - numqonz: MSKint32t
// - qosubi: const MSKint32t *
// - qosubj: const MSKint32t *
// - qoval: const MSKrealt *
//
// [MSK_putqobj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putqobj(
	numqonz int32,
	qosubi *int32,
	qosubj *int32,
	qoval *float64,
) res.Code {
	return res.Code(
		C.MSK_putqobj(
			task.task,
			C.MSKint32t(numqonz),
			(*C.MSKint32t)(qosubi),
			(*C.MSKint32t)(qosubj),
			(*C.MSKrealt)(qoval),
		),
	)
}

// Putqobjij is wrapping [MSK_putqobjij]
// function MSK_putqobjij has following parameters:
// - task: MSKtask_t
// - i: MSKint32t
// - j: MSKint32t
// - qoij: MSKrealt
//
// [MSK_putqobjij]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putqobjij(
	i int32,
	j int32,
	qoij float64,
) res.Code {
	return res.Code(
		C.MSK_putqobjij(
			task.task,
			C.MSKint32t(i),
			C.MSKint32t(j),
			C.MSKrealt(qoij),
		),
	)
}

// Putskc is wrapping [MSK_putskc]
// function MSK_putskc has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - skc: const MSKstakeye *
//
// [MSK_putskc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putskc(
	whichsol SolType,
	skc *StaKey,
) res.Code {
	return res.Code(
		C.MSK_putskc(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKstakeye)(skc),
		),
	)
}

// Putskcslice is wrapping [MSK_putskcslice]
// function MSK_putskcslice has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - first: MSKint32t
// - last: MSKint32t
// - skc: const MSKstakeye *
//
// [MSK_putskcslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putskcslice(
	whichsol SolType,
	first int32,
	last int32,
	skc *StaKey,
) res.Code {
	return res.Code(
		C.MSK_putskcslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKstakeye)(skc),
		),
	)
}

// Putskx is wrapping [MSK_putskx]
// function MSK_putskx has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - skx: const MSKstakeye *
//
// [MSK_putskx]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putskx(
	whichsol SolType,
	skx *StaKey,
) res.Code {
	return res.Code(
		C.MSK_putskx(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKstakeye)(skx),
		),
	)
}

// Putskxslice is wrapping [MSK_putskxslice]
// function MSK_putskxslice has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - first: MSKint32t
// - last: MSKint32t
// - skx: const MSKstakeye *
//
// [MSK_putskxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putskxslice(
	whichsol SolType,
	first int32,
	last int32,
	skx *StaKey,
) res.Code {
	return res.Code(
		C.MSK_putskxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKstakeye)(skx),
		),
	)
}

// Putslc is wrapping [MSK_putslc]
// function MSK_putslc has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - slc: const MSKrealt *
//
// [MSK_putslc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putslc(
	whichsol SolType,
	slc *float64,
) res.Code {
	return res.Code(
		C.MSK_putslc(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(slc),
		),
	)
}

// Putslcslice is wrapping [MSK_putslcslice]
// function MSK_putslcslice has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - first: MSKint32t
// - last: MSKint32t
// - slc: const MSKrealt *
//
// [MSK_putslcslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putslcslice(
	whichsol SolType,
	first int32,
	last int32,
	slc *float64,
) res.Code {
	return res.Code(
		C.MSK_putslcslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(slc),
		),
	)
}

// Putslx is wrapping [MSK_putslx]
// function MSK_putslx has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - slx: const MSKrealt *
//
// [MSK_putslx]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putslx(
	whichsol SolType,
	slx *float64,
) res.Code {
	return res.Code(
		C.MSK_putslx(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(slx),
		),
	)
}

// Putslxslice is wrapping [MSK_putslxslice]
// function MSK_putslxslice has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - first: MSKint32t
// - last: MSKint32t
// - slx: const MSKrealt *
//
// [MSK_putslxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putslxslice(
	whichsol SolType,
	first int32,
	last int32,
	slx *float64,
) res.Code {
	return res.Code(
		C.MSK_putslxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(slx),
		),
	)
}

// Putsnx is wrapping [MSK_putsnx]
// function MSK_putsnx has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - sux: const MSKrealt *
//
// [MSK_putsnx]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putsnx(
	whichsol SolType,
	sux *float64,
) res.Code {
	return res.Code(
		C.MSK_putsnx(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(sux),
		),
	)
}

// Putsnxslice is wrapping [MSK_putsnxslice]
// function MSK_putsnxslice has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - first: MSKint32t
// - last: MSKint32t
// - snx: const MSKrealt *
//
// [MSK_putsnxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putsnxslice(
	whichsol SolType,
	first int32,
	last int32,
	snx *float64,
) res.Code {
	return res.Code(
		C.MSK_putsnxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(snx),
		),
	)
}

// Putsolution is wrapping [MSK_putsolution]
// function MSK_putsolution has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - skc: const MSKstakeye *
// - skx: const MSKstakeye *
// - skn: const MSKstakeye *
// - xc: const MSKrealt *
// - xx: const MSKrealt *
// - y: const MSKrealt *
// - slc: const MSKrealt *
// - suc: const MSKrealt *
// - slx: const MSKrealt *
// - sux: const MSKrealt *
// - snx: const MSKrealt *
//
// [MSK_putsolution]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putsolution(
	whichsol SolType,
	skc *StaKey,
	skx *StaKey,
	skn *StaKey,
	xc *float64,
	xx *float64,
	y *float64,
	slc *float64,
	suc *float64,
	slx *float64,
	sux *float64,
	snx *float64,
) res.Code {
	return res.Code(
		C.MSK_putsolution(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKstakeye)(skc),
			(*C.MSKstakeye)(skx),
			(*C.MSKstakeye)(skn),
			(*C.MSKrealt)(xc),
			(*C.MSKrealt)(xx),
			(*C.MSKrealt)(y),
			(*C.MSKrealt)(slc),
			(*C.MSKrealt)(suc),
			(*C.MSKrealt)(slx),
			(*C.MSKrealt)(sux),
			(*C.MSKrealt)(snx),
		),
	)
}

// Putsolutionnew is wrapping [MSK_putsolutionnew]
// function MSK_putsolutionnew has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - skc: const MSKstakeye *
// - skx: const MSKstakeye *
// - skn: const MSKstakeye *
// - xc: const MSKrealt *
// - xx: const MSKrealt *
// - y: const MSKrealt *
// - slc: const MSKrealt *
// - suc: const MSKrealt *
// - slx: const MSKrealt *
// - sux: const MSKrealt *
// - snx: const MSKrealt *
// - doty: const MSKrealt *
//
// [MSK_putsolutionnew]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putsolutionnew(
	whichsol SolType,
	skc *StaKey,
	skx *StaKey,
	skn *StaKey,
	xc *float64,
	xx *float64,
	y *float64,
	slc *float64,
	suc *float64,
	slx *float64,
	sux *float64,
	snx *float64,
	doty *float64,
) res.Code {
	return res.Code(
		C.MSK_putsolutionnew(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKstakeye)(skc),
			(*C.MSKstakeye)(skx),
			(*C.MSKstakeye)(skn),
			(*C.MSKrealt)(xc),
			(*C.MSKrealt)(xx),
			(*C.MSKrealt)(y),
			(*C.MSKrealt)(slc),
			(*C.MSKrealt)(suc),
			(*C.MSKrealt)(slx),
			(*C.MSKrealt)(sux),
			(*C.MSKrealt)(snx),
			(*C.MSKrealt)(doty),
		),
	)
}

// Putsolutionyi is wrapping [MSK_putsolutionyi]
// function MSK_putsolutionyi has following parameters:
// - task: MSKtask_t
// - i: MSKint32t
// - whichsol: MSKsoltypee
// - y: MSKrealt
//
// [MSK_putsolutionyi]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putsolutionyi(
	i int32,
	whichsol SolType,
	y float64,
) res.Code {
	return res.Code(
		C.MSK_putsolutionyi(
			task.task,
			C.MSKint32t(i),
			C.MSKsoltypee(whichsol),
			C.MSKrealt(y),
		),
	)
}

// Putstrparam is wrapping [MSK_putstrparam]
// function MSK_putstrparam has following parameters:
// - task: MSKtask_t
// - param: MSKsparame
// - parvalue: const char *
//
// [MSK_putstrparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putstrparam(
	param SParam,
	parvalue *byte,
) res.Code {
	return res.Code(
		C.MSK_putstrparam(
			task.task,
			C.MSKsparame(param),
			(*C.char)(unsafe.Pointer(parvalue)),
		),
	)
}

// Putsuc is wrapping [MSK_putsuc]
// function MSK_putsuc has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - suc: const MSKrealt *
//
// [MSK_putsuc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putsuc(
	whichsol SolType,
	suc *float64,
) res.Code {
	return res.Code(
		C.MSK_putsuc(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(suc),
		),
	)
}

// Putsucslice is wrapping [MSK_putsucslice]
// function MSK_putsucslice has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - first: MSKint32t
// - last: MSKint32t
// - suc: const MSKrealt *
//
// [MSK_putsucslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putsucslice(
	whichsol SolType,
	first int32,
	last int32,
	suc *float64,
) res.Code {
	return res.Code(
		C.MSK_putsucslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(suc),
		),
	)
}

// Putsux is wrapping [MSK_putsux]
// function MSK_putsux has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - sux: const MSKrealt *
//
// [MSK_putsux]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putsux(
	whichsol SolType,
	sux *float64,
) res.Code {
	return res.Code(
		C.MSK_putsux(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(sux),
		),
	)
}

// Putsuxslice is wrapping [MSK_putsuxslice]
// function MSK_putsuxslice has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - first: MSKint32t
// - last: MSKint32t
// - sux: const MSKrealt *
//
// [MSK_putsuxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putsuxslice(
	whichsol SolType,
	first int32,
	last int32,
	sux *float64,
) res.Code {
	return res.Code(
		C.MSK_putsuxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(sux),
		),
	)
}

// Puttaskname is wrapping [MSK_puttaskname]
// function MSK_puttaskname has following parameters:
// - task: MSKtask_t
// - taskname: const char *
//
// [MSK_puttaskname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Puttaskname(
	taskname *byte,
) res.Code {
	return res.Code(
		C.MSK_puttaskname(
			task.task,
			(*C.char)(unsafe.Pointer(taskname)),
		),
	)
}

// Putvarbound is wrapping [MSK_putvarbound]
// function MSK_putvarbound has following parameters:
// - task: MSKtask_t
// - j: MSKint32t
// - bkx: MSKboundkeye
// - blx: MSKrealt
// - bux: MSKrealt
//
// [MSK_putvarbound]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putvarbound(
	j int32,
	bkx BoundKey,
	blx float64,
	bux float64,
) res.Code {
	return res.Code(
		C.MSK_putvarbound(
			task.task,
			C.MSKint32t(j),
			C.MSKboundkeye(bkx),
			C.MSKrealt(blx),
			C.MSKrealt(bux),
		),
	)
}

// Putvarboundlist is wrapping [MSK_putvarboundlist]
// function MSK_putvarboundlist has following parameters:
// - task: MSKtask_t
// - num: MSKint32t
// - sub: const MSKint32t *
// - bkx: const MSKboundkeye *
// - blx: const MSKrealt *
// - bux: const MSKrealt *
//
// [MSK_putvarboundlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putvarboundlist(
	num int32,
	sub *int32,
	bkx *BoundKey,
	blx *float64,
	bux *float64,
) res.Code {
	return res.Code(
		C.MSK_putvarboundlist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKboundkeye)(bkx),
			(*C.MSKrealt)(blx),
			(*C.MSKrealt)(bux),
		),
	)
}

// Putvarboundlistconst is wrapping [MSK_putvarboundlistconst]
// function MSK_putvarboundlistconst has following parameters:
// - task: MSKtask_t
// - num: MSKint32t
// - sub: const MSKint32t *
// - bkx: MSKboundkeye
// - blx: MSKrealt
// - bux: MSKrealt
//
// [MSK_putvarboundlistconst]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putvarboundlistconst(
	num int32,
	sub *int32,
	bkx BoundKey,
	blx float64,
	bux float64,
) res.Code {
	return res.Code(
		C.MSK_putvarboundlistconst(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			C.MSKboundkeye(bkx),
			C.MSKrealt(blx),
			C.MSKrealt(bux),
		),
	)
}

// Putvarboundslice is wrapping [MSK_putvarboundslice]
// function MSK_putvarboundslice has following parameters:
// - task: MSKtask_t
// - first: MSKint32t
// - last: MSKint32t
// - bkx: const MSKboundkeye *
// - blx: const MSKrealt *
// - bux: const MSKrealt *
//
// [MSK_putvarboundslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putvarboundslice(
	first int32,
	last int32,
	bkx *BoundKey,
	blx *float64,
	bux *float64,
) res.Code {
	return res.Code(
		C.MSK_putvarboundslice(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKboundkeye)(bkx),
			(*C.MSKrealt)(blx),
			(*C.MSKrealt)(bux),
		),
	)
}

// Putvarboundsliceconst is wrapping [MSK_putvarboundsliceconst]
// function MSK_putvarboundsliceconst has following parameters:
// - task: MSKtask_t
// - first: MSKint32t
// - last: MSKint32t
// - bkx: MSKboundkeye
// - blx: MSKrealt
// - bux: MSKrealt
//
// [MSK_putvarboundsliceconst]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putvarboundsliceconst(
	first int32,
	last int32,
	bkx BoundKey,
	blx float64,
	bux float64,
) res.Code {
	return res.Code(
		C.MSK_putvarboundsliceconst(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			C.MSKboundkeye(bkx),
			C.MSKrealt(blx),
			C.MSKrealt(bux),
		),
	)
}

// Putvarname is wrapping [MSK_putvarname]
// function MSK_putvarname has following parameters:
// - task: MSKtask_t
// - j: MSKint32t
// - name: const char *
//
// [MSK_putvarname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putvarname(
	j int32,
	name *byte,
) res.Code {
	return res.Code(
		C.MSK_putvarname(
			task.task,
			C.MSKint32t(j),
			(*C.char)(unsafe.Pointer(name)),
		),
	)
}

// Putvarsolutionj is wrapping [MSK_putvarsolutionj]
// function MSK_putvarsolutionj has following parameters:
// - task: MSKtask_t
// - j: MSKint32t
// - whichsol: MSKsoltypee
// - sk: MSKstakeye
// - x: MSKrealt
// - sl: MSKrealt
// - su: MSKrealt
// - sn: MSKrealt
//
// [MSK_putvarsolutionj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putvarsolutionj(
	j int32,
	whichsol SolType,
	sk StaKey,
	x float64,
	sl float64,
	su float64,
	sn float64,
) res.Code {
	return res.Code(
		C.MSK_putvarsolutionj(
			task.task,
			C.MSKint32t(j),
			C.MSKsoltypee(whichsol),
			C.MSKstakeye(sk),
			C.MSKrealt(x),
			C.MSKrealt(sl),
			C.MSKrealt(su),
			C.MSKrealt(sn),
		),
	)
}

// Putvartype is wrapping [MSK_putvartype]
// function MSK_putvartype has following parameters:
// - task: MSKtask_t
// - j: MSKint32t
// - vartype: MSKvariabletypee
//
// [MSK_putvartype]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putvartype(
	j int32,
	vartype VariableType,
) res.Code {
	return res.Code(
		C.MSK_putvartype(
			task.task,
			C.MSKint32t(j),
			C.MSKvariabletypee(vartype),
		),
	)
}

// Putvartypelist is wrapping [MSK_putvartypelist]
// function MSK_putvartypelist has following parameters:
// - task: MSKtask_t
// - num: MSKint32t
// - subj: const MSKint32t *
// - vartype: const MSKvariabletypee *
//
// [MSK_putvartypelist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putvartypelist(
	num int32,
	subj *int32,
	vartype *VariableType,
) res.Code {
	return res.Code(
		C.MSK_putvartypelist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subj),
			(*C.MSKvariabletypee)(vartype),
		),
	)
}

// Putxc is wrapping [MSK_putxc]
// function MSK_putxc has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - xc: MSKrealt *
//
// [MSK_putxc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putxc(
	whichsol SolType,
	xc *float64,
) res.Code {
	return res.Code(
		C.MSK_putxc(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(xc),
		),
	)
}

// Putxcslice is wrapping [MSK_putxcslice]
// function MSK_putxcslice has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - first: MSKint32t
// - last: MSKint32t
// - xc: const MSKrealt *
//
// [MSK_putxcslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putxcslice(
	whichsol SolType,
	first int32,
	last int32,
	xc *float64,
) res.Code {
	return res.Code(
		C.MSK_putxcslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(xc),
		),
	)
}

// Putxx is wrapping [MSK_putxx]
// function MSK_putxx has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - xx: const MSKrealt *
//
// [MSK_putxx]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putxx(
	whichsol SolType,
	xx *float64,
) res.Code {
	return res.Code(
		C.MSK_putxx(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(xx),
		),
	)
}

// Putxxslice is wrapping [MSK_putxxslice]
// function MSK_putxxslice has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - first: MSKint32t
// - last: MSKint32t
// - xx: const MSKrealt *
//
// [MSK_putxxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putxxslice(
	whichsol SolType,
	first int32,
	last int32,
	xx *float64,
) res.Code {
	return res.Code(
		C.MSK_putxxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(xx),
		),
	)
}

// Puty is wrapping [MSK_puty]
// function MSK_puty has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - y: const MSKrealt *
//
// [MSK_puty]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Puty(
	whichsol SolType,
	y *float64,
) res.Code {
	return res.Code(
		C.MSK_puty(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(y),
		),
	)
}

// Putyslice is wrapping [MSK_putyslice]
// function MSK_putyslice has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - first: MSKint32t
// - last: MSKint32t
// - y: const MSKrealt *
//
// [MSK_putyslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Putyslice(
	whichsol SolType,
	first int32,
	last int32,
	y *float64,
) res.Code {
	return res.Code(
		C.MSK_putyslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(y),
		),
	)
}

// Readbsolution is wrapping [MSK_readbsolution]
// function MSK_readbsolution has following parameters:
// - task: MSKtask_t
// - filename: const char *
// - compress: MSKcompresstypee
//
// [MSK_readbsolution]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Readbsolution(
	filename *byte,
	compress CompressType,
) res.Code {
	return res.Code(
		C.MSK_readbsolution(
			task.task,
			(*C.char)(unsafe.Pointer(filename)),
			C.MSKcompresstypee(compress),
		),
	)
}

// Readdata is wrapping [MSK_readdata]
// function MSK_readdata has following parameters:
// - task: MSKtask_t
// - filename: const char *
//
// [MSK_readdata]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Readdata(
	filename *byte,
) res.Code {
	return res.Code(
		C.MSK_readdata(
			task.task,
			(*C.char)(unsafe.Pointer(filename)),
		),
	)
}

// Readdataautoformat is wrapping [MSK_readdataautoformat]
// function MSK_readdataautoformat has following parameters:
// - task: MSKtask_t
// - filename: const char *
//
// [MSK_readdataautoformat]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Readdataautoformat(
	filename *byte,
) res.Code {
	return res.Code(
		C.MSK_readdataautoformat(
			task.task,
			(*C.char)(unsafe.Pointer(filename)),
		),
	)
}

// Readdataformat is wrapping [MSK_readdataformat]
// function MSK_readdataformat has following parameters:
// - task: MSKtask_t
// - filename: const char *
// - format: MSKdataformate
// - compress: MSKcompresstypee
//
// [MSK_readdataformat]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Readdataformat(
	filename *byte,
	format DataFormat,
	compress CompressType,
) res.Code {
	return res.Code(
		C.MSK_readdataformat(
			task.task,
			(*C.char)(unsafe.Pointer(filename)),
			C.MSKdataformate(format),
			C.MSKcompresstypee(compress),
		),
	)
}

// Readjsonsol is wrapping [MSK_readjsonsol]
// function MSK_readjsonsol has following parameters:
// - task: MSKtask_t
// - filename: const char *
//
// [MSK_readjsonsol]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Readjsonsol(
	filename *byte,
) res.Code {
	return res.Code(
		C.MSK_readjsonsol(
			task.task,
			(*C.char)(unsafe.Pointer(filename)),
		),
	)
}

// Readjsonstring is wrapping [MSK_readjsonstring]
// function MSK_readjsonstring has following parameters:
// - task: MSKtask_t
// - data: const char *
//
// [MSK_readjsonstring]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Readjsonstring(
	data *byte,
) res.Code {
	return res.Code(
		C.MSK_readjsonstring(
			task.task,
			(*C.char)(unsafe.Pointer(data)),
		),
	)
}

// Readlpstring is wrapping [MSK_readlpstring]
// function MSK_readlpstring has following parameters:
// - task: MSKtask_t
// - data: const char *
//
// [MSK_readlpstring]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Readlpstring(
	data *byte,
) res.Code {
	return res.Code(
		C.MSK_readlpstring(
			task.task,
			(*C.char)(unsafe.Pointer(data)),
		),
	)
}

// Readopfstring is wrapping [MSK_readopfstring]
// function MSK_readopfstring has following parameters:
// - task: MSKtask_t
// - data: const char *
//
// [MSK_readopfstring]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Readopfstring(
	data *byte,
) res.Code {
	return res.Code(
		C.MSK_readopfstring(
			task.task,
			(*C.char)(unsafe.Pointer(data)),
		),
	)
}

// Readparamfile is wrapping [MSK_readparamfile]
// function MSK_readparamfile has following parameters:
// - task: MSKtask_t
// - filename: const char *
//
// [MSK_readparamfile]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Readparamfile(
	filename *byte,
) res.Code {
	return res.Code(
		C.MSK_readparamfile(
			task.task,
			(*C.char)(unsafe.Pointer(filename)),
		),
	)
}

// Readptfstring is wrapping [MSK_readptfstring]
// function MSK_readptfstring has following parameters:
// - task: MSKtask_t
// - data: const char *
//
// [MSK_readptfstring]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Readptfstring(
	data *byte,
) res.Code {
	return res.Code(
		C.MSK_readptfstring(
			task.task,
			(*C.char)(unsafe.Pointer(data)),
		),
	)
}

// Readsolution is wrapping [MSK_readsolution]
// function MSK_readsolution has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - filename: const char *
//
// [MSK_readsolution]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Readsolution(
	whichsol SolType,
	filename *byte,
) res.Code {
	return res.Code(
		C.MSK_readsolution(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.char)(unsafe.Pointer(filename)),
		),
	)
}

// Readsolutionfile is wrapping [MSK_readsolutionfile]
// function MSK_readsolutionfile has following parameters:
// - task: MSKtask_t
// - filename: const char *
//
// [MSK_readsolutionfile]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Readsolutionfile(
	filename *byte,
) res.Code {
	return res.Code(
		C.MSK_readsolutionfile(
			task.task,
			(*C.char)(unsafe.Pointer(filename)),
		),
	)
}

// Readsummary is wrapping [MSK_readsummary]
// function MSK_readsummary has following parameters:
// - task: MSKtask_t
// - whichstream: MSKstreamtypee
//
// [MSK_readsummary]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Readsummary(
	whichstream StreamType,
) res.Code {
	return res.Code(
		C.MSK_readsummary(
			task.task,
			C.MSKstreamtypee(whichstream),
		),
	)
}

// Readtask is wrapping [MSK_readtask]
// function MSK_readtask has following parameters:
// - task: MSKtask_t
// - filename: const char *
//
// [MSK_readtask]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Readtask(
	filename *byte,
) res.Code {
	return res.Code(
		C.MSK_readtask(
			task.task,
			(*C.char)(unsafe.Pointer(filename)),
		),
	)
}

// Removebarvars is wrapping [MSK_removebarvars]
// function MSK_removebarvars has following parameters:
// - task: MSKtask_t
// - num: MSKint32t
// - subset: const MSKint32t *
//
// [MSK_removebarvars]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Removebarvars(
	num int32,
	subset *int32,
) res.Code {
	return res.Code(
		C.MSK_removebarvars(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subset),
		),
	)
}

// Removecones is wrapping [MSK_removecones]
// function MSK_removecones has following parameters:
// - task: MSKtask_t
// - num: MSKint32t
// - subset: const MSKint32t *
//
// [MSK_removecones]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Removecones(
	num int32,
	subset *int32,
) res.Code {
	return res.Code(
		C.MSK_removecones(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subset),
		),
	)
}

// Removecons is wrapping [MSK_removecons]
// function MSK_removecons has following parameters:
// - task: MSKtask_t
// - num: MSKint32t
// - subset: const MSKint32t *
//
// [MSK_removecons]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Removecons(
	num int32,
	subset *int32,
) res.Code {
	return res.Code(
		C.MSK_removecons(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subset),
		),
	)
}

// Removevars is wrapping [MSK_removevars]
// function MSK_removevars has following parameters:
// - task: MSKtask_t
// - num: MSKint32t
// - subset: const MSKint32t *
//
// [MSK_removevars]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Removevars(
	num int32,
	subset *int32,
) res.Code {
	return res.Code(
		C.MSK_removevars(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subset),
		),
	)
}

// Resizetask is wrapping [MSK_resizetask]
// function MSK_resizetask has following parameters:
// - task: MSKtask_t
// - maxnumcon: MSKint32t
// - maxnumvar: MSKint32t
// - maxnumcone: MSKint32t
// - maxnumanz: MSKint64t
// - maxnumqnz: MSKint64t
//
// [MSK_resizetask]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Resizetask(
	maxnumcon int32,
	maxnumvar int32,
	maxnumcone int32,
	maxnumanz int64,
	maxnumqnz int64,
) res.Code {
	return res.Code(
		C.MSK_resizetask(
			task.task,
			C.MSKint32t(maxnumcon),
			C.MSKint32t(maxnumvar),
			C.MSKint32t(maxnumcone),
			C.MSKint64t(maxnumanz),
			C.MSKint64t(maxnumqnz),
		),
	)
}

// Sensitivityreport is wrapping [MSK_sensitivityreport]
// function MSK_sensitivityreport has following parameters:
// - task: MSKtask_t
// - whichstream: MSKstreamtypee
//
// [MSK_sensitivityreport]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Sensitivityreport(
	whichstream StreamType,
) res.Code {
	return res.Code(
		C.MSK_sensitivityreport(
			task.task,
			C.MSKstreamtypee(whichstream),
		),
	)
}

// Setdefaults is wrapping [MSK_setdefaults]
// function MSK_setdefaults has following parameters:
// - task: MSKtask_t
//
// [MSK_setdefaults]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Setdefaults() res.Code {
	return res.Code(
		C.MSK_setdefaults(
			task.task,
		),
	)
}

// Sktostr is wrapping [MSK_sktostr]
// function MSK_sktostr has following parameters:
// - task: MSKtask_t
// - sk: MSKstakeye
// - str: char *
//
// [MSK_sktostr]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Sktostr(
	sk StaKey,
	str *byte,
) res.Code {
	return res.Code(
		C.MSK_sktostr(
			task.task,
			C.MSKstakeye(sk),
			(*C.char)(unsafe.Pointer(str)),
		),
	)
}

// Solstatostr is wrapping [MSK_solstatostr]
// function MSK_solstatostr has following parameters:
// - task: MSKtask_t
// - solutionsta: MSKsolstae
// - str: char *
//
// [MSK_solstatostr]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Solstatostr(
	solutionsta SolSta,
	str *byte,
) res.Code {
	return res.Code(
		C.MSK_solstatostr(
			task.task,
			C.MSKsolstae(solutionsta),
			(*C.char)(unsafe.Pointer(str)),
		),
	)
}

// Solutiondef is wrapping [MSK_solutiondef]
// function MSK_solutiondef has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - isdef: MSKbooleant *
//
// [MSK_solutiondef]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Solutiondef(
	whichsol SolType,
	isdef *int32,
) res.Code {
	return res.Code(
		C.MSK_solutiondef(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKbooleant)(isdef),
		),
	)
}

// Solutionsummary is wrapping [MSK_solutionsummary]
// function MSK_solutionsummary has following parameters:
// - task: MSKtask_t
// - whichstream: MSKstreamtypee
//
// [MSK_solutionsummary]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Solutionsummary(
	whichstream StreamType,
) res.Code {
	return res.Code(
		C.MSK_solutionsummary(
			task.task,
			C.MSKstreamtypee(whichstream),
		),
	)
}

// Solvewithbasis is wrapping [MSK_solvewithbasis]
// function MSK_solvewithbasis has following parameters:
// - task: MSKtask_t
// - transp: MSKbooleant
// - numnz: MSKint32t
// - sub: MSKint32t *
// - val: MSKrealt *
// - numnzout: MSKint32t *
//
// [MSK_solvewithbasis]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Solvewithbasis(
	transp int32,
	numnz int32,
	sub *int32,
	val *float64,
	numnzout *int32,
) res.Code {
	return res.Code(
		C.MSK_solvewithbasis(
			task.task,
			C.MSKbooleant(transp),
			C.MSKint32t(numnz),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(val),
			(*C.MSKint32t)(numnzout),
		),
	)
}

// Strtoconetype is wrapping [MSK_strtoconetype]
// function MSK_strtoconetype has following parameters:
// - task: MSKtask_t
// - str: const char *
// - conetype: MSKconetypee *
//
// [MSK_strtoconetype]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Strtoconetype(
	str *byte,
	conetype *ConeType,
) res.Code {
	return res.Code(
		C.MSK_strtoconetype(
			task.task,
			(*C.char)(unsafe.Pointer(str)),
			(*C.MSKconetypee)(conetype),
		),
	)
}

// Strtosk is wrapping [MSK_strtosk]
// function MSK_strtosk has following parameters:
// - task: MSKtask_t
// - str: const char *
// - sk: MSKstakeye *
//
// [MSK_strtosk]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Strtosk(
	str *byte,
	sk *StaKey,
) res.Code {
	return res.Code(
		C.MSK_strtosk(
			task.task,
			(*C.char)(unsafe.Pointer(str)),
			(*C.MSKstakeye)(sk),
		),
	)
}

// Toconic is wrapping [MSK_toconic]
// function MSK_toconic has following parameters:
// - task: MSKtask_t
//
// [MSK_toconic]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Toconic() res.Code {
	return res.Code(
		C.MSK_toconic(
			task.task,
		),
	)
}

// Unlinkfuncfromtaskstream is wrapping [MSK_unlinkfuncfromtaskstream]
// function MSK_unlinkfuncfromtaskstream has following parameters:
// - task: MSKtask_t
// - whichstream: MSKstreamtypee
//
// [MSK_unlinkfuncfromtaskstream]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Unlinkfuncfromtaskstream(
	whichstream StreamType,
) res.Code {
	return res.Code(
		C.MSK_unlinkfuncfromtaskstream(
			task.task,
			C.MSKstreamtypee(whichstream),
		),
	)
}

// Updatesolutioninfo is wrapping [MSK_updatesolutioninfo]
// function MSK_updatesolutioninfo has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
//
// [MSK_updatesolutioninfo]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Updatesolutioninfo(
	whichsol SolType,
) res.Code {
	return res.Code(
		C.MSK_updatesolutioninfo(
			task.task,
			C.MSKsoltypee(whichsol),
		),
	)
}

// Whichparam is wrapping [MSK_whichparam]
// function MSK_whichparam has following parameters:
// - task: MSKtask_t
// - parname: const char *
// - partype: MSKparametertypee *
// - param: MSKint32t *
//
// [MSK_whichparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Whichparam(
	parname *byte,
	partype *ParameterType,
	param *int32,
) res.Code {
	return res.Code(
		C.MSK_whichparam(
			task.task,
			(*C.char)(unsafe.Pointer(parname)),
			(*C.MSKparametertypee)(partype),
			(*C.MSKint32t)(param),
		),
	)
}

// Writebsolution is wrapping [MSK_writebsolution]
// function MSK_writebsolution has following parameters:
// - task: MSKtask_t
// - filename: const char *
// - compress: MSKcompresstypee
//
// [MSK_writebsolution]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Writebsolution(
	filename *byte,
	compress CompressType,
) res.Code {
	return res.Code(
		C.MSK_writebsolution(
			task.task,
			(*C.char)(unsafe.Pointer(filename)),
			C.MSKcompresstypee(compress),
		),
	)
}

// Writedata is wrapping [MSK_writedata]
// function MSK_writedata has following parameters:
// - task: MSKtask_t
// - filename: const char *
//
// [MSK_writedata]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Writedata(
	filename *byte,
) res.Code {
	return res.Code(
		C.MSK_writedata(
			task.task,
			(*C.char)(unsafe.Pointer(filename)),
		),
	)
}

// Writejsonsol is wrapping [MSK_writejsonsol]
// function MSK_writejsonsol has following parameters:
// - task: MSKtask_t
// - filename: const char *
//
// [MSK_writejsonsol]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Writejsonsol(
	filename *byte,
) res.Code {
	return res.Code(
		C.MSK_writejsonsol(
			task.task,
			(*C.char)(unsafe.Pointer(filename)),
		),
	)
}

// Writeparamfile is wrapping [MSK_writeparamfile]
// function MSK_writeparamfile has following parameters:
// - task: MSKtask_t
// - filename: const char *
//
// [MSK_writeparamfile]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Writeparamfile(
	filename *byte,
) res.Code {
	return res.Code(
		C.MSK_writeparamfile(
			task.task,
			(*C.char)(unsafe.Pointer(filename)),
		),
	)
}

// Writesolution is wrapping [MSK_writesolution]
// function MSK_writesolution has following parameters:
// - task: MSKtask_t
// - whichsol: MSKsoltypee
// - filename: const char *
//
// [MSK_writesolution]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Writesolution(
	whichsol SolType,
	filename *byte,
) res.Code {
	return res.Code(
		C.MSK_writesolution(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.char)(unsafe.Pointer(filename)),
		),
	)
}

// Writesolutionfile is wrapping [MSK_writesolutionfile]
// function MSK_writesolutionfile has following parameters:
// - task: MSKtask_t
// - filename: const char *
//
// [MSK_writesolutionfile]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Writesolutionfile(
	filename *byte,
) res.Code {
	return res.Code(
		C.MSK_writesolutionfile(
			task.task,
			(*C.char)(unsafe.Pointer(filename)),
		),
	)
}

// Writetask is wrapping [MSK_writetask]
// function MSK_writetask has following parameters:
// - task: MSKtask_t
// - filename: const char *
//
// [MSK_writetask]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Writetask(
	filename *byte,
) res.Code {
	return res.Code(
		C.MSK_writetask(
			task.task,
			(*C.char)(unsafe.Pointer(filename)),
		),
	)
}

// Axpy is wrapping [MSK_axpy]
// function MSK_axpy has following parameters:
// - env: MSKenv_t
// - n: MSKint32t
// - alpha: MSKrealt
// - x: const MSKrealt *
// - y: MSKrealt *
//
// [MSK_axpy]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Axpy(
	n int32,
	alpha float64,
	x *float64,
	y *float64,
) res.Code {
	return res.Code(
		C.MSK_axpy(
			env.getEnv(),
			C.MSKint32t(n),
			C.MSKrealt(alpha),
			(*C.MSKrealt)(x),
			(*C.MSKrealt)(y),
		),
	)
}

// Checkinall is wrapping [MSK_checkinall]
// function MSK_checkinall has following parameters:
// - env: MSKenv_t
//
// [MSK_checkinall]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Checkinall() res.Code {
	return res.Code(
		C.MSK_checkinall(
			env.getEnv(),
		),
	)
}

// Checkinlicense is wrapping [MSK_checkinlicense]
// function MSK_checkinlicense has following parameters:
// - env: MSKenv_t
// - feature: MSKfeaturee
//
// [MSK_checkinlicense]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Checkinlicense(
	feature Feature,
) res.Code {
	return res.Code(
		C.MSK_checkinlicense(
			env.getEnv(),
			C.MSKfeaturee(feature),
		),
	)
}

// Checkmemenv is wrapping [MSK_checkmemenv]
// function MSK_checkmemenv has following parameters:
// - env: MSKenv_t
// - file: const char *
// - line: MSKint32t
//
// [MSK_checkmemenv]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Checkmemenv(
	file *byte,
	line int32,
) res.Code {
	return res.Code(
		C.MSK_checkmemenv(
			env.getEnv(),
			(*C.char)(unsafe.Pointer(file)),
			C.MSKint32t(line),
		),
	)
}

// Checkoutlicense is wrapping [MSK_checkoutlicense]
// function MSK_checkoutlicense has following parameters:
// - env: MSKenv_t
// - feature: MSKfeaturee
//
// [MSK_checkoutlicense]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Checkoutlicense(
	feature Feature,
) res.Code {
	return res.Code(
		C.MSK_checkoutlicense(
			env.getEnv(),
			C.MSKfeaturee(feature),
		),
	)
}

// Checkversion is wrapping [MSK_checkversion]
// function MSK_checkversion has following parameters:
// - env: MSKenv_t
// - major: MSKint32t
// - minor: MSKint32t
// - revision: MSKint32t
//
// [MSK_checkversion]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Checkversion(
	major int32,
	minor int32,
	revision int32,
) res.Code {
	return res.Code(
		C.MSK_checkversion(
			env.getEnv(),
			C.MSKint32t(major),
			C.MSKint32t(minor),
			C.MSKint32t(revision),
		),
	)
}

// Dot is wrapping [MSK_dot]
// function MSK_dot has following parameters:
// - env: MSKenv_t
// - n: MSKint32t
// - x: const MSKrealt *
// - y: const MSKrealt *
// - xty: MSKrealt *
//
// [MSK_dot]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Dot(
	n int32,
	x *float64,
	y *float64,
) (r res.Code, xty float64) {
	r = res.Code(
		C.MSK_dot(
			env.getEnv(),
			C.MSKint32t(n),
			(*C.MSKrealt)(x),
			(*C.MSKrealt)(y),
			(*C.MSKrealt)(&xty),
		),
	)
	return
}

// Echointro is wrapping [MSK_echointro]
// function MSK_echointro has following parameters:
// - env: MSKenv_t
// - longver: MSKint32t
//
// [MSK_echointro]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Echointro(
	longver int32,
) res.Code {
	return res.Code(
		C.MSK_echointro(
			env.getEnv(),
			C.MSKint32t(longver),
		),
	)
}

// Expirylicenses is wrapping [MSK_expirylicenses]
// function MSK_expirylicenses has following parameters:
// - env: MSKenv_t
// - expiry: MSKint64t *
//
// [MSK_expirylicenses]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Expirylicenses(
	expiry *int64,
) res.Code {
	return res.Code(
		C.MSK_expirylicenses(
			env.getEnv(),
			(*C.MSKint64t)(expiry),
		),
	)
}

// Gemm is wrapping [MSK_gemm]
// function MSK_gemm has following parameters:
// - env: MSKenv_t
// - transa: MSKtransposee
// - transb: MSKtransposee
// - m: MSKint32t
// - n: MSKint32t
// - k: MSKint32t
// - alpha: MSKrealt
// - a: const MSKrealt *
// - b: const MSKrealt *
// - beta: MSKrealt
// - c: MSKrealt *
//
// [MSK_gemm]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Gemm(
	transa Transpose,
	transb Transpose,
	m int32,
	n int32,
	k int32,
	alpha float64,
	a *float64,
	b *float64,
	beta float64,
	c *float64,
) res.Code {
	return res.Code(
		C.MSK_gemm(
			env.getEnv(),
			C.MSKtransposee(transa),
			C.MSKtransposee(transb),
			C.MSKint32t(m),
			C.MSKint32t(n),
			C.MSKint32t(k),
			C.MSKrealt(alpha),
			(*C.MSKrealt)(a),
			(*C.MSKrealt)(b),
			C.MSKrealt(beta),
			(*C.MSKrealt)(c),
		),
	)
}

// Gemv is wrapping [MSK_gemv]
// function MSK_gemv has following parameters:
// - env: MSKenv_t
// - transa: MSKtransposee
// - m: MSKint32t
// - n: MSKint32t
// - alpha: MSKrealt
// - a: const MSKrealt *
// - x: const MSKrealt *
// - beta: MSKrealt
// - y: MSKrealt *
//
// [MSK_gemv]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Gemv(
	transa Transpose,
	m int32,
	n int32,
	alpha float64,
	a *float64,
	x *float64,
	beta float64,
	y *float64,
) res.Code {
	return res.Code(
		C.MSK_gemv(
			env.getEnv(),
			C.MSKtransposee(transa),
			C.MSKint32t(m),
			C.MSKint32t(n),
			C.MSKrealt(alpha),
			(*C.MSKrealt)(a),
			(*C.MSKrealt)(x),
			C.MSKrealt(beta),
			(*C.MSKrealt)(y),
		),
	)
}

// Getbuildinfo is wrapping [MSK_getbuildinfo]
// function MSK_getbuildinfo has following parameters:
// - buildstate: char *
// - builddate: char *
//
// [MSK_getbuildinfo]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func Getbuildinfo(
	buildstate *byte,
	builddate *byte,
) res.Code {
	return res.Code(
		C.MSK_getbuildinfo(
			(*C.char)(unsafe.Pointer(buildstate)),
			(*C.char)(unsafe.Pointer(builddate)),
		),
	)
}

// Getcodedesc is wrapping [MSK_getcodedesc]
// function MSK_getcodedesc has following parameters:
// - code: MSKrescodee
// - symname: char *
// - str: char *
//
// [MSK_getcodedesc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func Getcodedesc(
	code res.Code,
	symname *byte,
	str *byte,
) res.Code {
	return res.Code(
		C.MSK_getcodedesc(
			C.MSKrescodee(code),
			(*C.char)(unsafe.Pointer(symname)),
			(*C.char)(unsafe.Pointer(str)),
		),
	)
}

// Getresponseclass is wrapping [MSK_getresponseclass]
// function MSK_getresponseclass has following parameters:
// - r: MSKrescodee
// - rc: MSKrescodetypee *
//
// [MSK_getresponseclass]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func Getresponseclass(
	r res.Code,
	rc *ResCodeType,
) res.Code {
	return res.Code(
		C.MSK_getresponseclass(
			C.MSKrescodee(r),
			(*C.MSKrescodetypee)(rc),
		),
	)
}

// Getsymbcondim is wrapping [MSK_getsymbcondim]
// function MSK_getsymbcondim has following parameters:
// - env: MSKenv_t
// - num: MSKint32t *
// - maxlen: size_t *
//
// [MSK_getsymbcondim]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Getsymbcondim(
	num *int32,
	maxlen *uint64,
) res.Code {
	return res.Code(
		C.MSK_getsymbcondim(
			env.getEnv(),
			(*C.MSKint32t)(num),
			(*C.size_t)(maxlen),
		),
	)
}

// Getversion is wrapping [MSK_getversion]
// function MSK_getversion has following parameters:
// - major: MSKint32t *
// - minor: MSKint32t *
// - revision: MSKint32t *
//
// [MSK_getversion]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func Getversion(
	major *int32,
	minor *int32,
	revision *int32,
) res.Code {
	return res.Code(
		C.MSK_getversion(
			(*C.MSKint32t)(major),
			(*C.MSKint32t)(minor),
			(*C.MSKint32t)(revision),
		),
	)
}

// Iparvaltosymnam is wrapping [MSK_iparvaltosymnam]
// function MSK_iparvaltosymnam has following parameters:
// - env: MSKenv_t
// - whichparam: MSKiparame
// - whichvalue: MSKint32t
// - symbolicname: char *
//
// [MSK_iparvaltosymnam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Iparvaltosymnam(
	whichparam IParam,
	whichvalue int32,
	symbolicname *byte,
) res.Code {
	return res.Code(
		C.MSK_iparvaltosymnam(
			env.getEnv(),
			C.MSKiparame(whichparam),
			C.MSKint32t(whichvalue),
			(*C.char)(unsafe.Pointer(symbolicname)),
		),
	)
}

// Isinfinity is wrapping [MSK_isinfinity]
// function MSK_isinfinity has following parameters:
// - value: MSKrealt
//
// [MSK_isinfinity]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func Isinfinity(
	value float64,
) int32 {
	return int32(
		C.MSK_isinfinity(
			C.MSKrealt(value),
		),
	)
}

// Licensecleanup is wrapping [MSK_licensecleanup]
// function MSK_licensecleanup has following parameters:
//
// [MSK_licensecleanup]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func Licensecleanup() res.Code {
	return res.Code(
		C.MSK_licensecleanup(),
	)
}

// Linkfiletoenvstream is wrapping [MSK_linkfiletoenvstream]
// function MSK_linkfiletoenvstream has following parameters:
// - env: MSKenv_t
// - whichstream: MSKstreamtypee
// - filename: const char *
// - append: MSKint32t
//
// [MSK_linkfiletoenvstream]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Linkfiletoenvstream(
	whichstream StreamType,
	filename *byte,
	append int32,
) res.Code {
	return res.Code(
		C.MSK_linkfiletoenvstream(
			env.getEnv(),
			C.MSKstreamtypee(whichstream),
			(*C.char)(unsafe.Pointer(filename)),
			C.MSKint32t(append),
		),
	)
}

// Potrf is wrapping [MSK_potrf]
// function MSK_potrf has following parameters:
// - env: MSKenv_t
// - uplo: MSKuploe
// - n: MSKint32t
// - a: MSKrealt *
//
// [MSK_potrf]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Potrf(
	uplo UpLo,
	n int32,
	a *float64,
) res.Code {
	return res.Code(
		C.MSK_potrf(
			env.getEnv(),
			C.MSKuploe(uplo),
			C.MSKint32t(n),
			(*C.MSKrealt)(a),
		),
	)
}

// Putlicensecode is wrapping [MSK_putlicensecode]
// function MSK_putlicensecode has following parameters:
// - env: MSKenv_t
// - code: const MSKint32t *
//
// [MSK_putlicensecode]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Putlicensecode(
	code *int32,
) res.Code {
	return res.Code(
		C.MSK_putlicensecode(
			env.getEnv(),
			(*C.MSKint32t)(code),
		),
	)
}

// Putlicensedebug is wrapping [MSK_putlicensedebug]
// function MSK_putlicensedebug has following parameters:
// - env: MSKenv_t
// - licdebug: MSKint32t
//
// [MSK_putlicensedebug]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Putlicensedebug(
	licdebug int32,
) res.Code {
	return res.Code(
		C.MSK_putlicensedebug(
			env.getEnv(),
			C.MSKint32t(licdebug),
		),
	)
}

// Putlicensepath is wrapping [MSK_putlicensepath]
// function MSK_putlicensepath has following parameters:
// - env: MSKenv_t
// - licensepath: const char *
//
// [MSK_putlicensepath]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Putlicensepath(
	licensepath *byte,
) res.Code {
	return res.Code(
		C.MSK_putlicensepath(
			env.getEnv(),
			(*C.char)(unsafe.Pointer(licensepath)),
		),
	)
}

// Putlicensewait is wrapping [MSK_putlicensewait]
// function MSK_putlicensewait has following parameters:
// - env: MSKenv_t
// - licwait: MSKint32t
//
// [MSK_putlicensewait]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Putlicensewait(
	licwait int32,
) res.Code {
	return res.Code(
		C.MSK_putlicensewait(
			env.getEnv(),
			C.MSKint32t(licwait),
		),
	)
}

// Resetexpirylicenses is wrapping [MSK_resetexpirylicenses]
// function MSK_resetexpirylicenses has following parameters:
// - env: MSKenv_t
//
// [MSK_resetexpirylicenses]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Resetexpirylicenses() res.Code {
	return res.Code(
		C.MSK_resetexpirylicenses(
			env.getEnv(),
		),
	)
}

// Sparsetriangularsolvedense is wrapping [MSK_sparsetriangularsolvedense]
// function MSK_sparsetriangularsolvedense has following parameters:
// - env: MSKenv_t
// - transposed: MSKtransposee
// - n: MSKint32t
// - lnzc: const MSKint32t *
// - lptrc: const MSKint64t *
// - lensubnval: MSKint64t
// - lsubc: const MSKint32t *
// - lvalc: const MSKrealt *
// - b: MSKrealt *
//
// [MSK_sparsetriangularsolvedense]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Sparsetriangularsolvedense(
	transposed Transpose,
	n int32,
	lnzc *int32,
	lptrc *int64,
	lensubnval int64,
	lsubc *int32,
	lvalc *float64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_sparsetriangularsolvedense(
			env.getEnv(),
			C.MSKtransposee(transposed),
			C.MSKint32t(n),
			(*C.MSKint32t)(lnzc),
			(*C.MSKint64t)(lptrc),
			C.MSKint64t(lensubnval),
			(*C.MSKint32t)(lsubc),
			(*C.MSKrealt)(lvalc),
			(*C.MSKrealt)(b),
		),
	)
}

// Syeig is wrapping [MSK_syeig]
// function MSK_syeig has following parameters:
// - env: MSKenv_t
// - uplo: MSKuploe
// - n: MSKint32t
// - a: const MSKrealt *
// - w: MSKrealt *
//
// [MSK_syeig]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Syeig(
	uplo UpLo,
	n int32,
	a *float64,
	w *float64,
) res.Code {
	return res.Code(
		C.MSK_syeig(
			env.getEnv(),
			C.MSKuploe(uplo),
			C.MSKint32t(n),
			(*C.MSKrealt)(a),
			(*C.MSKrealt)(w),
		),
	)
}

// Syevd is wrapping [MSK_syevd]
// function MSK_syevd has following parameters:
// - env: MSKenv_t
// - uplo: MSKuploe
// - n: MSKint32t
// - a: MSKrealt *
// - w: MSKrealt *
//
// [MSK_syevd]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Syevd(
	uplo UpLo,
	n int32,
	a *float64,
	w *float64,
) res.Code {
	return res.Code(
		C.MSK_syevd(
			env.getEnv(),
			C.MSKuploe(uplo),
			C.MSKint32t(n),
			(*C.MSKrealt)(a),
			(*C.MSKrealt)(w),
		),
	)
}

// Symnamtovalue is wrapping [MSK_symnamtovalue]
// function MSK_symnamtovalue has following parameters:
// - name: const char *
// - value: char *
//
// [MSK_symnamtovalue]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func Symnamtovalue(
	name *byte,
	value *byte,
) int32 {
	return int32(
		C.MSK_symnamtovalue(
			(*C.char)(unsafe.Pointer(name)),
			(*C.char)(unsafe.Pointer(value)),
		),
	)
}

// Syrk is wrapping [MSK_syrk]
// function MSK_syrk has following parameters:
// - env: MSKenv_t
// - uplo: MSKuploe
// - trans: MSKtransposee
// - n: MSKint32t
// - k: MSKint32t
// - alpha: MSKrealt
// - a: const MSKrealt *
// - beta: MSKrealt
// - c: MSKrealt *
//
// [MSK_syrk]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Syrk(
	uplo UpLo,
	trans Transpose,
	n int32,
	k int32,
	alpha float64,
	a *float64,
	beta float64,
	c *float64,
) res.Code {
	return res.Code(
		C.MSK_syrk(
			env.getEnv(),
			C.MSKuploe(uplo),
			C.MSKtransposee(trans),
			C.MSKint32t(n),
			C.MSKint32t(k),
			C.MSKrealt(alpha),
			(*C.MSKrealt)(a),
			C.MSKrealt(beta),
			(*C.MSKrealt)(c),
		),
	)
}

// Unlinkfuncfromenvstream is wrapping [MSK_unlinkfuncfromenvstream]
// function MSK_unlinkfuncfromenvstream has following parameters:
// - env: MSKenv_t
// - whichstream: MSKstreamtypee
//
// [MSK_unlinkfuncfromenvstream]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Unlinkfuncfromenvstream(
	whichstream StreamType,
) res.Code {
	return res.Code(
		C.MSK_unlinkfuncfromenvstream(
			env.getEnv(),
			C.MSKstreamtypee(whichstream),
		),
	)
}

// Utf8towchar is wrapping [MSK_utf8towchar]
// function MSK_utf8towchar has following parameters:
// - outputlen: size_t
// - len: size_t *
// - conv: size_t *
// - output: MSKwchart *
// - input: const char *
//
// [MSK_utf8towchar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func Utf8towchar(
	outputlen uint64,
	len *uint64,
	conv *uint64,
	output *int32,
	input *byte,
) res.Code {
	return res.Code(
		C.MSK_utf8towchar(
			C.size_t(outputlen),
			(*C.size_t)(len),
			(*C.size_t)(conv),
			(*C.MSKwchart)(output),
			(*C.char)(unsafe.Pointer(input)),
		),
	)
}

// Wchartoutf8 is wrapping [MSK_wchartoutf8]
// function MSK_wchartoutf8 has following parameters:
// - outputlen: size_t
// - len: size_t *
// - conv: size_t *
// - output: char *
// - input: const MSKwchart *
//
// [MSK_wchartoutf8]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func Wchartoutf8(
	outputlen uint64,
	len *uint64,
	conv *uint64,
	output *byte,
	input *int32,
) res.Code {
	return res.Code(
		C.MSK_wchartoutf8(
			C.size_t(outputlen),
			(*C.size_t)(len),
			(*C.size_t)(conv),
			(*C.char)(unsafe.Pointer(output)),
			(*C.MSKwchart)(input),
		),
	)
}
