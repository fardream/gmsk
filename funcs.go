// Automatically generated by github.com/fardream/gen-gmsk
// funcs defitions

package gmsk

// #include <mosek.h>
import "C"

import "unsafe"

import "github.com/fardream/gmsk/res"

// AnalyzeNames is wrapping [MSK_analyzenames]
//
// function MSK_analyzenames has following parameters:
//   - task: MSKtask_t
//   - whichstream: MSKstreamtypee
//   - nametype: MSKnametypee
//
// [MSK_analyzenames]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AnalyzeNames(
	whichstream StreamType,
	nametype NameType,
) res.Code {
	return res.Code(
		C.MSK_analyzenames(
			task.task,
			C.MSKstreamtypee(whichstream),
			C.MSKnametypee(nametype),
		),
	)
}

// AnalyzeProblem is wrapping [MSK_analyzeproblem]
//
// function MSK_analyzeproblem has following parameters:
//   - task: MSKtask_t
//   - whichstream: MSKstreamtypee
//
// [MSK_analyzeproblem]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AnalyzeProblem(
	whichstream StreamType,
) res.Code {
	return res.Code(
		C.MSK_analyzeproblem(
			task.task,
			C.MSKstreamtypee(whichstream),
		),
	)
}

// AnalyzeSolution is wrapping [MSK_analyzesolution]
//
// function MSK_analyzesolution has following parameters:
//   - task: MSKtask_t
//   - whichstream: MSKstreamtypee
//   - whichsol: MSKsoltypee
//
// [MSK_analyzesolution]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AnalyzeSolution(
	whichstream StreamType,
	whichsol SolType,
) res.Code {
	return res.Code(
		C.MSK_analyzesolution(
			task.task,
			C.MSKstreamtypee(whichstream),
			C.MSKsoltypee(whichsol),
		),
	)
}

// AppendAcc is wrapping [MSK_appendacc]
//
// function MSK_appendacc has following parameters:
//   - task: MSKtask_t
//   - domidx: MSKint64t
//   - numafeidx: MSKint64t
//   - afeidxlist: const MSKint64t *
//   - b: const MSKrealt *
//
// [MSK_appendacc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendAcc(
	domidx int64,
	numafeidx int64,
	afeidxlist *int64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_appendacc(
			task.task,
			C.MSKint64t(domidx),
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidxlist),
			(*C.MSKrealt)(b),
		),
	)
}

// AppendAccs is wrapping [MSK_appendaccs]
//
// function MSK_appendaccs has following parameters:
//   - task: MSKtask_t
//   - numaccs: MSKint64t
//   - domidxs: const MSKint64t *
//   - numafeidx: MSKint64t
//   - afeidxlist: const MSKint64t *
//   - b: const MSKrealt *
//
// [MSK_appendaccs]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendAccs(
	numaccs int64,
	domidxs *int64,
	numafeidx int64,
	afeidxlist *int64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_appendaccs(
			task.task,
			C.MSKint64t(numaccs),
			(*C.MSKint64t)(domidxs),
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidxlist),
			(*C.MSKrealt)(b),
		),
	)
}

// AppendAccSeq is wrapping [MSK_appendaccseq]
//
// function MSK_appendaccseq has following parameters:
//   - task: MSKtask_t
//   - domidx: MSKint64t
//   - numafeidx: MSKint64t
//   - afeidxfirst: MSKint64t
//   - b: const MSKrealt *
//
// [MSK_appendaccseq]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendAccSeq(
	domidx int64,
	numafeidx int64,
	afeidxfirst int64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_appendaccseq(
			task.task,
			C.MSKint64t(domidx),
			C.MSKint64t(numafeidx),
			C.MSKint64t(afeidxfirst),
			(*C.MSKrealt)(b),
		),
	)
}

// AppendAccsSeq is wrapping [MSK_appendaccsseq]
//
// function MSK_appendaccsseq has following parameters:
//   - task: MSKtask_t
//   - numaccs: MSKint64t
//   - domidxs: const MSKint64t *
//   - numafeidx: MSKint64t
//   - afeidxfirst: MSKint64t
//   - b: const MSKrealt *
//
// [MSK_appendaccsseq]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendAccsSeq(
	numaccs int64,
	domidxs *int64,
	numafeidx int64,
	afeidxfirst int64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_appendaccsseq(
			task.task,
			C.MSKint64t(numaccs),
			(*C.MSKint64t)(domidxs),
			C.MSKint64t(numafeidx),
			C.MSKint64t(afeidxfirst),
			(*C.MSKrealt)(b),
		),
	)
}

// AppendAfes is wrapping [MSK_appendafes]
//
// function MSK_appendafes has following parameters:
//   - task: MSKtask_t
//   - num: MSKint64t
//
// [MSK_appendafes]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendAfes(
	num int64,
) res.Code {
	return res.Code(
		C.MSK_appendafes(
			task.task,
			C.MSKint64t(num),
		),
	)
}

// AppendBarvars is wrapping [MSK_appendbarvars]
//
// function MSK_appendbarvars has following parameters:
//   - task: MSKtask_t
//   - num: MSKint32t
//   - dim: const MSKint32t *
//
// [MSK_appendbarvars]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendBarvars(
	num int32,
	dim *int32,
) res.Code {
	return res.Code(
		C.MSK_appendbarvars(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(dim),
		),
	)
}

// AppendCone is wrapping [MSK_appendcone]
//
// function MSK_appendcone has following parameters:
//   - task: MSKtask_t
//   - ct: MSKconetypee
//   - conepar: MSKrealt
//   - nummem: MSKint32t
//   - submem: const MSKint32t *
//
// [MSK_appendcone]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendCone(
	ct ConeType,
	conepar float64,
	nummem int32,
	submem *int32,
) res.Code {
	return res.Code(
		C.MSK_appendcone(
			task.task,
			C.MSKconetypee(ct),
			C.MSKrealt(conepar),
			C.MSKint32t(nummem),
			(*C.MSKint32t)(submem),
		),
	)
}

// AppendConeSeq is wrapping [MSK_appendconeseq]
//
// function MSK_appendconeseq has following parameters:
//   - task: MSKtask_t
//   - ct: MSKconetypee
//   - conepar: MSKrealt
//   - nummem: MSKint32t
//   - j: MSKint32t
//
// [MSK_appendconeseq]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendConeSeq(
	ct ConeType,
	conepar float64,
	nummem int32,
	j int32,
) res.Code {
	return res.Code(
		C.MSK_appendconeseq(
			task.task,
			C.MSKconetypee(ct),
			C.MSKrealt(conepar),
			C.MSKint32t(nummem),
			C.MSKint32t(j),
		),
	)
}

// AppendConesSeq is wrapping [MSK_appendconesseq]
//
// function MSK_appendconesseq has following parameters:
//   - task: MSKtask_t
//   - num: MSKint32t
//   - ct: const MSKconetypee *
//   - conepar: const MSKrealt *
//   - nummem: const MSKint32t *
//   - j: MSKint32t
//
// [MSK_appendconesseq]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendConesSeq(
	num int32,
	ct *ConeType,
	conepar *float64,
	nummem *int32,
	j int32,
) res.Code {
	return res.Code(
		C.MSK_appendconesseq(
			task.task,
			C.MSKint32t(num),
			(*C.MSKconetypee)(ct),
			(*C.MSKrealt)(conepar),
			(*C.MSKint32t)(nummem),
			C.MSKint32t(j),
		),
	)
}

// AppendCons is wrapping [MSK_appendcons]
//
// function MSK_appendcons has following parameters:
//   - task: MSKtask_t
//   - num: MSKint32t
//
// [MSK_appendcons]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendCons(
	num int32,
) res.Code {
	return res.Code(
		C.MSK_appendcons(
			task.task,
			C.MSKint32t(num),
		),
	)
}

// AppendDjcs is wrapping [MSK_appenddjcs]
//
// function MSK_appenddjcs has following parameters:
//   - task: MSKtask_t
//   - num: MSKint64t
//
// [MSK_appenddjcs]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendDjcs(
	num int64,
) res.Code {
	return res.Code(
		C.MSK_appenddjcs(
			task.task,
			C.MSKint64t(num),
		),
	)
}

// AppendDualexpconedomain is wrapping [MSK_appenddualexpconedomain]
//
// function MSK_appenddualexpconedomain has following parameters:
//   - task: MSKtask_t
//   - domidx: MSKint64t *
//
// [MSK_appenddualexpconedomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendDualexpconedomain(
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appenddualexpconedomain(
			task.task,
			(*C.MSKint64t)(domidx),
		),
	)
}

// AppendDualgeomeanconedomain is wrapping [MSK_appenddualgeomeanconedomain]
//
// function MSK_appenddualgeomeanconedomain has following parameters:
//   - task: MSKtask_t
//   - n: MSKint64t
//   - domidx: MSKint64t *
//
// [MSK_appenddualgeomeanconedomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendDualgeomeanconedomain(
	n int64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appenddualgeomeanconedomain(
			task.task,
			C.MSKint64t(n),
			(*C.MSKint64t)(domidx),
		),
	)
}

// AppendDualpowerconedomain is wrapping [MSK_appenddualpowerconedomain]
//
// function MSK_appenddualpowerconedomain has following parameters:
//   - task: MSKtask_t
//   - n: MSKint64t
//   - nleft: MSKint64t
//   - alpha: const MSKrealt *
//   - domidx: MSKint64t *
//
// [MSK_appenddualpowerconedomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendDualpowerconedomain(
	n int64,
	nleft int64,
	alpha *float64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appenddualpowerconedomain(
			task.task,
			C.MSKint64t(n),
			C.MSKint64t(nleft),
			(*C.MSKrealt)(alpha),
			(*C.MSKint64t)(domidx),
		),
	)
}

// AppendPrimalexpconedomain is wrapping [MSK_appendprimalexpconedomain]
//
// function MSK_appendprimalexpconedomain has following parameters:
//   - task: MSKtask_t
//   - domidx: MSKint64t *
//
// [MSK_appendprimalexpconedomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendPrimalexpconedomain(
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendprimalexpconedomain(
			task.task,
			(*C.MSKint64t)(domidx),
		),
	)
}

// AppendPrimalgeomeanconedomain is wrapping [MSK_appendprimalgeomeanconedomain]
//
// function MSK_appendprimalgeomeanconedomain has following parameters:
//   - task: MSKtask_t
//   - n: MSKint64t
//   - domidx: MSKint64t *
//
// [MSK_appendprimalgeomeanconedomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendPrimalgeomeanconedomain(
	n int64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendprimalgeomeanconedomain(
			task.task,
			C.MSKint64t(n),
			(*C.MSKint64t)(domidx),
		),
	)
}

// AppendPrimalpowerconedomain is wrapping [MSK_appendprimalpowerconedomain]
//
// function MSK_appendprimalpowerconedomain has following parameters:
//   - task: MSKtask_t
//   - n: MSKint64t
//   - nleft: MSKint64t
//   - alpha: const MSKrealt *
//   - domidx: MSKint64t *
//
// [MSK_appendprimalpowerconedomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendPrimalpowerconedomain(
	n int64,
	nleft int64,
	alpha *float64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendprimalpowerconedomain(
			task.task,
			C.MSKint64t(n),
			C.MSKint64t(nleft),
			(*C.MSKrealt)(alpha),
			(*C.MSKint64t)(domidx),
		),
	)
}

// AppendQuadraticconedomain is wrapping [MSK_appendquadraticconedomain]
//
// function MSK_appendquadraticconedomain has following parameters:
//   - task: MSKtask_t
//   - n: MSKint64t
//   - domidx: MSKint64t *
//
// [MSK_appendquadraticconedomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendQuadraticconedomain(
	n int64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendquadraticconedomain(
			task.task,
			C.MSKint64t(n),
			(*C.MSKint64t)(domidx),
		),
	)
}

// AppendRdomain is wrapping [MSK_appendrdomain]
//
// function MSK_appendrdomain has following parameters:
//   - task: MSKtask_t
//   - n: MSKint64t
//   - domidx: MSKint64t *
//
// [MSK_appendrdomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendRdomain(
	n int64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendrdomain(
			task.task,
			C.MSKint64t(n),
			(*C.MSKint64t)(domidx),
		),
	)
}

// AppendRminusdomain is wrapping [MSK_appendrminusdomain]
//
// function MSK_appendrminusdomain has following parameters:
//   - task: MSKtask_t
//   - n: MSKint64t
//   - domidx: MSKint64t *
//
// [MSK_appendrminusdomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendRminusdomain(
	n int64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendrminusdomain(
			task.task,
			C.MSKint64t(n),
			(*C.MSKint64t)(domidx),
		),
	)
}

// AppendRplusdomain is wrapping [MSK_appendrplusdomain]
//
// function MSK_appendrplusdomain has following parameters:
//   - task: MSKtask_t
//   - n: MSKint64t
//   - domidx: MSKint64t *
//
// [MSK_appendrplusdomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendRplusdomain(
	n int64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendrplusdomain(
			task.task,
			C.MSKint64t(n),
			(*C.MSKint64t)(domidx),
		),
	)
}

// AppendRquadraticconedomain is wrapping [MSK_appendrquadraticconedomain]
//
// function MSK_appendrquadraticconedomain has following parameters:
//   - task: MSKtask_t
//   - n: MSKint64t
//   - domidx: MSKint64t *
//
// [MSK_appendrquadraticconedomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendRquadraticconedomain(
	n int64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendrquadraticconedomain(
			task.task,
			C.MSKint64t(n),
			(*C.MSKint64t)(domidx),
		),
	)
}

// AppendRzerodomain is wrapping [MSK_appendrzerodomain]
//
// function MSK_appendrzerodomain has following parameters:
//   - task: MSKtask_t
//   - n: MSKint64t
//   - domidx: MSKint64t *
//
// [MSK_appendrzerodomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendRzerodomain(
	n int64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendrzerodomain(
			task.task,
			C.MSKint64t(n),
			(*C.MSKint64t)(domidx),
		),
	)
}

// AppendSparsesymmat is wrapping [MSK_appendsparsesymmat]
//
// function MSK_appendsparsesymmat has following parameters:
//   - task: MSKtask_t
//   - dim: MSKint32t
//   - nz: MSKint64t
//   - subi: const MSKint32t *
//   - subj: const MSKint32t *
//   - valij: const MSKrealt *
//   - idx: MSKint64t *
//
// [MSK_appendsparsesymmat]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendSparsesymmat(
	dim int32,
	nz int64,
	subi *int32,
	subj *int32,
	valij *float64,
	idx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendsparsesymmat(
			task.task,
			C.MSKint32t(dim),
			C.MSKint64t(nz),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(valij),
			(*C.MSKint64t)(idx),
		),
	)
}

// AppendSparsesymmatList is wrapping [MSK_appendsparsesymmatlist]
//
// function MSK_appendsparsesymmatlist has following parameters:
//   - task: MSKtask_t
//   - num: MSKint32t
//   - dims: const MSKint32t *
//   - nz: const MSKint64t *
//   - subi: const MSKint32t *
//   - subj: const MSKint32t *
//   - valij: const MSKrealt *
//   - idx: MSKint64t *
//
// [MSK_appendsparsesymmatlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendSparsesymmatList(
	num int32,
	dims *int32,
	nz *int64,
	subi *int32,
	subj *int32,
	valij *float64,
	idx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendsparsesymmatlist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(dims),
			(*C.MSKint64t)(nz),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(valij),
			(*C.MSKint64t)(idx),
		),
	)
}

// AppendSvecpsdconedomain is wrapping [MSK_appendsvecpsdconedomain]
//
// function MSK_appendsvecpsdconedomain has following parameters:
//   - task: MSKtask_t
//   - n: MSKint64t
//   - domidx: MSKint64t *
//
// [MSK_appendsvecpsdconedomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendSvecpsdconedomain(
	n int64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_appendsvecpsdconedomain(
			task.task,
			C.MSKint64t(n),
			(*C.MSKint64t)(domidx),
		),
	)
}

// AppendVars is wrapping [MSK_appendvars]
//
// function MSK_appendvars has following parameters:
//   - task: MSKtask_t
//   - num: MSKint32t
//
// [MSK_appendvars]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) AppendVars(
	num int32,
) res.Code {
	return res.Code(
		C.MSK_appendvars(
			task.task,
			C.MSKint32t(num),
		),
	)
}

// Basiscond is wrapping [MSK_basiscond]
//
// function MSK_basiscond has following parameters:
//   - task: MSKtask_t
//   - nrmbasis: MSKrealt *
//   - nrminvbasis: MSKrealt *
//
// [MSK_basiscond]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Basiscond(
	nrmbasis *float64,
	nrminvbasis *float64,
) res.Code {
	return res.Code(
		C.MSK_basiscond(
			task.task,
			(*C.MSKrealt)(nrmbasis),
			(*C.MSKrealt)(nrminvbasis),
		),
	)
}

// Bktostr is wrapping [MSK_bktostr]
//
// function MSK_bktostr has following parameters:
//   - task: MSKtask_t
//   - bk: MSKboundkeye
//   - str: char *
//
// [MSK_bktostr]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Bktostr(
	bk BoundKey,
	str *byte,
) res.Code {
	return res.Code(
		C.MSK_bktostr(
			task.task,
			C.MSKboundkeye(bk),
			(*C.char)(unsafe.Pointer(str)),
		),
	)
}

// Callbackcodetostr is wrapping [MSK_callbackcodetostr]
//
// function MSK_callbackcodetostr has following parameters:
//   - code: MSKcallbackcodee
//   - callbackcodestr: char *
//
// [MSK_callbackcodetostr]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func Callbackcodetostr(
	code CallbackCode,
	callbackcodestr *byte,
) res.Code {
	return res.Code(
		C.MSK_callbackcodetostr(
			C.MSKcallbackcodee(code),
			(*C.char)(unsafe.Pointer(callbackcodestr)),
		),
	)
}

// Checkmemtask is wrapping [MSK_checkmemtask]
//
// function MSK_checkmemtask has following parameters:
//   - task: MSKtask_t
//   - file: const char *
//   - line: MSKint32t
//
// [MSK_checkmemtask]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Checkmemtask(
	file *byte,
	line int32,
) res.Code {
	return res.Code(
		C.MSK_checkmemtask(
			task.task,
			(*C.char)(unsafe.Pointer(file)),
			C.MSKint32t(line),
		),
	)
}

// Chgconbound is wrapping [MSK_chgconbound]
//
// function MSK_chgconbound has following parameters:
//   - task: MSKtask_t
//   - i: MSKint32t
//   - lower: MSKint32t
//   - finite: MSKint32t
//   - value: MSKrealt
//
// [MSK_chgconbound]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Chgconbound(
	i int32,
	lower int32,
	finite int32,
	value float64,
) res.Code {
	return res.Code(
		C.MSK_chgconbound(
			task.task,
			C.MSKint32t(i),
			C.MSKint32t(lower),
			C.MSKint32t(finite),
			C.MSKrealt(value),
		),
	)
}

// Chgvarbound is wrapping [MSK_chgvarbound]
//
// function MSK_chgvarbound has following parameters:
//   - task: MSKtask_t
//   - j: MSKint32t
//   - lower: MSKint32t
//   - finite: MSKint32t
//   - value: MSKrealt
//
// [MSK_chgvarbound]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Chgvarbound(
	j int32,
	lower int32,
	finite int32,
	value float64,
) res.Code {
	return res.Code(
		C.MSK_chgvarbound(
			task.task,
			C.MSKint32t(j),
			C.MSKint32t(lower),
			C.MSKint32t(finite),
			C.MSKrealt(value),
		),
	)
}

// Commitchanges is wrapping [MSK_commitchanges]
//
// function MSK_commitchanges has following parameters:
//   - task: MSKtask_t
//
// [MSK_commitchanges]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Commitchanges() res.Code {
	return res.Code(
		C.MSK_commitchanges(
			task.task,
		),
	)
}

// Conetypetostr is wrapping [MSK_conetypetostr]
//
// function MSK_conetypetostr has following parameters:
//   - task: MSKtask_t
//   - ct: MSKconetypee
//   - str: char *
//
// [MSK_conetypetostr]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Conetypetostr(
	ct ConeType,
	str *byte,
) res.Code {
	return res.Code(
		C.MSK_conetypetostr(
			task.task,
			C.MSKconetypee(ct),
			(*C.char)(unsafe.Pointer(str)),
		),
	)
}

// Deletesolution is wrapping [MSK_deletesolution]
//
// function MSK_deletesolution has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//
// [MSK_deletesolution]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Deletesolution(
	whichsol SolType,
) res.Code {
	return res.Code(
		C.MSK_deletesolution(
			task.task,
			C.MSKsoltypee(whichsol),
		),
	)
}

// Dualsensitivity is wrapping [MSK_dualsensitivity]
//
// function MSK_dualsensitivity has following parameters:
//   - task: MSKtask_t
//   - numj: MSKint32t
//   - subj: const MSKint32t *
//   - leftpricej: MSKrealt *
//   - rightpricej: MSKrealt *
//   - leftrangej: MSKrealt *
//   - rightrangej: MSKrealt *
//
// [MSK_dualsensitivity]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Dualsensitivity(
	numj int32,
	subj *int32,
	leftpricej *float64,
	rightpricej *float64,
	leftrangej *float64,
	rightrangej *float64,
) res.Code {
	return res.Code(
		C.MSK_dualsensitivity(
			task.task,
			C.MSKint32t(numj),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(leftpricej),
			(*C.MSKrealt)(rightpricej),
			(*C.MSKrealt)(leftrangej),
			(*C.MSKrealt)(rightrangej),
		),
	)
}

// Emptyafebarfrow is wrapping [MSK_emptyafebarfrow]
//
// function MSK_emptyafebarfrow has following parameters:
//   - task: MSKtask_t
//   - afeidx: MSKint64t
//
// [MSK_emptyafebarfrow]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Emptyafebarfrow(
	afeidx int64,
) res.Code {
	return res.Code(
		C.MSK_emptyafebarfrow(
			task.task,
			C.MSKint64t(afeidx),
		),
	)
}

// EmptyafebarfrowList is wrapping [MSK_emptyafebarfrowlist]
//
// function MSK_emptyafebarfrowlist has following parameters:
//   - task: MSKtask_t
//   - numafeidx: MSKint64t
//   - afeidxlist: const MSKint64t *
//
// [MSK_emptyafebarfrowlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) EmptyafebarfrowList(
	numafeidx int64,
	afeidxlist *int64,
) res.Code {
	return res.Code(
		C.MSK_emptyafebarfrowlist(
			task.task,
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidxlist),
		),
	)
}

// Emptyafefcol is wrapping [MSK_emptyafefcol]
//
// function MSK_emptyafefcol has following parameters:
//   - task: MSKtask_t
//   - varidx: MSKint32t
//
// [MSK_emptyafefcol]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Emptyafefcol(
	varidx int32,
) res.Code {
	return res.Code(
		C.MSK_emptyafefcol(
			task.task,
			C.MSKint32t(varidx),
		),
	)
}

// EmptyafefcolList is wrapping [MSK_emptyafefcollist]
//
// function MSK_emptyafefcollist has following parameters:
//   - task: MSKtask_t
//   - numvaridx: MSKint64t
//   - varidx: const MSKint32t *
//
// [MSK_emptyafefcollist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) EmptyafefcolList(
	numvaridx int64,
	varidx *int32,
) res.Code {
	return res.Code(
		C.MSK_emptyafefcollist(
			task.task,
			C.MSKint64t(numvaridx),
			(*C.MSKint32t)(varidx),
		),
	)
}

// Emptyafefrow is wrapping [MSK_emptyafefrow]
//
// function MSK_emptyafefrow has following parameters:
//   - task: MSKtask_t
//   - afeidx: MSKint64t
//
// [MSK_emptyafefrow]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Emptyafefrow(
	afeidx int64,
) res.Code {
	return res.Code(
		C.MSK_emptyafefrow(
			task.task,
			C.MSKint64t(afeidx),
		),
	)
}

// EmptyafefrowList is wrapping [MSK_emptyafefrowlist]
//
// function MSK_emptyafefrowlist has following parameters:
//   - task: MSKtask_t
//   - numafeidx: MSKint64t
//   - afeidx: const MSKint64t *
//
// [MSK_emptyafefrowlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) EmptyafefrowList(
	numafeidx int64,
	afeidx *int64,
) res.Code {
	return res.Code(
		C.MSK_emptyafefrowlist(
			task.task,
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidx),
		),
	)
}

// Evaluateacc is wrapping [MSK_evaluateacc]
//
// function MSK_evaluateacc has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - accidx: MSKint64t
//   - activity: MSKrealt *
//
// [MSK_evaluateacc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Evaluateacc(
	whichsol SolType,
	accidx int64,
	activity *float64,
) res.Code {
	return res.Code(
		C.MSK_evaluateacc(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint64t(accidx),
			(*C.MSKrealt)(activity),
		),
	)
}

// Evaluateaccs is wrapping [MSK_evaluateaccs]
//
// function MSK_evaluateaccs has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - activity: MSKrealt *
//
// [MSK_evaluateaccs]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Evaluateaccs(
	whichsol SolType,
	activity *float64,
) res.Code {
	return res.Code(
		C.MSK_evaluateaccs(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(activity),
		),
	)
}

// GetAccafeidxList is wrapping [MSK_getaccafeidxlist]
//
// function MSK_getaccafeidxlist has following parameters:
//   - task: MSKtask_t
//   - accidx: MSKint64t
//   - afeidxlist: MSKint64t *
//
// [MSK_getaccafeidxlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAccafeidxList(
	accidx int64,
	afeidxlist *int64,
) res.Code {
	return res.Code(
		C.MSK_getaccafeidxlist(
			task.task,
			C.MSKint64t(accidx),
			(*C.MSKint64t)(afeidxlist),
		),
	)
}

// GetAccb is wrapping [MSK_getaccb]
//
// function MSK_getaccb has following parameters:
//   - task: MSKtask_t
//   - accidx: MSKint64t
//   - b: MSKrealt *
//
// [MSK_getaccb]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAccb(
	accidx int64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_getaccb(
			task.task,
			C.MSKint64t(accidx),
			(*C.MSKrealt)(b),
		),
	)
}

// GetAccbarfblocktriplet is wrapping [MSK_getaccbarfblocktriplet]
//
// function MSK_getaccbarfblocktriplet has following parameters:
//   - task: MSKtask_t
//   - maxnumtrip: MSKint64t
//   - numtrip: MSKint64t *
//   - acc_afe: MSKint64t *
//   - bar_var: MSKint32t *
//   - blk_row: MSKint32t *
//   - blk_col: MSKint32t *
//   - blk_val: MSKrealt *
//
// [MSK_getaccbarfblocktriplet]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAccbarfblocktriplet(
	maxnumtrip int64,
	numtrip *int64,
	acc_afe *int64,
	bar_var *int32,
	blk_row *int32,
	blk_col *int32,
	blk_val *float64,
) res.Code {
	return res.Code(
		C.MSK_getaccbarfblocktriplet(
			task.task,
			C.MSKint64t(maxnumtrip),
			(*C.MSKint64t)(numtrip),
			(*C.MSKint64t)(acc_afe),
			(*C.MSKint32t)(bar_var),
			(*C.MSKint32t)(blk_row),
			(*C.MSKint32t)(blk_col),
			(*C.MSKrealt)(blk_val),
		),
	)
}

// GetAccbarfnumblocktriplets is wrapping [MSK_getaccbarfnumblocktriplets]
//
// function MSK_getaccbarfnumblocktriplets has following parameters:
//   - task: MSKtask_t
//   - numtrip: MSKint64t *
//
// [MSK_getaccbarfnumblocktriplets]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAccbarfnumblocktriplets(
	numtrip *int64,
) res.Code {
	return res.Code(
		C.MSK_getaccbarfnumblocktriplets(
			task.task,
			(*C.MSKint64t)(numtrip),
		),
	)
}

// GetAccdomain is wrapping [MSK_getaccdomain]
//
// function MSK_getaccdomain has following parameters:
//   - task: MSKtask_t
//   - accidx: MSKint64t
//   - domidx: MSKint64t *
//
// [MSK_getaccdomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAccdomain(
	accidx int64,
	domidx *int64,
) res.Code {
	return res.Code(
		C.MSK_getaccdomain(
			task.task,
			C.MSKint64t(accidx),
			(*C.MSKint64t)(domidx),
		),
	)
}

// GetAccdoty is wrapping [MSK_getaccdoty]
//
// function MSK_getaccdoty has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - accidx: MSKint64t
//   - doty: MSKrealt *
//
// [MSK_getaccdoty]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAccdoty(
	whichsol SolType,
	accidx int64,
	doty *float64,
) res.Code {
	return res.Code(
		C.MSK_getaccdoty(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint64t(accidx),
			(*C.MSKrealt)(doty),
		),
	)
}

// GetAccdotys is wrapping [MSK_getaccdotys]
//
// function MSK_getaccdotys has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - doty: MSKrealt *
//
// [MSK_getaccdotys]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAccdotys(
	whichsol SolType,
	doty *float64,
) res.Code {
	return res.Code(
		C.MSK_getaccdotys(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(doty),
		),
	)
}

// GetAccfnumnz is wrapping [MSK_getaccfnumnz]
//
// function MSK_getaccfnumnz has following parameters:
//   - task: MSKtask_t
//   - accfnnz: MSKint64t *
//
// [MSK_getaccfnumnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAccfnumnz(
	accfnnz *int64,
) res.Code {
	return res.Code(
		C.MSK_getaccfnumnz(
			task.task,
			(*C.MSKint64t)(accfnnz),
		),
	)
}

// GetAccftrip is wrapping [MSK_getaccftrip]
//
// function MSK_getaccftrip has following parameters:
//   - task: MSKtask_t
//   - frow: MSKint64t *
//   - fcol: MSKint32t *
//   - fval: MSKrealt *
//
// [MSK_getaccftrip]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAccftrip(
	frow *int64,
	fcol *int32,
	fval *float64,
) res.Code {
	return res.Code(
		C.MSK_getaccftrip(
			task.task,
			(*C.MSKint64t)(frow),
			(*C.MSKint32t)(fcol),
			(*C.MSKrealt)(fval),
		),
	)
}

// GetAccgvector is wrapping [MSK_getaccgvector]
//
// function MSK_getaccgvector has following parameters:
//   - task: MSKtask_t
//   - g: MSKrealt *
//
// [MSK_getaccgvector]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAccgvector(
	g *float64,
) res.Code {
	return res.Code(
		C.MSK_getaccgvector(
			task.task,
			(*C.MSKrealt)(g),
		),
	)
}

// GetAccn is wrapping [MSK_getaccn]
//
// function MSK_getaccn has following parameters:
//   - task: MSKtask_t
//   - accidx: MSKint64t
//   - n: MSKint64t *
//
// [MSK_getaccn]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAccn(
	accidx int64,
	n *int64,
) res.Code {
	return res.Code(
		C.MSK_getaccn(
			task.task,
			C.MSKint64t(accidx),
			(*C.MSKint64t)(n),
		),
	)
}

// GetAccname is wrapping [MSK_getaccname]
//
// function MSK_getaccname has following parameters:
//   - task: MSKtask_t
//   - accidx: MSKint64t
//   - sizename: MSKint32t
//   - name: char *
//
// [MSK_getaccname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAccname(
	accidx int64,
	sizename int32,
	name *byte,
) res.Code {
	return res.Code(
		C.MSK_getaccname(
			task.task,
			C.MSKint64t(accidx),
			C.MSKint32t(sizename),
			(*C.char)(unsafe.Pointer(name)),
		),
	)
}

// GetAccnamelen is wrapping [MSK_getaccnamelen]
//
// function MSK_getaccnamelen has following parameters:
//   - task: MSKtask_t
//   - accidx: MSKint64t
//   - len: MSKint32t *
//
// [MSK_getaccnamelen]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAccnamelen(
	accidx int64,
	len *int32,
) res.Code {
	return res.Code(
		C.MSK_getaccnamelen(
			task.task,
			C.MSKint64t(accidx),
			(*C.MSKint32t)(len),
		),
	)
}

// GetAccntot is wrapping [MSK_getaccntot]
//
// function MSK_getaccntot has following parameters:
//   - task: MSKtask_t
//   - n: MSKint64t *
//
// [MSK_getaccntot]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAccntot(
	n *int64,
) res.Code {
	return res.Code(
		C.MSK_getaccntot(
			task.task,
			(*C.MSKint64t)(n),
		),
	)
}

// GetAccs is wrapping [MSK_getaccs]
//
// function MSK_getaccs has following parameters:
//   - task: MSKtask_t
//   - domidxlist: MSKint64t *
//   - afeidxlist: MSKint64t *
//   - b: MSKrealt *
//
// [MSK_getaccs]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAccs(
	domidxlist *int64,
	afeidxlist *int64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_getaccs(
			task.task,
			(*C.MSKint64t)(domidxlist),
			(*C.MSKint64t)(afeidxlist),
			(*C.MSKrealt)(b),
		),
	)
}

// GetAcol is wrapping [MSK_getacol]
//
// function MSK_getacol has following parameters:
//   - task: MSKtask_t
//   - j: MSKint32t
//   - nzj: MSKint32t *
//   - subj: MSKint32t *
//   - valj: MSKrealt *
//
// [MSK_getacol]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAcol(
	j int32,
	nzj *int32,
	subj *int32,
	valj *float64,
) res.Code {
	return res.Code(
		C.MSK_getacol(
			task.task,
			C.MSKint32t(j),
			(*C.MSKint32t)(nzj),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(valj),
		),
	)
}

// GetAcolnumnz is wrapping [MSK_getacolnumnz]
//
// function MSK_getacolnumnz has following parameters:
//   - task: MSKtask_t
//   - i: MSKint32t
//   - nzj: MSKint32t *
//
// [MSK_getacolnumnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAcolnumnz(
	i int32,
	nzj *int32,
) res.Code {
	return res.Code(
		C.MSK_getacolnumnz(
			task.task,
			C.MSKint32t(i),
			(*C.MSKint32t)(nzj),
		),
	)
}

// GetAcolSlice is wrapping [MSK_getacolslice]
//
// function MSK_getacolslice has following parameters:
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - maxnumnz: MSKint32t
//   - ptrb: MSKint32t *
//   - ptre: MSKint32t *
//   - sub: MSKint32t *
//   - val: MSKrealt *
//
// [MSK_getacolslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAcolSlice(
	first int32,
	last int32,
	maxnumnz int32,
	ptrb *int32,
	ptre *int32,
	sub *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_getacolslice(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			C.MSKint32t(maxnumnz),
			(*C.MSKint32t)(ptrb),
			(*C.MSKint32t)(ptre),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(val),
		),
	)
}

// GetAcolslice64 is wrapping [MSK_getacolslice64]
//
// function MSK_getacolslice64 has following parameters:
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - maxnumnz: MSKint64t
//   - ptrb: MSKint64t *
//   - ptre: MSKint64t *
//   - sub: MSKint32t *
//   - val: MSKrealt *
//
// [MSK_getacolslice64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAcolslice64(
	first int32,
	last int32,
	maxnumnz int64,
	ptrb *int64,
	ptre *int64,
	sub *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_getacolslice64(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			C.MSKint64t(maxnumnz),
			(*C.MSKint64t)(ptrb),
			(*C.MSKint64t)(ptre),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(val),
		),
	)
}

// GetAcolslicenumnz is wrapping [MSK_getacolslicenumnz]
//
// function MSK_getacolslicenumnz has following parameters:
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - numnz: MSKint32t *
//
// [MSK_getacolslicenumnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAcolslicenumnz(
	first int32,
	last int32,
	numnz *int32,
) res.Code {
	return res.Code(
		C.MSK_getacolslicenumnz(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKint32t)(numnz),
		),
	)
}

// GetAcolslicenumnz64 is wrapping [MSK_getacolslicenumnz64]
//
// function MSK_getacolslicenumnz64 has following parameters:
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - numnz: MSKint64t *
//
// [MSK_getacolslicenumnz64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAcolslicenumnz64(
	first int32,
	last int32,
	numnz *int64,
) res.Code {
	return res.Code(
		C.MSK_getacolslicenumnz64(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKint64t)(numnz),
		),
	)
}

// GetAcolslicetrip is wrapping [MSK_getacolslicetrip]
//
// function MSK_getacolslicetrip has following parameters:
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - maxnumnz: MSKint64t
//   - subi: MSKint32t *
//   - subj: MSKint32t *
//   - val: MSKrealt *
//
// [MSK_getacolslicetrip]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAcolslicetrip(
	first int32,
	last int32,
	maxnumnz int64,
	subi *int32,
	subj *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_getacolslicetrip(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			C.MSKint64t(maxnumnz),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(val),
		),
	)
}

// GetAfebarfblocktriplet is wrapping [MSK_getafebarfblocktriplet]
//
// function MSK_getafebarfblocktriplet has following parameters:
//   - task: MSKtask_t
//   - maxnumtrip: MSKint64t
//   - numtrip: MSKint64t *
//   - afeidx: MSKint64t *
//   - barvaridx: MSKint32t *
//   - subk: MSKint32t *
//   - subl: MSKint32t *
//   - valkl: MSKrealt *
//
// [MSK_getafebarfblocktriplet]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAfebarfblocktriplet(
	maxnumtrip int64,
	numtrip *int64,
	afeidx *int64,
	barvaridx *int32,
	subk *int32,
	subl *int32,
	valkl *float64,
) res.Code {
	return res.Code(
		C.MSK_getafebarfblocktriplet(
			task.task,
			C.MSKint64t(maxnumtrip),
			(*C.MSKint64t)(numtrip),
			(*C.MSKint64t)(afeidx),
			(*C.MSKint32t)(barvaridx),
			(*C.MSKint32t)(subk),
			(*C.MSKint32t)(subl),
			(*C.MSKrealt)(valkl),
		),
	)
}

// GetAfebarfnumblocktriplets is wrapping [MSK_getafebarfnumblocktriplets]
//
// function MSK_getafebarfnumblocktriplets has following parameters:
//   - task: MSKtask_t
//   - numtrip: MSKint64t *
//
// [MSK_getafebarfnumblocktriplets]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAfebarfnumblocktriplets(
	numtrip *int64,
) res.Code {
	return res.Code(
		C.MSK_getafebarfnumblocktriplets(
			task.task,
			(*C.MSKint64t)(numtrip),
		),
	)
}

// GetAfebarfnumrowentries is wrapping [MSK_getafebarfnumrowentries]
//
// function MSK_getafebarfnumrowentries has following parameters:
//   - task: MSKtask_t
//   - afeidx: MSKint64t
//   - numentr: MSKint32t *
//
// [MSK_getafebarfnumrowentries]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAfebarfnumrowentries(
	afeidx int64,
	numentr *int32,
) res.Code {
	return res.Code(
		C.MSK_getafebarfnumrowentries(
			task.task,
			C.MSKint64t(afeidx),
			(*C.MSKint32t)(numentr),
		),
	)
}

// GetAfebarfrow is wrapping [MSK_getafebarfrow]
//
// function MSK_getafebarfrow has following parameters:
//   - task: MSKtask_t
//   - afeidx: MSKint64t
//   - barvaridx: MSKint32t *
//   - ptrterm: MSKint64t *
//   - numterm: MSKint64t *
//   - termidx: MSKint64t *
//   - termweight: MSKrealt *
//
// [MSK_getafebarfrow]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAfebarfrow(
	afeidx int64,
	barvaridx *int32,
	ptrterm *int64,
	numterm *int64,
	termidx *int64,
	termweight *float64,
) res.Code {
	return res.Code(
		C.MSK_getafebarfrow(
			task.task,
			C.MSKint64t(afeidx),
			(*C.MSKint32t)(barvaridx),
			(*C.MSKint64t)(ptrterm),
			(*C.MSKint64t)(numterm),
			(*C.MSKint64t)(termidx),
			(*C.MSKrealt)(termweight),
		),
	)
}

// GetAfebarfrowinfo is wrapping [MSK_getafebarfrowinfo]
//
// function MSK_getafebarfrowinfo has following parameters:
//   - task: MSKtask_t
//   - afeidx: MSKint64t
//   - numentr: MSKint32t *
//   - numterm: MSKint64t *
//
// [MSK_getafebarfrowinfo]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAfebarfrowinfo(
	afeidx int64,
	numentr *int32,
	numterm *int64,
) res.Code {
	return res.Code(
		C.MSK_getafebarfrowinfo(
			task.task,
			C.MSKint64t(afeidx),
			(*C.MSKint32t)(numentr),
			(*C.MSKint64t)(numterm),
		),
	)
}

// GetAfefnumnz is wrapping [MSK_getafefnumnz]
//
// function MSK_getafefnumnz has following parameters:
//   - task: MSKtask_t
//   - numnz: MSKint64t *
//
// [MSK_getafefnumnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAfefnumnz(
	numnz *int64,
) res.Code {
	return res.Code(
		C.MSK_getafefnumnz(
			task.task,
			(*C.MSKint64t)(numnz),
		),
	)
}

// GetAfefrow is wrapping [MSK_getafefrow]
//
// function MSK_getafefrow has following parameters:
//   - task: MSKtask_t
//   - afeidx: MSKint64t
//   - numnz: MSKint32t *
//   - varidx: MSKint32t *
//   - val: MSKrealt *
//
// [MSK_getafefrow]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAfefrow(
	afeidx int64,
	numnz *int32,
	varidx *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_getafefrow(
			task.task,
			C.MSKint64t(afeidx),
			(*C.MSKint32t)(numnz),
			(*C.MSKint32t)(varidx),
			(*C.MSKrealt)(val),
		),
	)
}

// GetAfefrownumnz is wrapping [MSK_getafefrownumnz]
//
// function MSK_getafefrownumnz has following parameters:
//   - task: MSKtask_t
//   - afeidx: MSKint64t
//   - numnz: MSKint32t *
//
// [MSK_getafefrownumnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAfefrownumnz(
	afeidx int64,
	numnz *int32,
) res.Code {
	return res.Code(
		C.MSK_getafefrownumnz(
			task.task,
			C.MSKint64t(afeidx),
			(*C.MSKint32t)(numnz),
		),
	)
}

// GetAfeftrip is wrapping [MSK_getafeftrip]
//
// function MSK_getafeftrip has following parameters:
//   - task: MSKtask_t
//   - afeidx: MSKint64t *
//   - varidx: MSKint32t *
//   - val: MSKrealt *
//
// [MSK_getafeftrip]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAfeftrip(
	afeidx *int64,
	varidx *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_getafeftrip(
			task.task,
			(*C.MSKint64t)(afeidx),
			(*C.MSKint32t)(varidx),
			(*C.MSKrealt)(val),
		),
	)
}

// GetAfeg is wrapping [MSK_getafeg]
//
// function MSK_getafeg has following parameters:
//   - task: MSKtask_t
//   - afeidx: MSKint64t
//   - g: MSKrealt *
//
// [MSK_getafeg]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAfeg(
	afeidx int64,
	g *float64,
) res.Code {
	return res.Code(
		C.MSK_getafeg(
			task.task,
			C.MSKint64t(afeidx),
			(*C.MSKrealt)(g),
		),
	)
}

// GetAfegSlice is wrapping [MSK_getafegslice]
//
// function MSK_getafegslice has following parameters:
//   - task: MSKtask_t
//   - first: MSKint64t
//   - last: MSKint64t
//   - g: MSKrealt *
//
// [MSK_getafegslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAfegSlice(
	first int64,
	last int64,
	g *float64,
) res.Code {
	return res.Code(
		C.MSK_getafegslice(
			task.task,
			C.MSKint64t(first),
			C.MSKint64t(last),
			(*C.MSKrealt)(g),
		),
	)
}

// GetAij is wrapping [MSK_getaij]
//
// function MSK_getaij has following parameters:
//   - task: MSKtask_t
//   - i: MSKint32t
//   - j: MSKint32t
//   - aij: MSKrealt *
//
// [MSK_getaij]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAij(
	i int32,
	j int32,
	aij *float64,
) res.Code {
	return res.Code(
		C.MSK_getaij(
			task.task,
			C.MSKint32t(i),
			C.MSKint32t(j),
			(*C.MSKrealt)(aij),
		),
	)
}

// GetApiecenumnz is wrapping [MSK_getapiecenumnz]
//
// function MSK_getapiecenumnz has following parameters:
//   - task: MSKtask_t
//   - firsti: MSKint32t
//   - lasti: MSKint32t
//   - firstj: MSKint32t
//   - lastj: MSKint32t
//   - numnz: MSKint32t *
//
// [MSK_getapiecenumnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetApiecenumnz(
	firsti int32,
	lasti int32,
	firstj int32,
	lastj int32,
	numnz *int32,
) res.Code {
	return res.Code(
		C.MSK_getapiecenumnz(
			task.task,
			C.MSKint32t(firsti),
			C.MSKint32t(lasti),
			C.MSKint32t(firstj),
			C.MSKint32t(lastj),
			(*C.MSKint32t)(numnz),
		),
	)
}

// GetArow is wrapping [MSK_getarow]
//
// function MSK_getarow has following parameters:
//   - task: MSKtask_t
//   - i: MSKint32t
//   - nzi: MSKint32t *
//   - subi: MSKint32t *
//   - vali: MSKrealt *
//
// [MSK_getarow]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetArow(
	i int32,
	nzi *int32,
	subi *int32,
	vali *float64,
) res.Code {
	return res.Code(
		C.MSK_getarow(
			task.task,
			C.MSKint32t(i),
			(*C.MSKint32t)(nzi),
			(*C.MSKint32t)(subi),
			(*C.MSKrealt)(vali),
		),
	)
}

// GetArownumnz is wrapping [MSK_getarownumnz]
//
// function MSK_getarownumnz has following parameters:
//   - task: MSKtask_t
//   - i: MSKint32t
//   - nzi: MSKint32t *
//
// [MSK_getarownumnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetArownumnz(
	i int32,
	nzi *int32,
) res.Code {
	return res.Code(
		C.MSK_getarownumnz(
			task.task,
			C.MSKint32t(i),
			(*C.MSKint32t)(nzi),
		),
	)
}

// GetArowSlice is wrapping [MSK_getarowslice]
//
// function MSK_getarowslice has following parameters:
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - maxnumnz: MSKint32t
//   - ptrb: MSKint32t *
//   - ptre: MSKint32t *
//   - sub: MSKint32t *
//   - val: MSKrealt *
//
// [MSK_getarowslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetArowSlice(
	first int32,
	last int32,
	maxnumnz int32,
	ptrb *int32,
	ptre *int32,
	sub *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_getarowslice(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			C.MSKint32t(maxnumnz),
			(*C.MSKint32t)(ptrb),
			(*C.MSKint32t)(ptre),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(val),
		),
	)
}

// GetArowslice64 is wrapping [MSK_getarowslice64]
//
// function MSK_getarowslice64 has following parameters:
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - maxnumnz: MSKint64t
//   - ptrb: MSKint64t *
//   - ptre: MSKint64t *
//   - sub: MSKint32t *
//   - val: MSKrealt *
//
// [MSK_getarowslice64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetArowslice64(
	first int32,
	last int32,
	maxnumnz int64,
	ptrb *int64,
	ptre *int64,
	sub *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_getarowslice64(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			C.MSKint64t(maxnumnz),
			(*C.MSKint64t)(ptrb),
			(*C.MSKint64t)(ptre),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(val),
		),
	)
}

// GetArowslicenumnz is wrapping [MSK_getarowslicenumnz]
//
// function MSK_getarowslicenumnz has following parameters:
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - numnz: MSKint32t *
//
// [MSK_getarowslicenumnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetArowslicenumnz(
	first int32,
	last int32,
	numnz *int32,
) res.Code {
	return res.Code(
		C.MSK_getarowslicenumnz(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKint32t)(numnz),
		),
	)
}

// GetArowslicenumnz64 is wrapping [MSK_getarowslicenumnz64]
//
// function MSK_getarowslicenumnz64 has following parameters:
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - numnz: MSKint64t *
//
// [MSK_getarowslicenumnz64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetArowslicenumnz64(
	first int32,
	last int32,
	numnz *int64,
) res.Code {
	return res.Code(
		C.MSK_getarowslicenumnz64(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKint64t)(numnz),
		),
	)
}

// GetArowslicetrip is wrapping [MSK_getarowslicetrip]
//
// function MSK_getarowslicetrip has following parameters:
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - maxnumnz: MSKint64t
//   - subi: MSKint32t *
//   - subj: MSKint32t *
//   - val: MSKrealt *
//
// [MSK_getarowslicetrip]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetArowslicetrip(
	first int32,
	last int32,
	maxnumnz int64,
	subi *int32,
	subj *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_getarowslicetrip(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			C.MSKint64t(maxnumnz),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(val),
		),
	)
}

// GetAtrip is wrapping [MSK_getatrip]
//
// function MSK_getatrip has following parameters:
//   - task: MSKtask_t
//   - maxnumnz: MSKint64t
//   - subi: MSKint32t *
//   - subj: MSKint32t *
//   - val: MSKrealt *
//
// [MSK_getatrip]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAtrip(
	maxnumnz int64,
	subi *int32,
	subj *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_getatrip(
			task.task,
			C.MSKint64t(maxnumnz),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(val),
		),
	)
}

// GetAtruncatetol is wrapping [MSK_getatruncatetol]
//
// function MSK_getatruncatetol has following parameters:
//   - task: MSKtask_t
//   - tolzero: MSKrealt *
//
// [MSK_getatruncatetol]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetAtruncatetol(
	tolzero *float64,
) res.Code {
	return res.Code(
		C.MSK_getatruncatetol(
			task.task,
			(*C.MSKrealt)(tolzero),
		),
	)
}

// GetBarablocktriplet is wrapping [MSK_getbarablocktriplet]
//
// function MSK_getbarablocktriplet has following parameters:
//   - task: MSKtask_t
//   - maxnum: MSKint64t
//   - num: MSKint64t *
//   - subi: MSKint32t *
//   - subj: MSKint32t *
//   - subk: MSKint32t *
//   - subl: MSKint32t *
//   - valijkl: MSKrealt *
//
// [MSK_getbarablocktriplet]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetBarablocktriplet(
	maxnum int64,
	num *int64,
	subi *int32,
	subj *int32,
	subk *int32,
	subl *int32,
	valijkl *float64,
) res.Code {
	return res.Code(
		C.MSK_getbarablocktriplet(
			task.task,
			C.MSKint64t(maxnum),
			(*C.MSKint64t)(num),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKint32t)(subk),
			(*C.MSKint32t)(subl),
			(*C.MSKrealt)(valijkl),
		),
	)
}

// GetBaraidx is wrapping [MSK_getbaraidx]
//
// function MSK_getbaraidx has following parameters:
//   - task: MSKtask_t
//   - idx: MSKint64t
//   - maxnum: MSKint64t
//   - i: MSKint32t *
//   - j: MSKint32t *
//   - num: MSKint64t *
//   - sub: MSKint64t *
//   - weights: MSKrealt *
//
// [MSK_getbaraidx]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetBaraidx(
	idx int64,
	maxnum int64,
	i *int32,
	j *int32,
	num *int64,
	sub *int64,
	weights *float64,
) res.Code {
	return res.Code(
		C.MSK_getbaraidx(
			task.task,
			C.MSKint64t(idx),
			C.MSKint64t(maxnum),
			(*C.MSKint32t)(i),
			(*C.MSKint32t)(j),
			(*C.MSKint64t)(num),
			(*C.MSKint64t)(sub),
			(*C.MSKrealt)(weights),
		),
	)
}

// GetBaraidxij is wrapping [MSK_getbaraidxij]
//
// function MSK_getbaraidxij has following parameters:
//   - task: MSKtask_t
//   - idx: MSKint64t
//   - i: MSKint32t *
//   - j: MSKint32t *
//
// [MSK_getbaraidxij]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetBaraidxij(
	idx int64,
	i *int32,
	j *int32,
) res.Code {
	return res.Code(
		C.MSK_getbaraidxij(
			task.task,
			C.MSKint64t(idx),
			(*C.MSKint32t)(i),
			(*C.MSKint32t)(j),
		),
	)
}

// GetBaraidxinfo is wrapping [MSK_getbaraidxinfo]
//
// function MSK_getbaraidxinfo has following parameters:
//   - task: MSKtask_t
//   - idx: MSKint64t
//   - num: MSKint64t *
//
// [MSK_getbaraidxinfo]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetBaraidxinfo(
	idx int64,
	num *int64,
) res.Code {
	return res.Code(
		C.MSK_getbaraidxinfo(
			task.task,
			C.MSKint64t(idx),
			(*C.MSKint64t)(num),
		),
	)
}

// GetBarasparsity is wrapping [MSK_getbarasparsity]
//
// function MSK_getbarasparsity has following parameters:
//   - task: MSKtask_t
//   - maxnumnz: MSKint64t
//   - numnz: MSKint64t *
//   - idxij: MSKint64t *
//
// [MSK_getbarasparsity]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetBarasparsity(
	maxnumnz int64,
	numnz *int64,
	idxij *int64,
) res.Code {
	return res.Code(
		C.MSK_getbarasparsity(
			task.task,
			C.MSKint64t(maxnumnz),
			(*C.MSKint64t)(numnz),
			(*C.MSKint64t)(idxij),
		),
	)
}

// GetBarcblocktriplet is wrapping [MSK_getbarcblocktriplet]
//
// function MSK_getbarcblocktriplet has following parameters:
//   - task: MSKtask_t
//   - maxnum: MSKint64t
//   - num: MSKint64t *
//   - subj: MSKint32t *
//   - subk: MSKint32t *
//   - subl: MSKint32t *
//   - valjkl: MSKrealt *
//
// [MSK_getbarcblocktriplet]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetBarcblocktriplet(
	maxnum int64,
	num *int64,
	subj *int32,
	subk *int32,
	subl *int32,
	valjkl *float64,
) res.Code {
	return res.Code(
		C.MSK_getbarcblocktriplet(
			task.task,
			C.MSKint64t(maxnum),
			(*C.MSKint64t)(num),
			(*C.MSKint32t)(subj),
			(*C.MSKint32t)(subk),
			(*C.MSKint32t)(subl),
			(*C.MSKrealt)(valjkl),
		),
	)
}

// GetBarcidx is wrapping [MSK_getbarcidx]
//
// function MSK_getbarcidx has following parameters:
//   - task: MSKtask_t
//   - idx: MSKint64t
//   - maxnum: MSKint64t
//   - j: MSKint32t *
//   - num: MSKint64t *
//   - sub: MSKint64t *
//   - weights: MSKrealt *
//
// [MSK_getbarcidx]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetBarcidx(
	idx int64,
	maxnum int64,
	j *int32,
	num *int64,
	sub *int64,
	weights *float64,
) res.Code {
	return res.Code(
		C.MSK_getbarcidx(
			task.task,
			C.MSKint64t(idx),
			C.MSKint64t(maxnum),
			(*C.MSKint32t)(j),
			(*C.MSKint64t)(num),
			(*C.MSKint64t)(sub),
			(*C.MSKrealt)(weights),
		),
	)
}

// GetBarcidxinfo is wrapping [MSK_getbarcidxinfo]
//
// function MSK_getbarcidxinfo has following parameters:
//   - task: MSKtask_t
//   - idx: MSKint64t
//   - num: MSKint64t *
//
// [MSK_getbarcidxinfo]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetBarcidxinfo(
	idx int64,
	num *int64,
) res.Code {
	return res.Code(
		C.MSK_getbarcidxinfo(
			task.task,
			C.MSKint64t(idx),
			(*C.MSKint64t)(num),
		),
	)
}

// GetBarcidxj is wrapping [MSK_getbarcidxj]
//
// function MSK_getbarcidxj has following parameters:
//   - task: MSKtask_t
//   - idx: MSKint64t
//   - j: MSKint32t *
//
// [MSK_getbarcidxj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetBarcidxj(
	idx int64,
	j *int32,
) res.Code {
	return res.Code(
		C.MSK_getbarcidxj(
			task.task,
			C.MSKint64t(idx),
			(*C.MSKint32t)(j),
		),
	)
}

// GetBarcsparsity is wrapping [MSK_getbarcsparsity]
//
// function MSK_getbarcsparsity has following parameters:
//   - task: MSKtask_t
//   - maxnumnz: MSKint64t
//   - numnz: MSKint64t *
//   - idxj: MSKint64t *
//
// [MSK_getbarcsparsity]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetBarcsparsity(
	maxnumnz int64,
	numnz *int64,
	idxj *int64,
) res.Code {
	return res.Code(
		C.MSK_getbarcsparsity(
			task.task,
			C.MSKint64t(maxnumnz),
			(*C.MSKint64t)(numnz),
			(*C.MSKint64t)(idxj),
		),
	)
}

// GetBarsj is wrapping [MSK_getbarsj]
//
// function MSK_getbarsj has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - j: MSKint32t
//   - barsj: MSKrealt *
//
// [MSK_getbarsj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetBarsj(
	whichsol SolType,
	j int32,
	barsj *float64,
) res.Code {
	return res.Code(
		C.MSK_getbarsj(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(j),
			(*C.MSKrealt)(barsj),
		),
	)
}

// GetBarsSlice is wrapping [MSK_getbarsslice]
//
// function MSK_getbarsslice has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - slicesize: MSKint64t
//   - barsslice: MSKrealt *
//
// [MSK_getbarsslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetBarsSlice(
	whichsol SolType,
	first int32,
	last int32,
	slicesize int64,
	barsslice *float64,
) res.Code {
	return res.Code(
		C.MSK_getbarsslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			C.MSKint64t(slicesize),
			(*C.MSKrealt)(barsslice),
		),
	)
}

// GetBarvarname is wrapping [MSK_getbarvarname]
//
// function MSK_getbarvarname has following parameters:
//   - task: MSKtask_t
//   - i: MSKint32t
//   - sizename: MSKint32t
//   - name: char *
//
// [MSK_getbarvarname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetBarvarname(
	i int32,
	sizename int32,
	name *byte,
) res.Code {
	return res.Code(
		C.MSK_getbarvarname(
			task.task,
			C.MSKint32t(i),
			C.MSKint32t(sizename),
			(*C.char)(unsafe.Pointer(name)),
		),
	)
}

// GetBarvarnameindex is wrapping [MSK_getbarvarnameindex]
//
// function MSK_getbarvarnameindex has following parameters:
//   - task: MSKtask_t
//   - somename: const char *
//   - asgn: MSKint32t *
//   - index: MSKint32t *
//
// [MSK_getbarvarnameindex]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetBarvarnameindex(
	somename *byte,
	asgn *int32,
	index *int32,
) res.Code {
	return res.Code(
		C.MSK_getbarvarnameindex(
			task.task,
			(*C.char)(unsafe.Pointer(somename)),
			(*C.MSKint32t)(asgn),
			(*C.MSKint32t)(index),
		),
	)
}

// GetBarvarnamelen is wrapping [MSK_getbarvarnamelen]
//
// function MSK_getbarvarnamelen has following parameters:
//   - task: MSKtask_t
//   - i: MSKint32t
//   - len: MSKint32t *
//
// [MSK_getbarvarnamelen]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetBarvarnamelen(
	i int32,
	len *int32,
) res.Code {
	return res.Code(
		C.MSK_getbarvarnamelen(
			task.task,
			C.MSKint32t(i),
			(*C.MSKint32t)(len),
		),
	)
}

// GetBarxj is wrapping [MSK_getbarxj]
//
// function MSK_getbarxj has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - j: MSKint32t
//   - barxj: MSKrealt *
//
// [MSK_getbarxj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetBarxj(
	whichsol SolType,
	j int32,
	barxj *float64,
) res.Code {
	return res.Code(
		C.MSK_getbarxj(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(j),
			(*C.MSKrealt)(barxj),
		),
	)
}

// GetBarxSlice is wrapping [MSK_getbarxslice]
//
// function MSK_getbarxslice has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - slicesize: MSKint64t
//   - barxslice: MSKrealt *
//
// [MSK_getbarxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetBarxSlice(
	whichsol SolType,
	first int32,
	last int32,
	slicesize int64,
	barxslice *float64,
) res.Code {
	return res.Code(
		C.MSK_getbarxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			C.MSKint64t(slicesize),
			(*C.MSKrealt)(barxslice),
		),
	)
}

// GetC is wrapping [MSK_getc]
//
// function MSK_getc has following parameters:
//   - task: MSKtask_t
//   - c: MSKrealt *
//
// [MSK_getc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetC(
	c *float64,
) res.Code {
	return res.Code(
		C.MSK_getc(
			task.task,
			(*C.MSKrealt)(c),
		),
	)
}

// GetCfix is wrapping [MSK_getcfix]
//
// function MSK_getcfix has following parameters:
//   - task: MSKtask_t
//   - cfix: MSKrealt *
//
// [MSK_getcfix]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetCfix(
	cfix *float64,
) res.Code {
	return res.Code(
		C.MSK_getcfix(
			task.task,
			(*C.MSKrealt)(cfix),
		),
	)
}

// GetCj is wrapping [MSK_getcj]
//
// function MSK_getcj has following parameters:
//   - task: MSKtask_t
//   - j: MSKint32t
//   - cj: MSKrealt *
//
// [MSK_getcj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetCj(
	j int32,
	cj *float64,
) res.Code {
	return res.Code(
		C.MSK_getcj(
			task.task,
			C.MSKint32t(j),
			(*C.MSKrealt)(cj),
		),
	)
}

// GetCList is wrapping [MSK_getclist]
//
// function MSK_getclist has following parameters:
//   - task: MSKtask_t
//   - num: MSKint32t
//   - subj: const MSKint32t *
//   - c: MSKrealt *
//
// [MSK_getclist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetCList(
	num int32,
	subj *int32,
	c *float64,
) res.Code {
	return res.Code(
		C.MSK_getclist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(c),
		),
	)
}

// GetConbound is wrapping [MSK_getconbound]
//
// function MSK_getconbound has following parameters:
//   - task: MSKtask_t
//   - i: MSKint32t
//   - bk: MSKboundkeye *
//   - bl: MSKrealt *
//   - bu: MSKrealt *
//
// [MSK_getconbound]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetConbound(
	i int32,
	bk *BoundKey,
	bl *float64,
	bu *float64,
) res.Code {
	return res.Code(
		C.MSK_getconbound(
			task.task,
			C.MSKint32t(i),
			(*C.MSKboundkeye)(bk),
			(*C.MSKrealt)(bl),
			(*C.MSKrealt)(bu),
		),
	)
}

// GetConboundSlice is wrapping [MSK_getconboundslice]
//
// function MSK_getconboundslice has following parameters:
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - bk: MSKboundkeye *
//   - bl: MSKrealt *
//   - bu: MSKrealt *
//
// [MSK_getconboundslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetConboundSlice(
	first int32,
	last int32,
	bk *BoundKey,
	bl *float64,
	bu *float64,
) res.Code {
	return res.Code(
		C.MSK_getconboundslice(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKboundkeye)(bk),
			(*C.MSKrealt)(bl),
			(*C.MSKrealt)(bu),
		),
	)
}

// GetCone is wrapping [MSK_getcone]
//
// function MSK_getcone has following parameters:
//   - task: MSKtask_t
//   - k: MSKint32t
//   - ct: MSKconetypee *
//   - conepar: MSKrealt *
//   - nummem: MSKint32t *
//   - submem: MSKint32t *
//
// [MSK_getcone]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetCone(
	k int32,
	ct *ConeType,
	conepar *float64,
	nummem *int32,
	submem *int32,
) res.Code {
	return res.Code(
		C.MSK_getcone(
			task.task,
			C.MSKint32t(k),
			(*C.MSKconetypee)(ct),
			(*C.MSKrealt)(conepar),
			(*C.MSKint32t)(nummem),
			(*C.MSKint32t)(submem),
		),
	)
}

// GetConeinfo is wrapping [MSK_getconeinfo]
//
// function MSK_getconeinfo has following parameters:
//   - task: MSKtask_t
//   - k: MSKint32t
//   - ct: MSKconetypee *
//   - conepar: MSKrealt *
//   - nummem: MSKint32t *
//
// [MSK_getconeinfo]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetConeinfo(
	k int32,
	ct *ConeType,
	conepar *float64,
	nummem *int32,
) res.Code {
	return res.Code(
		C.MSK_getconeinfo(
			task.task,
			C.MSKint32t(k),
			(*C.MSKconetypee)(ct),
			(*C.MSKrealt)(conepar),
			(*C.MSKint32t)(nummem),
		),
	)
}

// GetConename is wrapping [MSK_getconename]
//
// function MSK_getconename has following parameters:
//   - task: MSKtask_t
//   - i: MSKint32t
//   - sizename: MSKint32t
//   - name: char *
//
// [MSK_getconename]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetConename(
	i int32,
	sizename int32,
	name *byte,
) res.Code {
	return res.Code(
		C.MSK_getconename(
			task.task,
			C.MSKint32t(i),
			C.MSKint32t(sizename),
			(*C.char)(unsafe.Pointer(name)),
		),
	)
}

// GetConenameindex is wrapping [MSK_getconenameindex]
//
// function MSK_getconenameindex has following parameters:
//   - task: MSKtask_t
//   - somename: const char *
//   - asgn: MSKint32t *
//   - index: MSKint32t *
//
// [MSK_getconenameindex]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetConenameindex(
	somename *byte,
	asgn *int32,
	index *int32,
) res.Code {
	return res.Code(
		C.MSK_getconenameindex(
			task.task,
			(*C.char)(unsafe.Pointer(somename)),
			(*C.MSKint32t)(asgn),
			(*C.MSKint32t)(index),
		),
	)
}

// GetConenamelen is wrapping [MSK_getconenamelen]
//
// function MSK_getconenamelen has following parameters:
//   - task: MSKtask_t
//   - i: MSKint32t
//   - len: MSKint32t *
//
// [MSK_getconenamelen]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetConenamelen(
	i int32,
	len *int32,
) res.Code {
	return res.Code(
		C.MSK_getconenamelen(
			task.task,
			C.MSKint32t(i),
			(*C.MSKint32t)(len),
		),
	)
}

// GetConname is wrapping [MSK_getconname]
//
// function MSK_getconname has following parameters:
//   - task: MSKtask_t
//   - i: MSKint32t
//   - sizename: MSKint32t
//   - name: char *
//
// [MSK_getconname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetConname(
	i int32,
	sizename int32,
	name *byte,
) res.Code {
	return res.Code(
		C.MSK_getconname(
			task.task,
			C.MSKint32t(i),
			C.MSKint32t(sizename),
			(*C.char)(unsafe.Pointer(name)),
		),
	)
}

// GetConnameindex is wrapping [MSK_getconnameindex]
//
// function MSK_getconnameindex has following parameters:
//   - task: MSKtask_t
//   - somename: const char *
//   - asgn: MSKint32t *
//   - index: MSKint32t *
//
// [MSK_getconnameindex]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetConnameindex(
	somename *byte,
	asgn *int32,
	index *int32,
) res.Code {
	return res.Code(
		C.MSK_getconnameindex(
			task.task,
			(*C.char)(unsafe.Pointer(somename)),
			(*C.MSKint32t)(asgn),
			(*C.MSKint32t)(index),
		),
	)
}

// GetConnamelen is wrapping [MSK_getconnamelen]
//
// function MSK_getconnamelen has following parameters:
//   - task: MSKtask_t
//   - i: MSKint32t
//   - len: MSKint32t *
//
// [MSK_getconnamelen]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetConnamelen(
	i int32,
	len *int32,
) res.Code {
	return res.Code(
		C.MSK_getconnamelen(
			task.task,
			C.MSKint32t(i),
			(*C.MSKint32t)(len),
		),
	)
}

// GetCSlice is wrapping [MSK_getcslice]
//
// function MSK_getcslice has following parameters:
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - c: MSKrealt *
//
// [MSK_getcslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetCSlice(
	first int32,
	last int32,
	c *float64,
) res.Code {
	return res.Code(
		C.MSK_getcslice(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(c),
		),
	)
}

// GetDimbarvarj is wrapping [MSK_getdimbarvarj]
//
// function MSK_getdimbarvarj has following parameters:
//   - task: MSKtask_t
//   - j: MSKint32t
//   - dimbarvarj: MSKint32t *
//
// [MSK_getdimbarvarj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetDimbarvarj(
	j int32,
	dimbarvarj *int32,
) res.Code {
	return res.Code(
		C.MSK_getdimbarvarj(
			task.task,
			C.MSKint32t(j),
			(*C.MSKint32t)(dimbarvarj),
		),
	)
}

// GetDjcafeidxList is wrapping [MSK_getdjcafeidxlist]
//
// function MSK_getdjcafeidxlist has following parameters:
//   - task: MSKtask_t
//   - djcidx: MSKint64t
//   - afeidxlist: MSKint64t *
//
// [MSK_getdjcafeidxlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetDjcafeidxList(
	djcidx int64,
	afeidxlist *int64,
) res.Code {
	return res.Code(
		C.MSK_getdjcafeidxlist(
			task.task,
			C.MSKint64t(djcidx),
			(*C.MSKint64t)(afeidxlist),
		),
	)
}

// GetDjcb is wrapping [MSK_getdjcb]
//
// function MSK_getdjcb has following parameters:
//   - task: MSKtask_t
//   - djcidx: MSKint64t
//   - b: MSKrealt *
//
// [MSK_getdjcb]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetDjcb(
	djcidx int64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_getdjcb(
			task.task,
			C.MSKint64t(djcidx),
			(*C.MSKrealt)(b),
		),
	)
}

// GetDjcdomainidxList is wrapping [MSK_getdjcdomainidxlist]
//
// function MSK_getdjcdomainidxlist has following parameters:
//   - task: MSKtask_t
//   - djcidx: MSKint64t
//   - domidxlist: MSKint64t *
//
// [MSK_getdjcdomainidxlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetDjcdomainidxList(
	djcidx int64,
	domidxlist *int64,
) res.Code {
	return res.Code(
		C.MSK_getdjcdomainidxlist(
			task.task,
			C.MSKint64t(djcidx),
			(*C.MSKint64t)(domidxlist),
		),
	)
}

// GetDjcname is wrapping [MSK_getdjcname]
//
// function MSK_getdjcname has following parameters:
//   - task: MSKtask_t
//   - djcidx: MSKint64t
//   - sizename: MSKint32t
//   - name: char *
//
// [MSK_getdjcname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetDjcname(
	djcidx int64,
	sizename int32,
	name *byte,
) res.Code {
	return res.Code(
		C.MSK_getdjcname(
			task.task,
			C.MSKint64t(djcidx),
			C.MSKint32t(sizename),
			(*C.char)(unsafe.Pointer(name)),
		),
	)
}

// GetDjcnamelen is wrapping [MSK_getdjcnamelen]
//
// function MSK_getdjcnamelen has following parameters:
//   - task: MSKtask_t
//   - djcidx: MSKint64t
//   - len: MSKint32t *
//
// [MSK_getdjcnamelen]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetDjcnamelen(
	djcidx int64,
	len *int32,
) res.Code {
	return res.Code(
		C.MSK_getdjcnamelen(
			task.task,
			C.MSKint64t(djcidx),
			(*C.MSKint32t)(len),
		),
	)
}

// GetDjcnumafe is wrapping [MSK_getdjcnumafe]
//
// function MSK_getdjcnumafe has following parameters:
//   - task: MSKtask_t
//   - djcidx: MSKint64t
//   - numafe: MSKint64t *
//
// [MSK_getdjcnumafe]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetDjcnumafe(
	djcidx int64,
	numafe *int64,
) res.Code {
	return res.Code(
		C.MSK_getdjcnumafe(
			task.task,
			C.MSKint64t(djcidx),
			(*C.MSKint64t)(numafe),
		),
	)
}

// GetDjcnumafetot is wrapping [MSK_getdjcnumafetot]
//
// function MSK_getdjcnumafetot has following parameters:
//   - task: MSKtask_t
//   - numafetot: MSKint64t *
//
// [MSK_getdjcnumafetot]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetDjcnumafetot(
	numafetot *int64,
) res.Code {
	return res.Code(
		C.MSK_getdjcnumafetot(
			task.task,
			(*C.MSKint64t)(numafetot),
		),
	)
}

// GetDjcnumdomain is wrapping [MSK_getdjcnumdomain]
//
// function MSK_getdjcnumdomain has following parameters:
//   - task: MSKtask_t
//   - djcidx: MSKint64t
//   - numdomain: MSKint64t *
//
// [MSK_getdjcnumdomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetDjcnumdomain(
	djcidx int64,
	numdomain *int64,
) res.Code {
	return res.Code(
		C.MSK_getdjcnumdomain(
			task.task,
			C.MSKint64t(djcidx),
			(*C.MSKint64t)(numdomain),
		),
	)
}

// GetDjcnumdomaintot is wrapping [MSK_getdjcnumdomaintot]
//
// function MSK_getdjcnumdomaintot has following parameters:
//   - task: MSKtask_t
//   - numdomaintot: MSKint64t *
//
// [MSK_getdjcnumdomaintot]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetDjcnumdomaintot(
	numdomaintot *int64,
) res.Code {
	return res.Code(
		C.MSK_getdjcnumdomaintot(
			task.task,
			(*C.MSKint64t)(numdomaintot),
		),
	)
}

// GetDjcnumterm is wrapping [MSK_getdjcnumterm]
//
// function MSK_getdjcnumterm has following parameters:
//   - task: MSKtask_t
//   - djcidx: MSKint64t
//   - numterm: MSKint64t *
//
// [MSK_getdjcnumterm]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetDjcnumterm(
	djcidx int64,
	numterm *int64,
) res.Code {
	return res.Code(
		C.MSK_getdjcnumterm(
			task.task,
			C.MSKint64t(djcidx),
			(*C.MSKint64t)(numterm),
		),
	)
}

// GetDjcnumtermtot is wrapping [MSK_getdjcnumtermtot]
//
// function MSK_getdjcnumtermtot has following parameters:
//   - task: MSKtask_t
//   - numtermtot: MSKint64t *
//
// [MSK_getdjcnumtermtot]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetDjcnumtermtot(
	numtermtot *int64,
) res.Code {
	return res.Code(
		C.MSK_getdjcnumtermtot(
			task.task,
			(*C.MSKint64t)(numtermtot),
		),
	)
}

// GetDjcs is wrapping [MSK_getdjcs]
//
// function MSK_getdjcs has following parameters:
//   - task: MSKtask_t
//   - domidxlist: MSKint64t *
//   - afeidxlist: MSKint64t *
//   - b: MSKrealt *
//   - termsizelist: MSKint64t *
//   - numterms: MSKint64t *
//
// [MSK_getdjcs]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetDjcs(
	domidxlist *int64,
	afeidxlist *int64,
	b *float64,
	termsizelist *int64,
	numterms *int64,
) res.Code {
	return res.Code(
		C.MSK_getdjcs(
			task.task,
			(*C.MSKint64t)(domidxlist),
			(*C.MSKint64t)(afeidxlist),
			(*C.MSKrealt)(b),
			(*C.MSKint64t)(termsizelist),
			(*C.MSKint64t)(numterms),
		),
	)
}

// GetDjctermsizeList is wrapping [MSK_getdjctermsizelist]
//
// function MSK_getdjctermsizelist has following parameters:
//   - task: MSKtask_t
//   - djcidx: MSKint64t
//   - termsizelist: MSKint64t *
//
// [MSK_getdjctermsizelist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetDjctermsizeList(
	djcidx int64,
	termsizelist *int64,
) res.Code {
	return res.Code(
		C.MSK_getdjctermsizelist(
			task.task,
			C.MSKint64t(djcidx),
			(*C.MSKint64t)(termsizelist),
		),
	)
}

// GetDomainn is wrapping [MSK_getdomainn]
//
// function MSK_getdomainn has following parameters:
//   - task: MSKtask_t
//   - domidx: MSKint64t
//   - n: MSKint64t *
//
// [MSK_getdomainn]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetDomainn(
	domidx int64,
	n *int64,
) res.Code {
	return res.Code(
		C.MSK_getdomainn(
			task.task,
			C.MSKint64t(domidx),
			(*C.MSKint64t)(n),
		),
	)
}

// GetDomainname is wrapping [MSK_getdomainname]
//
// function MSK_getdomainname has following parameters:
//   - task: MSKtask_t
//   - domidx: MSKint64t
//   - sizename: MSKint32t
//   - name: char *
//
// [MSK_getdomainname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetDomainname(
	domidx int64,
	sizename int32,
	name *byte,
) res.Code {
	return res.Code(
		C.MSK_getdomainname(
			task.task,
			C.MSKint64t(domidx),
			C.MSKint32t(sizename),
			(*C.char)(unsafe.Pointer(name)),
		),
	)
}

// GetDomainnamelen is wrapping [MSK_getdomainnamelen]
//
// function MSK_getdomainnamelen has following parameters:
//   - task: MSKtask_t
//   - domidx: MSKint64t
//   - len: MSKint32t *
//
// [MSK_getdomainnamelen]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetDomainnamelen(
	domidx int64,
	len *int32,
) res.Code {
	return res.Code(
		C.MSK_getdomainnamelen(
			task.task,
			C.MSKint64t(domidx),
			(*C.MSKint32t)(len),
		),
	)
}

// GetDomaintype is wrapping [MSK_getdomaintype]
//
// function MSK_getdomaintype has following parameters:
//   - task: MSKtask_t
//   - domidx: MSKint64t
//   - domtype: MSKdomaintypee *
//
// [MSK_getdomaintype]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetDomaintype(
	domidx int64,
	domtype *DomainType,
) res.Code {
	return res.Code(
		C.MSK_getdomaintype(
			task.task,
			C.MSKint64t(domidx),
			(*C.MSKdomaintypee)(domtype),
		),
	)
}

// GetDouinf is wrapping [MSK_getdouinf]
//
// function MSK_getdouinf has following parameters:
//   - task: MSKtask_t
//   - whichdinf: MSKdinfiteme
//   - dvalue: MSKrealt *
//
// [MSK_getdouinf]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetDouinf(
	whichdinf DInfItem,
	dvalue *float64,
) res.Code {
	return res.Code(
		C.MSK_getdouinf(
			task.task,
			C.MSKdinfiteme(whichdinf),
			(*C.MSKrealt)(dvalue),
		),
	)
}

// GetDouparam is wrapping [MSK_getdouparam]
//
// function MSK_getdouparam has following parameters:
//   - task: MSKtask_t
//   - param: MSKdparame
//   - parvalue: MSKrealt *
//
// [MSK_getdouparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetDouparam(
	param DParam,
	parvalue *float64,
) res.Code {
	return res.Code(
		C.MSK_getdouparam(
			task.task,
			C.MSKdparame(param),
			(*C.MSKrealt)(parvalue),
		),
	)
}

// GetDualobj is wrapping [MSK_getdualobj]
//
// function MSK_getdualobj has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - dualobj: MSKrealt *
//
// [MSK_getdualobj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetDualobj(
	whichsol SolType,
	dualobj *float64,
) res.Code {
	return res.Code(
		C.MSK_getdualobj(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(dualobj),
		),
	)
}

// GetDualsolutionnorms is wrapping [MSK_getdualsolutionnorms]
//
// function MSK_getdualsolutionnorms has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - nrmy: MSKrealt *
//   - nrmslc: MSKrealt *
//   - nrmsuc: MSKrealt *
//   - nrmslx: MSKrealt *
//   - nrmsux: MSKrealt *
//   - nrmsnx: MSKrealt *
//   - nrmbars: MSKrealt *
//
// [MSK_getdualsolutionnorms]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetDualsolutionnorms(
	whichsol SolType,
	nrmy *float64,
	nrmslc *float64,
	nrmsuc *float64,
	nrmslx *float64,
	nrmsux *float64,
	nrmsnx *float64,
	nrmbars *float64,
) res.Code {
	return res.Code(
		C.MSK_getdualsolutionnorms(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(nrmy),
			(*C.MSKrealt)(nrmslc),
			(*C.MSKrealt)(nrmsuc),
			(*C.MSKrealt)(nrmslx),
			(*C.MSKrealt)(nrmsux),
			(*C.MSKrealt)(nrmsnx),
			(*C.MSKrealt)(nrmbars),
		),
	)
}

// GetDviolacc is wrapping [MSK_getdviolacc]
//
// function MSK_getdviolacc has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - numaccidx: MSKint64t
//   - accidxlist: const MSKint64t *
//   - viol: MSKrealt *
//
// [MSK_getdviolacc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetDviolacc(
	whichsol SolType,
	numaccidx int64,
	accidxlist *int64,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getdviolacc(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint64t(numaccidx),
			(*C.MSKint64t)(accidxlist),
			(*C.MSKrealt)(viol),
		),
	)
}

// GetDviolbarvar is wrapping [MSK_getdviolbarvar]
//
// function MSK_getdviolbarvar has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - viol: MSKrealt *
//
// [MSK_getdviolbarvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetDviolbarvar(
	whichsol SolType,
	num int32,
	sub *int32,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getdviolbarvar(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(viol),
		),
	)
}

// GetDviolcon is wrapping [MSK_getdviolcon]
//
// function MSK_getdviolcon has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - viol: MSKrealt *
//
// [MSK_getdviolcon]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetDviolcon(
	whichsol SolType,
	num int32,
	sub *int32,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getdviolcon(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(viol),
		),
	)
}

// GetDviolcones is wrapping [MSK_getdviolcones]
//
// function MSK_getdviolcones has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - viol: MSKrealt *
//
// [MSK_getdviolcones]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetDviolcones(
	whichsol SolType,
	num int32,
	sub *int32,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getdviolcones(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(viol),
		),
	)
}

// GetDviolvar is wrapping [MSK_getdviolvar]
//
// function MSK_getdviolvar has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - viol: MSKrealt *
//
// [MSK_getdviolvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetDviolvar(
	whichsol SolType,
	num int32,
	sub *int32,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getdviolvar(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(viol),
		),
	)
}

// GetInfindex is wrapping [MSK_getinfindex]
//
// function MSK_getinfindex has following parameters:
//   - task: MSKtask_t
//   - inftype: MSKinftypee
//   - infname: const char *
//   - infindex: MSKint32t *
//
// [MSK_getinfindex]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetInfindex(
	inftype InfType,
	infname *byte,
	infindex *int32,
) res.Code {
	return res.Code(
		C.MSK_getinfindex(
			task.task,
			C.MSKinftypee(inftype),
			(*C.char)(unsafe.Pointer(infname)),
			(*C.MSKint32t)(infindex),
		),
	)
}

// GetInfmax is wrapping [MSK_getinfmax]
//
// function MSK_getinfmax has following parameters:
//   - task: MSKtask_t
//   - inftype: MSKinftypee
//   - infmax: MSKint32t *
//
// [MSK_getinfmax]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetInfmax(
	inftype InfType,
	infmax *int32,
) res.Code {
	return res.Code(
		C.MSK_getinfmax(
			task.task,
			C.MSKinftypee(inftype),
			(*C.MSKint32t)(infmax),
		),
	)
}

// GetInfname is wrapping [MSK_getinfname]
//
// function MSK_getinfname has following parameters:
//   - task: MSKtask_t
//   - inftype: MSKinftypee
//   - whichinf: MSKint32t
//   - infname: char *
//
// [MSK_getinfname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetInfname(
	inftype InfType,
	whichinf int32,
	infname *byte,
) res.Code {
	return res.Code(
		C.MSK_getinfname(
			task.task,
			C.MSKinftypee(inftype),
			C.MSKint32t(whichinf),
			(*C.char)(unsafe.Pointer(infname)),
		),
	)
}

// GetIntinf is wrapping [MSK_getintinf]
//
// function MSK_getintinf has following parameters:
//   - task: MSKtask_t
//   - whichiinf: MSKiinfiteme
//   - ivalue: MSKint32t *
//
// [MSK_getintinf]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetIntinf(
	whichiinf IInfItem,
	ivalue *int32,
) res.Code {
	return res.Code(
		C.MSK_getintinf(
			task.task,
			C.MSKiinfiteme(whichiinf),
			(*C.MSKint32t)(ivalue),
		),
	)
}

// GetIntparam is wrapping [MSK_getintparam]
//
// function MSK_getintparam has following parameters:
//   - task: MSKtask_t
//   - param: MSKiparame
//   - parvalue: MSKint32t *
//
// [MSK_getintparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetIntparam(
	param IParam,
	parvalue *int32,
) res.Code {
	return res.Code(
		C.MSK_getintparam(
			task.task,
			C.MSKiparame(param),
			(*C.MSKint32t)(parvalue),
		),
	)
}

// GetLasterror is wrapping [MSK_getlasterror]
//
// function MSK_getlasterror has following parameters:
//   - task: MSKtask_t
//   - lastrescode: MSKrescodee *
//   - sizelastmsg: MSKint32t
//   - lastmsglen: MSKint32t *
//   - lastmsg: char *
//
// [MSK_getlasterror]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetLasterror(
	lastrescode *res.Code,
	sizelastmsg int32,
	lastmsglen *int32,
	lastmsg *byte,
) res.Code {
	return res.Code(
		C.MSK_getlasterror(
			task.task,
			(*C.MSKrescodee)(lastrescode),
			C.MSKint32t(sizelastmsg),
			(*C.MSKint32t)(lastmsglen),
			(*C.char)(unsafe.Pointer(lastmsg)),
		),
	)
}

// GetLasterror64 is wrapping [MSK_getlasterror64]
//
// function MSK_getlasterror64 has following parameters:
//   - task: MSKtask_t
//   - lastrescode: MSKrescodee *
//   - sizelastmsg: MSKint64t
//   - lastmsglen: MSKint64t *
//   - lastmsg: char *
//
// [MSK_getlasterror64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetLasterror64(
	lastrescode *res.Code,
	sizelastmsg int64,
	lastmsglen *int64,
	lastmsg *byte,
) res.Code {
	return res.Code(
		C.MSK_getlasterror64(
			task.task,
			(*C.MSKrescodee)(lastrescode),
			C.MSKint64t(sizelastmsg),
			(*C.MSKint64t)(lastmsglen),
			(*C.char)(unsafe.Pointer(lastmsg)),
		),
	)
}

// GetLenbarvarj is wrapping [MSK_getlenbarvarj]
//
// function MSK_getlenbarvarj has following parameters:
//   - task: MSKtask_t
//   - j: MSKint32t
//   - lenbarvarj: MSKint64t *
//
// [MSK_getlenbarvarj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetLenbarvarj(
	j int32,
	lenbarvarj *int64,
) res.Code {
	return res.Code(
		C.MSK_getlenbarvarj(
			task.task,
			C.MSKint32t(j),
			(*C.MSKint64t)(lenbarvarj),
		),
	)
}

// GetLintinf is wrapping [MSK_getlintinf]
//
// function MSK_getlintinf has following parameters:
//   - task: MSKtask_t
//   - whichliinf: MSKliinfiteme
//   - ivalue: MSKint64t *
//
// [MSK_getlintinf]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetLintinf(
	whichliinf LIInfItem,
	ivalue *int64,
) res.Code {
	return res.Code(
		C.MSK_getlintinf(
			task.task,
			C.MSKliinfiteme(whichliinf),
			(*C.MSKint64t)(ivalue),
		),
	)
}

// GetMaxnamelen is wrapping [MSK_getmaxnamelen]
//
// function MSK_getmaxnamelen has following parameters:
//   - task: MSKtask_t
//   - maxlen: MSKint32t *
//
// [MSK_getmaxnamelen]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetMaxnamelen(
	maxlen *int32,
) res.Code {
	return res.Code(
		C.MSK_getmaxnamelen(
			task.task,
			(*C.MSKint32t)(maxlen),
		),
	)
}

// GetMaxnumanz is wrapping [MSK_getmaxnumanz]
//
// function MSK_getmaxnumanz has following parameters:
//   - task: MSKtask_t
//   - maxnumanz: MSKint32t *
//
// [MSK_getmaxnumanz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetMaxnumanz(
	maxnumanz *int32,
) res.Code {
	return res.Code(
		C.MSK_getmaxnumanz(
			task.task,
			(*C.MSKint32t)(maxnumanz),
		),
	)
}

// GetMaxnumanz64 is wrapping [MSK_getmaxnumanz64]
//
// function MSK_getmaxnumanz64 has following parameters:
//   - task: MSKtask_t
//   - maxnumanz: MSKint64t *
//
// [MSK_getmaxnumanz64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetMaxnumanz64(
	maxnumanz *int64,
) res.Code {
	return res.Code(
		C.MSK_getmaxnumanz64(
			task.task,
			(*C.MSKint64t)(maxnumanz),
		),
	)
}

// GetMaxnumbarvar is wrapping [MSK_getmaxnumbarvar]
//
// function MSK_getmaxnumbarvar has following parameters:
//   - task: MSKtask_t
//   - maxnumbarvar: MSKint32t *
//
// [MSK_getmaxnumbarvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetMaxnumbarvar(
	maxnumbarvar *int32,
) res.Code {
	return res.Code(
		C.MSK_getmaxnumbarvar(
			task.task,
			(*C.MSKint32t)(maxnumbarvar),
		),
	)
}

// GetMaxnumcon is wrapping [MSK_getmaxnumcon]
//
// function MSK_getmaxnumcon has following parameters:
//   - task: MSKtask_t
//   - maxnumcon: MSKint32t *
//
// [MSK_getmaxnumcon]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetMaxnumcon(
	maxnumcon *int32,
) res.Code {
	return res.Code(
		C.MSK_getmaxnumcon(
			task.task,
			(*C.MSKint32t)(maxnumcon),
		),
	)
}

// GetMaxnumcone is wrapping [MSK_getmaxnumcone]
//
// function MSK_getmaxnumcone has following parameters:
//   - task: MSKtask_t
//   - maxnumcone: MSKint32t *
//
// [MSK_getmaxnumcone]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetMaxnumcone(
	maxnumcone *int32,
) res.Code {
	return res.Code(
		C.MSK_getmaxnumcone(
			task.task,
			(*C.MSKint32t)(maxnumcone),
		),
	)
}

// GetMaxnumqnz is wrapping [MSK_getmaxnumqnz]
//
// function MSK_getmaxnumqnz has following parameters:
//   - task: MSKtask_t
//   - maxnumqnz: MSKint32t *
//
// [MSK_getmaxnumqnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetMaxnumqnz(
	maxnumqnz *int32,
) res.Code {
	return res.Code(
		C.MSK_getmaxnumqnz(
			task.task,
			(*C.MSKint32t)(maxnumqnz),
		),
	)
}

// GetMaxnumqnz64 is wrapping [MSK_getmaxnumqnz64]
//
// function MSK_getmaxnumqnz64 has following parameters:
//   - task: MSKtask_t
//   - maxnumqnz: MSKint64t *
//
// [MSK_getmaxnumqnz64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetMaxnumqnz64(
	maxnumqnz *int64,
) res.Code {
	return res.Code(
		C.MSK_getmaxnumqnz64(
			task.task,
			(*C.MSKint64t)(maxnumqnz),
		),
	)
}

// GetMaxnumvar is wrapping [MSK_getmaxnumvar]
//
// function MSK_getmaxnumvar has following parameters:
//   - task: MSKtask_t
//   - maxnumvar: MSKint32t *
//
// [MSK_getmaxnumvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetMaxnumvar(
	maxnumvar *int32,
) res.Code {
	return res.Code(
		C.MSK_getmaxnumvar(
			task.task,
			(*C.MSKint32t)(maxnumvar),
		),
	)
}

// GetMemusagetask is wrapping [MSK_getmemusagetask]
//
// function MSK_getmemusagetask has following parameters:
//   - task: MSKtask_t
//   - meminuse: MSKint64t *
//   - maxmemuse: MSKint64t *
//
// [MSK_getmemusagetask]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetMemusagetask(
	meminuse *int64,
	maxmemuse *int64,
) res.Code {
	return res.Code(
		C.MSK_getmemusagetask(
			task.task,
			(*C.MSKint64t)(meminuse),
			(*C.MSKint64t)(maxmemuse),
		),
	)
}

// GetNadouinf is wrapping [MSK_getnadouinf]
//
// function MSK_getnadouinf has following parameters:
//   - task: MSKtask_t
//   - infitemname: const char *
//   - dvalue: MSKrealt *
//
// [MSK_getnadouinf]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetNadouinf(
	infitemname *byte,
	dvalue *float64,
) res.Code {
	return res.Code(
		C.MSK_getnadouinf(
			task.task,
			(*C.char)(unsafe.Pointer(infitemname)),
			(*C.MSKrealt)(dvalue),
		),
	)
}

// GetNadouparam is wrapping [MSK_getnadouparam]
//
// function MSK_getnadouparam has following parameters:
//   - task: MSKtask_t
//   - paramname: const char *
//   - parvalue: MSKrealt *
//
// [MSK_getnadouparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetNadouparam(
	paramname *byte,
	parvalue *float64,
) res.Code {
	return res.Code(
		C.MSK_getnadouparam(
			task.task,
			(*C.char)(unsafe.Pointer(paramname)),
			(*C.MSKrealt)(parvalue),
		),
	)
}

// GetNaintinf is wrapping [MSK_getnaintinf]
//
// function MSK_getnaintinf has following parameters:
//   - task: MSKtask_t
//   - infitemname: const char *
//   - ivalue: MSKint32t *
//
// [MSK_getnaintinf]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetNaintinf(
	infitemname *byte,
	ivalue *int32,
) res.Code {
	return res.Code(
		C.MSK_getnaintinf(
			task.task,
			(*C.char)(unsafe.Pointer(infitemname)),
			(*C.MSKint32t)(ivalue),
		),
	)
}

// GetNaintparam is wrapping [MSK_getnaintparam]
//
// function MSK_getnaintparam has following parameters:
//   - task: MSKtask_t
//   - paramname: const char *
//   - parvalue: MSKint32t *
//
// [MSK_getnaintparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetNaintparam(
	paramname *byte,
	parvalue *int32,
) res.Code {
	return res.Code(
		C.MSK_getnaintparam(
			task.task,
			(*C.char)(unsafe.Pointer(paramname)),
			(*C.MSKint32t)(parvalue),
		),
	)
}

// GetNastrparam is wrapping [MSK_getnastrparam]
//
// function MSK_getnastrparam has following parameters:
//   - task: MSKtask_t
//   - paramname: const char *
//   - sizeparamname: MSKint32t
//   - len: MSKint32t *
//   - parvalue: char *
//
// [MSK_getnastrparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetNastrparam(
	paramname *byte,
	sizeparamname int32,
	len *int32,
	parvalue *byte,
) res.Code {
	return res.Code(
		C.MSK_getnastrparam(
			task.task,
			(*C.char)(unsafe.Pointer(paramname)),
			C.MSKint32t(sizeparamname),
			(*C.MSKint32t)(len),
			(*C.char)(unsafe.Pointer(parvalue)),
		),
	)
}

// GetNumacc is wrapping [MSK_getnumacc]
//
// function MSK_getnumacc has following parameters:
//   - task: MSKtask_t
//   - num: MSKint64t *
//
// [MSK_getnumacc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetNumacc(
	num *int64,
) res.Code {
	return res.Code(
		C.MSK_getnumacc(
			task.task,
			(*C.MSKint64t)(num),
		),
	)
}

// GetNumafe is wrapping [MSK_getnumafe]
//
// function MSK_getnumafe has following parameters:
//   - task: MSKtask_t
//   - numafe: MSKint64t *
//
// [MSK_getnumafe]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetNumafe(
	numafe *int64,
) res.Code {
	return res.Code(
		C.MSK_getnumafe(
			task.task,
			(*C.MSKint64t)(numafe),
		),
	)
}

// GetNumanz is wrapping [MSK_getnumanz]
//
// function MSK_getnumanz has following parameters:
//   - task: MSKtask_t
//   - numanz: MSKint32t *
//
// [MSK_getnumanz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetNumanz(
	numanz *int32,
) res.Code {
	return res.Code(
		C.MSK_getnumanz(
			task.task,
			(*C.MSKint32t)(numanz),
		),
	)
}

// GetNumanz64 is wrapping [MSK_getnumanz64]
//
// function MSK_getnumanz64 has following parameters:
//   - task: MSKtask_t
//   - numanz: MSKint64t *
//
// [MSK_getnumanz64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetNumanz64(
	numanz *int64,
) res.Code {
	return res.Code(
		C.MSK_getnumanz64(
			task.task,
			(*C.MSKint64t)(numanz),
		),
	)
}

// GetNumbarablocktriplets is wrapping [MSK_getnumbarablocktriplets]
//
// function MSK_getnumbarablocktriplets has following parameters:
//   - task: MSKtask_t
//   - num: MSKint64t *
//
// [MSK_getnumbarablocktriplets]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetNumbarablocktriplets(
	num *int64,
) res.Code {
	return res.Code(
		C.MSK_getnumbarablocktriplets(
			task.task,
			(*C.MSKint64t)(num),
		),
	)
}

// GetNumbaranz is wrapping [MSK_getnumbaranz]
//
// function MSK_getnumbaranz has following parameters:
//   - task: MSKtask_t
//   - nz: MSKint64t *
//
// [MSK_getnumbaranz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetNumbaranz(
	nz *int64,
) res.Code {
	return res.Code(
		C.MSK_getnumbaranz(
			task.task,
			(*C.MSKint64t)(nz),
		),
	)
}

// GetNumbarcblocktriplets is wrapping [MSK_getnumbarcblocktriplets]
//
// function MSK_getnumbarcblocktriplets has following parameters:
//   - task: MSKtask_t
//   - num: MSKint64t *
//
// [MSK_getnumbarcblocktriplets]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetNumbarcblocktriplets(
	num *int64,
) res.Code {
	return res.Code(
		C.MSK_getnumbarcblocktriplets(
			task.task,
			(*C.MSKint64t)(num),
		),
	)
}

// GetNumbarcnz is wrapping [MSK_getnumbarcnz]
//
// function MSK_getnumbarcnz has following parameters:
//   - task: MSKtask_t
//   - nz: MSKint64t *
//
// [MSK_getnumbarcnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetNumbarcnz(
	nz *int64,
) res.Code {
	return res.Code(
		C.MSK_getnumbarcnz(
			task.task,
			(*C.MSKint64t)(nz),
		),
	)
}

// GetNumbarvar is wrapping [MSK_getnumbarvar]
//
// function MSK_getnumbarvar has following parameters:
//   - task: MSKtask_t
//   - numbarvar: MSKint32t *
//
// [MSK_getnumbarvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetNumbarvar(
	numbarvar *int32,
) res.Code {
	return res.Code(
		C.MSK_getnumbarvar(
			task.task,
			(*C.MSKint32t)(numbarvar),
		),
	)
}

// GetNumcon is wrapping [MSK_getnumcon]
//
// function MSK_getnumcon has following parameters:
//   - task: MSKtask_t
//   - numcon: MSKint32t *
//
// [MSK_getnumcon]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetNumcon(
	numcon *int32,
) res.Code {
	return res.Code(
		C.MSK_getnumcon(
			task.task,
			(*C.MSKint32t)(numcon),
		),
	)
}

// GetNumcone is wrapping [MSK_getnumcone]
//
// function MSK_getnumcone has following parameters:
//   - task: MSKtask_t
//   - numcone: MSKint32t *
//
// [MSK_getnumcone]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetNumcone(
	numcone *int32,
) res.Code {
	return res.Code(
		C.MSK_getnumcone(
			task.task,
			(*C.MSKint32t)(numcone),
		),
	)
}

// GetNumconemem is wrapping [MSK_getnumconemem]
//
// function MSK_getnumconemem has following parameters:
//   - task: MSKtask_t
//   - k: MSKint32t
//   - nummem: MSKint32t *
//
// [MSK_getnumconemem]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetNumconemem(
	k int32,
	nummem *int32,
) res.Code {
	return res.Code(
		C.MSK_getnumconemem(
			task.task,
			C.MSKint32t(k),
			(*C.MSKint32t)(nummem),
		),
	)
}

// GetNumdjc is wrapping [MSK_getnumdjc]
//
// function MSK_getnumdjc has following parameters:
//   - task: MSKtask_t
//   - num: MSKint64t *
//
// [MSK_getnumdjc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetNumdjc(
	num *int64,
) res.Code {
	return res.Code(
		C.MSK_getnumdjc(
			task.task,
			(*C.MSKint64t)(num),
		),
	)
}

// GetNumdomain is wrapping [MSK_getnumdomain]
//
// function MSK_getnumdomain has following parameters:
//   - task: MSKtask_t
//   - numdomain: MSKint64t *
//
// [MSK_getnumdomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetNumdomain(
	numdomain *int64,
) res.Code {
	return res.Code(
		C.MSK_getnumdomain(
			task.task,
			(*C.MSKint64t)(numdomain),
		),
	)
}

// GetNumintvar is wrapping [MSK_getnumintvar]
//
// function MSK_getnumintvar has following parameters:
//   - task: MSKtask_t
//   - numintvar: MSKint32t *
//
// [MSK_getnumintvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetNumintvar(
	numintvar *int32,
) res.Code {
	return res.Code(
		C.MSK_getnumintvar(
			task.task,
			(*C.MSKint32t)(numintvar),
		),
	)
}

// GetNumparam is wrapping [MSK_getnumparam]
//
// function MSK_getnumparam has following parameters:
//   - task: MSKtask_t
//   - partype: MSKparametertypee
//   - numparam: MSKint32t *
//
// [MSK_getnumparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetNumparam(
	partype ParameterType,
	numparam *int32,
) res.Code {
	return res.Code(
		C.MSK_getnumparam(
			task.task,
			C.MSKparametertypee(partype),
			(*C.MSKint32t)(numparam),
		),
	)
}

// GetNumqconknz is wrapping [MSK_getnumqconknz]
//
// function MSK_getnumqconknz has following parameters:
//   - task: MSKtask_t
//   - k: MSKint32t
//   - numqcnz: MSKint32t *
//
// [MSK_getnumqconknz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetNumqconknz(
	k int32,
	numqcnz *int32,
) res.Code {
	return res.Code(
		C.MSK_getnumqconknz(
			task.task,
			C.MSKint32t(k),
			(*C.MSKint32t)(numqcnz),
		),
	)
}

// GetNumqconknz64 is wrapping [MSK_getnumqconknz64]
//
// function MSK_getnumqconknz64 has following parameters:
//   - task: MSKtask_t
//   - k: MSKint32t
//   - numqcnz: MSKint64t *
//
// [MSK_getnumqconknz64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetNumqconknz64(
	k int32,
	numqcnz *int64,
) res.Code {
	return res.Code(
		C.MSK_getnumqconknz64(
			task.task,
			C.MSKint32t(k),
			(*C.MSKint64t)(numqcnz),
		),
	)
}

// GetNumqobjnz is wrapping [MSK_getnumqobjnz]
//
// function MSK_getnumqobjnz has following parameters:
//   - task: MSKtask_t
//   - numqonz: MSKint32t *
//
// [MSK_getnumqobjnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetNumqobjnz(
	numqonz *int32,
) res.Code {
	return res.Code(
		C.MSK_getnumqobjnz(
			task.task,
			(*C.MSKint32t)(numqonz),
		),
	)
}

// GetNumqobjnz64 is wrapping [MSK_getnumqobjnz64]
//
// function MSK_getnumqobjnz64 has following parameters:
//   - task: MSKtask_t
//   - numqonz: MSKint64t *
//
// [MSK_getnumqobjnz64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetNumqobjnz64(
	numqonz *int64,
) res.Code {
	return res.Code(
		C.MSK_getnumqobjnz64(
			task.task,
			(*C.MSKint64t)(numqonz),
		),
	)
}

// GetNumsymmat is wrapping [MSK_getnumsymmat]
//
// function MSK_getnumsymmat has following parameters:
//   - task: MSKtask_t
//   - num: MSKint64t *
//
// [MSK_getnumsymmat]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetNumsymmat(
	num *int64,
) res.Code {
	return res.Code(
		C.MSK_getnumsymmat(
			task.task,
			(*C.MSKint64t)(num),
		),
	)
}

// GetNumvar is wrapping [MSK_getnumvar]
//
// function MSK_getnumvar has following parameters:
//   - task: MSKtask_t
//   - numvar: MSKint32t *
//
// [MSK_getnumvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetNumvar(
	numvar *int32,
) res.Code {
	return res.Code(
		C.MSK_getnumvar(
			task.task,
			(*C.MSKint32t)(numvar),
		),
	)
}

// GetObjname is wrapping [MSK_getobjname]
//
// function MSK_getobjname has following parameters:
//   - task: MSKtask_t
//   - sizeobjname: MSKint32t
//   - objname: char *
//
// [MSK_getobjname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetObjname(
	sizeobjname int32,
	objname *byte,
) res.Code {
	return res.Code(
		C.MSK_getobjname(
			task.task,
			C.MSKint32t(sizeobjname),
			(*C.char)(unsafe.Pointer(objname)),
		),
	)
}

// GetObjnamelen is wrapping [MSK_getobjnamelen]
//
// function MSK_getobjnamelen has following parameters:
//   - task: MSKtask_t
//   - len: MSKint32t *
//
// [MSK_getobjnamelen]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetObjnamelen(
	len *int32,
) res.Code {
	return res.Code(
		C.MSK_getobjnamelen(
			task.task,
			(*C.MSKint32t)(len),
		),
	)
}

// GetObjsense is wrapping [MSK_getobjsense]
//
// function MSK_getobjsense has following parameters:
//   - task: MSKtask_t
//   - sense: MSKobjsensee *
//
// [MSK_getobjsense]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetObjsense(
	sense *ObjectiveSense,
) res.Code {
	return res.Code(
		C.MSK_getobjsense(
			task.task,
			(*C.MSKobjsensee)(sense),
		),
	)
}

// GetParammax is wrapping [MSK_getparammax]
//
// function MSK_getparammax has following parameters:
//   - task: MSKtask_t
//   - partype: MSKparametertypee
//   - parammax: MSKint32t *
//
// [MSK_getparammax]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetParammax(
	partype ParameterType,
	parammax *int32,
) res.Code {
	return res.Code(
		C.MSK_getparammax(
			task.task,
			C.MSKparametertypee(partype),
			(*C.MSKint32t)(parammax),
		),
	)
}

// GetParamname is wrapping [MSK_getparamname]
//
// function MSK_getparamname has following parameters:
//   - task: MSKtask_t
//   - partype: MSKparametertypee
//   - param: MSKint32t
//   - parname: char *
//
// [MSK_getparamname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetParamname(
	partype ParameterType,
	param int32,
	parname *byte,
) res.Code {
	return res.Code(
		C.MSK_getparamname(
			task.task,
			C.MSKparametertypee(partype),
			C.MSKint32t(param),
			(*C.char)(unsafe.Pointer(parname)),
		),
	)
}

// GetPowerdomainalpha is wrapping [MSK_getpowerdomainalpha]
//
// function MSK_getpowerdomainalpha has following parameters:
//   - task: MSKtask_t
//   - domidx: MSKint64t
//   - alpha: MSKrealt *
//
// [MSK_getpowerdomainalpha]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetPowerdomainalpha(
	domidx int64,
	alpha *float64,
) res.Code {
	return res.Code(
		C.MSK_getpowerdomainalpha(
			task.task,
			C.MSKint64t(domidx),
			(*C.MSKrealt)(alpha),
		),
	)
}

// GetPowerdomaininfo is wrapping [MSK_getpowerdomaininfo]
//
// function MSK_getpowerdomaininfo has following parameters:
//   - task: MSKtask_t
//   - domidx: MSKint64t
//   - n: MSKint64t *
//   - nleft: MSKint64t *
//
// [MSK_getpowerdomaininfo]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetPowerdomaininfo(
	domidx int64,
	n *int64,
	nleft *int64,
) res.Code {
	return res.Code(
		C.MSK_getpowerdomaininfo(
			task.task,
			C.MSKint64t(domidx),
			(*C.MSKint64t)(n),
			(*C.MSKint64t)(nleft),
		),
	)
}

// GetPrimalobj is wrapping [MSK_getprimalobj]
//
// function MSK_getprimalobj has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - primalobj: MSKrealt *
//
// [MSK_getprimalobj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetPrimalobj(
	whichsol SolType,
	primalobj *float64,
) res.Code {
	return res.Code(
		C.MSK_getprimalobj(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(primalobj),
		),
	)
}

// GetPrimalsolutionnorms is wrapping [MSK_getprimalsolutionnorms]
//
// function MSK_getprimalsolutionnorms has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - nrmxc: MSKrealt *
//   - nrmxx: MSKrealt *
//   - nrmbarx: MSKrealt *
//
// [MSK_getprimalsolutionnorms]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetPrimalsolutionnorms(
	whichsol SolType,
	nrmxc *float64,
	nrmxx *float64,
	nrmbarx *float64,
) res.Code {
	return res.Code(
		C.MSK_getprimalsolutionnorms(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(nrmxc),
			(*C.MSKrealt)(nrmxx),
			(*C.MSKrealt)(nrmbarx),
		),
	)
}

// GetProbtype is wrapping [MSK_getprobtype]
//
// function MSK_getprobtype has following parameters:
//   - task: MSKtask_t
//   - probtype: MSKproblemtypee *
//
// [MSK_getprobtype]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetProbtype(
	probtype *ProblemType,
) res.Code {
	return res.Code(
		C.MSK_getprobtype(
			task.task,
			(*C.MSKproblemtypee)(probtype),
		),
	)
}

// GetProsta is wrapping [MSK_getprosta]
//
// function MSK_getprosta has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - problemsta: MSKprostae *
//
// [MSK_getprosta]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetProsta(
	whichsol SolType,
	problemsta *ProSta,
) res.Code {
	return res.Code(
		C.MSK_getprosta(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKprostae)(problemsta),
		),
	)
}

// GetPviolacc is wrapping [MSK_getpviolacc]
//
// function MSK_getpviolacc has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - numaccidx: MSKint64t
//   - accidxlist: const MSKint64t *
//   - viol: MSKrealt *
//
// [MSK_getpviolacc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetPviolacc(
	whichsol SolType,
	numaccidx int64,
	accidxlist *int64,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getpviolacc(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint64t(numaccidx),
			(*C.MSKint64t)(accidxlist),
			(*C.MSKrealt)(viol),
		),
	)
}

// GetPviolbarvar is wrapping [MSK_getpviolbarvar]
//
// function MSK_getpviolbarvar has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - viol: MSKrealt *
//
// [MSK_getpviolbarvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetPviolbarvar(
	whichsol SolType,
	num int32,
	sub *int32,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getpviolbarvar(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(viol),
		),
	)
}

// GetPviolcon is wrapping [MSK_getpviolcon]
//
// function MSK_getpviolcon has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - viol: MSKrealt *
//
// [MSK_getpviolcon]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetPviolcon(
	whichsol SolType,
	num int32,
	sub *int32,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getpviolcon(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(viol),
		),
	)
}

// GetPviolcones is wrapping [MSK_getpviolcones]
//
// function MSK_getpviolcones has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - viol: MSKrealt *
//
// [MSK_getpviolcones]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetPviolcones(
	whichsol SolType,
	num int32,
	sub *int32,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getpviolcones(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(viol),
		),
	)
}

// GetPvioldjc is wrapping [MSK_getpvioldjc]
//
// function MSK_getpvioldjc has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - numdjcidx: MSKint64t
//   - djcidxlist: const MSKint64t *
//   - viol: MSKrealt *
//
// [MSK_getpvioldjc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetPvioldjc(
	whichsol SolType,
	numdjcidx int64,
	djcidxlist *int64,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getpvioldjc(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint64t(numdjcidx),
			(*C.MSKint64t)(djcidxlist),
			(*C.MSKrealt)(viol),
		),
	)
}

// GetPviolvar is wrapping [MSK_getpviolvar]
//
// function MSK_getpviolvar has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - viol: MSKrealt *
//
// [MSK_getpviolvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetPviolvar(
	whichsol SolType,
	num int32,
	sub *int32,
	viol *float64,
) res.Code {
	return res.Code(
		C.MSK_getpviolvar(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(viol),
		),
	)
}

// GetQconk is wrapping [MSK_getqconk]
//
// function MSK_getqconk has following parameters:
//   - task: MSKtask_t
//   - k: MSKint32t
//   - maxnumqcnz: MSKint32t
//   - numqcnz: MSKint32t *
//   - qcsubi: MSKint32t *
//   - qcsubj: MSKint32t *
//   - qcval: MSKrealt *
//
// [MSK_getqconk]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetQconk(
	k int32,
	maxnumqcnz int32,
	numqcnz *int32,
	qcsubi *int32,
	qcsubj *int32,
	qcval *float64,
) res.Code {
	return res.Code(
		C.MSK_getqconk(
			task.task,
			C.MSKint32t(k),
			C.MSKint32t(maxnumqcnz),
			(*C.MSKint32t)(numqcnz),
			(*C.MSKint32t)(qcsubi),
			(*C.MSKint32t)(qcsubj),
			(*C.MSKrealt)(qcval),
		),
	)
}

// GetQconk64 is wrapping [MSK_getqconk64]
//
// function MSK_getqconk64 has following parameters:
//   - task: MSKtask_t
//   - k: MSKint32t
//   - maxnumqcnz: MSKint64t
//   - numqcnz: MSKint64t *
//   - qcsubi: MSKint32t *
//   - qcsubj: MSKint32t *
//   - qcval: MSKrealt *
//
// [MSK_getqconk64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetQconk64(
	k int32,
	maxnumqcnz int64,
	numqcnz *int64,
	qcsubi *int32,
	qcsubj *int32,
	qcval *float64,
) res.Code {
	return res.Code(
		C.MSK_getqconk64(
			task.task,
			C.MSKint32t(k),
			C.MSKint64t(maxnumqcnz),
			(*C.MSKint64t)(numqcnz),
			(*C.MSKint32t)(qcsubi),
			(*C.MSKint32t)(qcsubj),
			(*C.MSKrealt)(qcval),
		),
	)
}

// GetQobj is wrapping [MSK_getqobj]
//
// function MSK_getqobj has following parameters:
//   - task: MSKtask_t
//   - maxnumqonz: MSKint32t
//   - numqonz: MSKint32t *
//   - qosubi: MSKint32t *
//   - qosubj: MSKint32t *
//   - qoval: MSKrealt *
//
// [MSK_getqobj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetQobj(
	maxnumqonz int32,
	numqonz *int32,
	qosubi *int32,
	qosubj *int32,
	qoval *float64,
) res.Code {
	return res.Code(
		C.MSK_getqobj(
			task.task,
			C.MSKint32t(maxnumqonz),
			(*C.MSKint32t)(numqonz),
			(*C.MSKint32t)(qosubi),
			(*C.MSKint32t)(qosubj),
			(*C.MSKrealt)(qoval),
		),
	)
}

// GetQobj64 is wrapping [MSK_getqobj64]
//
// function MSK_getqobj64 has following parameters:
//   - task: MSKtask_t
//   - maxnumqonz: MSKint64t
//   - numqonz: MSKint64t *
//   - qosubi: MSKint32t *
//   - qosubj: MSKint32t *
//   - qoval: MSKrealt *
//
// [MSK_getqobj64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetQobj64(
	maxnumqonz int64,
	numqonz *int64,
	qosubi *int32,
	qosubj *int32,
	qoval *float64,
) res.Code {
	return res.Code(
		C.MSK_getqobj64(
			task.task,
			C.MSKint64t(maxnumqonz),
			(*C.MSKint64t)(numqonz),
			(*C.MSKint32t)(qosubi),
			(*C.MSKint32t)(qosubj),
			(*C.MSKrealt)(qoval),
		),
	)
}

// GetQobjij is wrapping [MSK_getqobjij]
//
// function MSK_getqobjij has following parameters:
//   - task: MSKtask_t
//   - i: MSKint32t
//   - j: MSKint32t
//   - qoij: MSKrealt *
//
// [MSK_getqobjij]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetQobjij(
	i int32,
	j int32,
	qoij *float64,
) res.Code {
	return res.Code(
		C.MSK_getqobjij(
			task.task,
			C.MSKint32t(i),
			C.MSKint32t(j),
			(*C.MSKrealt)(qoij),
		),
	)
}

// GetReducedcosts is wrapping [MSK_getreducedcosts]
//
// function MSK_getreducedcosts has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - redcosts: MSKrealt *
//
// [MSK_getreducedcosts]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetReducedcosts(
	whichsol SolType,
	first int32,
	last int32,
	redcosts *float64,
) res.Code {
	return res.Code(
		C.MSK_getreducedcosts(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(redcosts),
		),
	)
}

// GetSkc is wrapping [MSK_getskc]
//
// function MSK_getskc has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - skc: MSKstakeye *
//
// [MSK_getskc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetSkc(
	whichsol SolType,
	skc *StaKey,
) res.Code {
	return res.Code(
		C.MSK_getskc(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKstakeye)(skc),
		),
	)
}

// GetSkcSlice is wrapping [MSK_getskcslice]
//
// function MSK_getskcslice has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - skc: MSKstakeye *
//
// [MSK_getskcslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetSkcSlice(
	whichsol SolType,
	first int32,
	last int32,
	skc *StaKey,
) res.Code {
	return res.Code(
		C.MSK_getskcslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKstakeye)(skc),
		),
	)
}

// GetSkn is wrapping [MSK_getskn]
//
// function MSK_getskn has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - skn: MSKstakeye *
//
// [MSK_getskn]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetSkn(
	whichsol SolType,
	skn *StaKey,
) res.Code {
	return res.Code(
		C.MSK_getskn(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKstakeye)(skn),
		),
	)
}

// GetSkx is wrapping [MSK_getskx]
//
// function MSK_getskx has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - skx: MSKstakeye *
//
// [MSK_getskx]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetSkx(
	whichsol SolType,
	skx *StaKey,
) res.Code {
	return res.Code(
		C.MSK_getskx(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKstakeye)(skx),
		),
	)
}

// GetSkxSlice is wrapping [MSK_getskxslice]
//
// function MSK_getskxslice has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - skx: MSKstakeye *
//
// [MSK_getskxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetSkxSlice(
	whichsol SolType,
	first int32,
	last int32,
	skx *StaKey,
) res.Code {
	return res.Code(
		C.MSK_getskxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKstakeye)(skx),
		),
	)
}

// GetSlc is wrapping [MSK_getslc]
//
// function MSK_getslc has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - slc: MSKrealt *
//
// [MSK_getslc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetSlc(
	whichsol SolType,
	slc *float64,
) res.Code {
	return res.Code(
		C.MSK_getslc(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(slc),
		),
	)
}

// GetSlcSlice is wrapping [MSK_getslcslice]
//
// function MSK_getslcslice has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - slc: MSKrealt *
//
// [MSK_getslcslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetSlcSlice(
	whichsol SolType,
	first int32,
	last int32,
	slc *float64,
) res.Code {
	return res.Code(
		C.MSK_getslcslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(slc),
		),
	)
}

// GetSlx is wrapping [MSK_getslx]
//
// function MSK_getslx has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - slx: MSKrealt *
//
// [MSK_getslx]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetSlx(
	whichsol SolType,
	slx *float64,
) res.Code {
	return res.Code(
		C.MSK_getslx(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(slx),
		),
	)
}

// GetSlxSlice is wrapping [MSK_getslxslice]
//
// function MSK_getslxslice has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - slx: MSKrealt *
//
// [MSK_getslxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetSlxSlice(
	whichsol SolType,
	first int32,
	last int32,
	slx *float64,
) res.Code {
	return res.Code(
		C.MSK_getslxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(slx),
		),
	)
}

// GetSnx is wrapping [MSK_getsnx]
//
// function MSK_getsnx has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - snx: MSKrealt *
//
// [MSK_getsnx]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetSnx(
	whichsol SolType,
	snx *float64,
) res.Code {
	return res.Code(
		C.MSK_getsnx(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(snx),
		),
	)
}

// GetSnxSlice is wrapping [MSK_getsnxslice]
//
// function MSK_getsnxslice has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - snx: MSKrealt *
//
// [MSK_getsnxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetSnxSlice(
	whichsol SolType,
	first int32,
	last int32,
	snx *float64,
) res.Code {
	return res.Code(
		C.MSK_getsnxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(snx),
		),
	)
}

// GetSolsta is wrapping [MSK_getsolsta]
//
// function MSK_getsolsta has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - solutionsta: MSKsolstae *
//
// [MSK_getsolsta]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetSolsta(
	whichsol SolType,
	solutionsta *SolSta,
) res.Code {
	return res.Code(
		C.MSK_getsolsta(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKsolstae)(solutionsta),
		),
	)
}

// GetSolution is wrapping [MSK_getsolution]
//
// function MSK_getsolution has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - problemsta: MSKprostae *
//   - solutionsta: MSKsolstae *
//   - skc: MSKstakeye *
//   - skx: MSKstakeye *
//   - skn: MSKstakeye *
//   - xc: MSKrealt *
//   - xx: MSKrealt *
//   - y: MSKrealt *
//   - slc: MSKrealt *
//   - suc: MSKrealt *
//   - slx: MSKrealt *
//   - sux: MSKrealt *
//   - snx: MSKrealt *
//
// [MSK_getsolution]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetSolution(
	whichsol SolType,
	problemsta *ProSta,
	solutionsta *SolSta,
	skc *StaKey,
	skx *StaKey,
	skn *StaKey,
	xc *float64,
	xx *float64,
	y *float64,
	slc *float64,
	suc *float64,
	slx *float64,
	sux *float64,
	snx *float64,
) res.Code {
	return res.Code(
		C.MSK_getsolution(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKprostae)(problemsta),
			(*C.MSKsolstae)(solutionsta),
			(*C.MSKstakeye)(skc),
			(*C.MSKstakeye)(skx),
			(*C.MSKstakeye)(skn),
			(*C.MSKrealt)(xc),
			(*C.MSKrealt)(xx),
			(*C.MSKrealt)(y),
			(*C.MSKrealt)(slc),
			(*C.MSKrealt)(suc),
			(*C.MSKrealt)(slx),
			(*C.MSKrealt)(sux),
			(*C.MSKrealt)(snx),
		),
	)
}

// GetSolutioninfo is wrapping [MSK_getsolutioninfo]
//
// function MSK_getsolutioninfo has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - pobj: MSKrealt *
//   - pviolcon: MSKrealt *
//   - pviolvar: MSKrealt *
//   - pviolbarvar: MSKrealt *
//   - pviolcone: MSKrealt *
//   - pviolitg: MSKrealt *
//   - dobj: MSKrealt *
//   - dviolcon: MSKrealt *
//   - dviolvar: MSKrealt *
//   - dviolbarvar: MSKrealt *
//   - dviolcone: MSKrealt *
//
// [MSK_getsolutioninfo]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetSolutioninfo(
	whichsol SolType,
	pobj *float64,
	pviolcon *float64,
	pviolvar *float64,
	pviolbarvar *float64,
	pviolcone *float64,
	pviolitg *float64,
	dobj *float64,
	dviolcon *float64,
	dviolvar *float64,
	dviolbarvar *float64,
	dviolcone *float64,
) res.Code {
	return res.Code(
		C.MSK_getsolutioninfo(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(pobj),
			(*C.MSKrealt)(pviolcon),
			(*C.MSKrealt)(pviolvar),
			(*C.MSKrealt)(pviolbarvar),
			(*C.MSKrealt)(pviolcone),
			(*C.MSKrealt)(pviolitg),
			(*C.MSKrealt)(dobj),
			(*C.MSKrealt)(dviolcon),
			(*C.MSKrealt)(dviolvar),
			(*C.MSKrealt)(dviolbarvar),
			(*C.MSKrealt)(dviolcone),
		),
	)
}

// GetSolutioninfonew is wrapping [MSK_getsolutioninfonew]
//
// function MSK_getsolutioninfonew has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - pobj: MSKrealt *
//   - pviolcon: MSKrealt *
//   - pviolvar: MSKrealt *
//   - pviolbarvar: MSKrealt *
//   - pviolcone: MSKrealt *
//   - pviolacc: MSKrealt *
//   - pvioldjc: MSKrealt *
//   - pviolitg: MSKrealt *
//   - dobj: MSKrealt *
//   - dviolcon: MSKrealt *
//   - dviolvar: MSKrealt *
//   - dviolbarvar: MSKrealt *
//   - dviolcone: MSKrealt *
//   - dviolacc: MSKrealt *
//
// [MSK_getsolutioninfonew]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetSolutioninfonew(
	whichsol SolType,
	pobj *float64,
	pviolcon *float64,
	pviolvar *float64,
	pviolbarvar *float64,
	pviolcone *float64,
	pviolacc *float64,
	pvioldjc *float64,
	pviolitg *float64,
	dobj *float64,
	dviolcon *float64,
	dviolvar *float64,
	dviolbarvar *float64,
	dviolcone *float64,
	dviolacc *float64,
) res.Code {
	return res.Code(
		C.MSK_getsolutioninfonew(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(pobj),
			(*C.MSKrealt)(pviolcon),
			(*C.MSKrealt)(pviolvar),
			(*C.MSKrealt)(pviolbarvar),
			(*C.MSKrealt)(pviolcone),
			(*C.MSKrealt)(pviolacc),
			(*C.MSKrealt)(pvioldjc),
			(*C.MSKrealt)(pviolitg),
			(*C.MSKrealt)(dobj),
			(*C.MSKrealt)(dviolcon),
			(*C.MSKrealt)(dviolvar),
			(*C.MSKrealt)(dviolbarvar),
			(*C.MSKrealt)(dviolcone),
			(*C.MSKrealt)(dviolacc),
		),
	)
}

// GetSolutionnew is wrapping [MSK_getsolutionnew]
//
// function MSK_getsolutionnew has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - problemsta: MSKprostae *
//   - solutionsta: MSKsolstae *
//   - skc: MSKstakeye *
//   - skx: MSKstakeye *
//   - skn: MSKstakeye *
//   - xc: MSKrealt *
//   - xx: MSKrealt *
//   - y: MSKrealt *
//   - slc: MSKrealt *
//   - suc: MSKrealt *
//   - slx: MSKrealt *
//   - sux: MSKrealt *
//   - snx: MSKrealt *
//   - doty: MSKrealt *
//
// [MSK_getsolutionnew]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetSolutionnew(
	whichsol SolType,
	problemsta *ProSta,
	solutionsta *SolSta,
	skc *StaKey,
	skx *StaKey,
	skn *StaKey,
	xc *float64,
	xx *float64,
	y *float64,
	slc *float64,
	suc *float64,
	slx *float64,
	sux *float64,
	snx *float64,
	doty *float64,
) res.Code {
	return res.Code(
		C.MSK_getsolutionnew(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKprostae)(problemsta),
			(*C.MSKsolstae)(solutionsta),
			(*C.MSKstakeye)(skc),
			(*C.MSKstakeye)(skx),
			(*C.MSKstakeye)(skn),
			(*C.MSKrealt)(xc),
			(*C.MSKrealt)(xx),
			(*C.MSKrealt)(y),
			(*C.MSKrealt)(slc),
			(*C.MSKrealt)(suc),
			(*C.MSKrealt)(slx),
			(*C.MSKrealt)(sux),
			(*C.MSKrealt)(snx),
			(*C.MSKrealt)(doty),
		),
	)
}

// GetSolutionSlice is wrapping [MSK_getsolutionslice]
//
// function MSK_getsolutionslice has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - solitem: MSKsoliteme
//   - first: MSKint32t
//   - last: MSKint32t
//   - values: MSKrealt *
//
// [MSK_getsolutionslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetSolutionSlice(
	whichsol SolType,
	solitem SolItem,
	first int32,
	last int32,
	values *float64,
) res.Code {
	return res.Code(
		C.MSK_getsolutionslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKsoliteme(solitem),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(values),
		),
	)
}

// GetSparsesymmat is wrapping [MSK_getsparsesymmat]
//
// function MSK_getsparsesymmat has following parameters:
//   - task: MSKtask_t
//   - idx: MSKint64t
//   - maxlen: MSKint64t
//   - subi: MSKint32t *
//   - subj: MSKint32t *
//   - valij: MSKrealt *
//
// [MSK_getsparsesymmat]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetSparsesymmat(
	idx int64,
	maxlen int64,
	subi *int32,
	subj *int32,
	valij *float64,
) res.Code {
	return res.Code(
		C.MSK_getsparsesymmat(
			task.task,
			C.MSKint64t(idx),
			C.MSKint64t(maxlen),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(valij),
		),
	)
}

// GetStrparam is wrapping [MSK_getstrparam]
//
// function MSK_getstrparam has following parameters:
//   - task: MSKtask_t
//   - param: MSKsparame
//   - maxlen: MSKint32t
//   - len: MSKint32t *
//   - parvalue: char *
//
// [MSK_getstrparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetStrparam(
	param SParam,
	maxlen int32,
	len *int32,
	parvalue *byte,
) res.Code {
	return res.Code(
		C.MSK_getstrparam(
			task.task,
			C.MSKsparame(param),
			C.MSKint32t(maxlen),
			(*C.MSKint32t)(len),
			(*C.char)(unsafe.Pointer(parvalue)),
		),
	)
}

// GetStrparamlen is wrapping [MSK_getstrparamlen]
//
// function MSK_getstrparamlen has following parameters:
//   - task: MSKtask_t
//   - param: MSKsparame
//   - len: MSKint32t *
//
// [MSK_getstrparamlen]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetStrparamlen(
	param SParam,
	len *int32,
) res.Code {
	return res.Code(
		C.MSK_getstrparamlen(
			task.task,
			C.MSKsparame(param),
			(*C.MSKint32t)(len),
		),
	)
}

// GetSuc is wrapping [MSK_getsuc]
//
// function MSK_getsuc has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - suc: MSKrealt *
//
// [MSK_getsuc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetSuc(
	whichsol SolType,
	suc *float64,
) res.Code {
	return res.Code(
		C.MSK_getsuc(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(suc),
		),
	)
}

// GetSucSlice is wrapping [MSK_getsucslice]
//
// function MSK_getsucslice has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - suc: MSKrealt *
//
// [MSK_getsucslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetSucSlice(
	whichsol SolType,
	first int32,
	last int32,
	suc *float64,
) res.Code {
	return res.Code(
		C.MSK_getsucslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(suc),
		),
	)
}

// GetSux is wrapping [MSK_getsux]
//
// function MSK_getsux has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - sux: MSKrealt *
//
// [MSK_getsux]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetSux(
	whichsol SolType,
	sux *float64,
) res.Code {
	return res.Code(
		C.MSK_getsux(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(sux),
		),
	)
}

// GetSuxSlice is wrapping [MSK_getsuxslice]
//
// function MSK_getsuxslice has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - sux: MSKrealt *
//
// [MSK_getsuxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetSuxSlice(
	whichsol SolType,
	first int32,
	last int32,
	sux *float64,
) res.Code {
	return res.Code(
		C.MSK_getsuxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(sux),
		),
	)
}

// GetSymbcon is wrapping [MSK_getsymbcon]
//
// function MSK_getsymbcon has following parameters:
//   - task: MSKtask_t
//   - i: MSKint32t
//   - sizevalue: MSKint32t
//   - name: char *
//   - value: MSKint32t *
//
// [MSK_getsymbcon]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetSymbcon(
	i int32,
	sizevalue int32,
	name *byte,
	value *int32,
) res.Code {
	return res.Code(
		C.MSK_getsymbcon(
			task.task,
			C.MSKint32t(i),
			C.MSKint32t(sizevalue),
			(*C.char)(unsafe.Pointer(name)),
			(*C.MSKint32t)(value),
		),
	)
}

// GetSymmatinfo is wrapping [MSK_getsymmatinfo]
//
// function MSK_getsymmatinfo has following parameters:
//   - task: MSKtask_t
//   - idx: MSKint64t
//   - dim: MSKint32t *
//   - nz: MSKint64t *
//   - mattype: MSKsymmattypee *
//
// [MSK_getsymmatinfo]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetSymmatinfo(
	idx int64,
	dim *int32,
	nz *int64,
	mattype *SymmatType,
) res.Code {
	return res.Code(
		C.MSK_getsymmatinfo(
			task.task,
			C.MSKint64t(idx),
			(*C.MSKint32t)(dim),
			(*C.MSKint64t)(nz),
			(*C.MSKsymmattypee)(mattype),
		),
	)
}

// GetTaskname is wrapping [MSK_gettaskname]
//
// function MSK_gettaskname has following parameters:
//   - task: MSKtask_t
//   - sizetaskname: MSKint32t
//   - taskname: char *
//
// [MSK_gettaskname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetTaskname(
	sizetaskname int32,
	taskname *byte,
) res.Code {
	return res.Code(
		C.MSK_gettaskname(
			task.task,
			C.MSKint32t(sizetaskname),
			(*C.char)(unsafe.Pointer(taskname)),
		),
	)
}

// GetTasknamelen is wrapping [MSK_gettasknamelen]
//
// function MSK_gettasknamelen has following parameters:
//   - task: MSKtask_t
//   - len: MSKint32t *
//
// [MSK_gettasknamelen]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetTasknamelen(
	len *int32,
) res.Code {
	return res.Code(
		C.MSK_gettasknamelen(
			task.task,
			(*C.MSKint32t)(len),
		),
	)
}

// GetVarbound is wrapping [MSK_getvarbound]
//
// function MSK_getvarbound has following parameters:
//   - task: MSKtask_t
//   - i: MSKint32t
//   - bk: MSKboundkeye *
//   - bl: MSKrealt *
//   - bu: MSKrealt *
//
// [MSK_getvarbound]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetVarbound(
	i int32,
	bk *BoundKey,
	bl *float64,
	bu *float64,
) res.Code {
	return res.Code(
		C.MSK_getvarbound(
			task.task,
			C.MSKint32t(i),
			(*C.MSKboundkeye)(bk),
			(*C.MSKrealt)(bl),
			(*C.MSKrealt)(bu),
		),
	)
}

// GetVarboundSlice is wrapping [MSK_getvarboundslice]
//
// function MSK_getvarboundslice has following parameters:
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - bk: MSKboundkeye *
//   - bl: MSKrealt *
//   - bu: MSKrealt *
//
// [MSK_getvarboundslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetVarboundSlice(
	first int32,
	last int32,
	bk *BoundKey,
	bl *float64,
	bu *float64,
) res.Code {
	return res.Code(
		C.MSK_getvarboundslice(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKboundkeye)(bk),
			(*C.MSKrealt)(bl),
			(*C.MSKrealt)(bu),
		),
	)
}

// GetVarname is wrapping [MSK_getvarname]
//
// function MSK_getvarname has following parameters:
//   - task: MSKtask_t
//   - j: MSKint32t
//   - sizename: MSKint32t
//   - name: char *
//
// [MSK_getvarname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetVarname(
	j int32,
	sizename int32,
	name *byte,
) res.Code {
	return res.Code(
		C.MSK_getvarname(
			task.task,
			C.MSKint32t(j),
			C.MSKint32t(sizename),
			(*C.char)(unsafe.Pointer(name)),
		),
	)
}

// GetVarnameindex is wrapping [MSK_getvarnameindex]
//
// function MSK_getvarnameindex has following parameters:
//   - task: MSKtask_t
//   - somename: const char *
//   - asgn: MSKint32t *
//   - index: MSKint32t *
//
// [MSK_getvarnameindex]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetVarnameindex(
	somename *byte,
	asgn *int32,
	index *int32,
) res.Code {
	return res.Code(
		C.MSK_getvarnameindex(
			task.task,
			(*C.char)(unsafe.Pointer(somename)),
			(*C.MSKint32t)(asgn),
			(*C.MSKint32t)(index),
		),
	)
}

// GetVarnamelen is wrapping [MSK_getvarnamelen]
//
// function MSK_getvarnamelen has following parameters:
//   - task: MSKtask_t
//   - i: MSKint32t
//   - len: MSKint32t *
//
// [MSK_getvarnamelen]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetVarnamelen(
	i int32,
	len *int32,
) res.Code {
	return res.Code(
		C.MSK_getvarnamelen(
			task.task,
			C.MSKint32t(i),
			(*C.MSKint32t)(len),
		),
	)
}

// GetVartype is wrapping [MSK_getvartype]
//
// function MSK_getvartype has following parameters:
//   - task: MSKtask_t
//   - j: MSKint32t
//   - vartype: MSKvariabletypee *
//
// [MSK_getvartype]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetVartype(
	j int32,
	vartype *VariableType,
) res.Code {
	return res.Code(
		C.MSK_getvartype(
			task.task,
			C.MSKint32t(j),
			(*C.MSKvariabletypee)(vartype),
		),
	)
}

// GetVartypeList is wrapping [MSK_getvartypelist]
//
// function MSK_getvartypelist has following parameters:
//   - task: MSKtask_t
//   - num: MSKint32t
//   - subj: const MSKint32t *
//   - vartype: MSKvariabletypee *
//
// [MSK_getvartypelist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetVartypeList(
	num int32,
	subj *int32,
	vartype *VariableType,
) res.Code {
	return res.Code(
		C.MSK_getvartypelist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subj),
			(*C.MSKvariabletypee)(vartype),
		),
	)
}

// GetXc is wrapping [MSK_getxc]
//
// function MSK_getxc has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - xc: MSKrealt *
//
// [MSK_getxc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetXc(
	whichsol SolType,
	xc *float64,
) res.Code {
	return res.Code(
		C.MSK_getxc(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(xc),
		),
	)
}

// GetXcSlice is wrapping [MSK_getxcslice]
//
// function MSK_getxcslice has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - xc: MSKrealt *
//
// [MSK_getxcslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetXcSlice(
	whichsol SolType,
	first int32,
	last int32,
	xc *float64,
) res.Code {
	return res.Code(
		C.MSK_getxcslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(xc),
		),
	)
}

// GetY is wrapping [MSK_gety]
//
// function MSK_gety has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - y: MSKrealt *
//
// [MSK_gety]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetY(
	whichsol SolType,
	y *float64,
) res.Code {
	return res.Code(
		C.MSK_gety(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(y),
		),
	)
}

// GetYSlice is wrapping [MSK_getyslice]
//
// function MSK_getyslice has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - y: MSKrealt *
//
// [MSK_getyslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) GetYSlice(
	whichsol SolType,
	first int32,
	last int32,
	y *float64,
) res.Code {
	return res.Code(
		C.MSK_getyslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(y),
		),
	)
}

// Infeasibilityreport is wrapping [MSK_infeasibilityreport]
//
// function MSK_infeasibilityreport has following parameters:
//   - task: MSKtask_t
//   - whichstream: MSKstreamtypee
//   - whichsol: MSKsoltypee
//
// [MSK_infeasibilityreport]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Infeasibilityreport(
	whichstream StreamType,
	whichsol SolType,
) res.Code {
	return res.Code(
		C.MSK_infeasibilityreport(
			task.task,
			C.MSKstreamtypee(whichstream),
			C.MSKsoltypee(whichsol),
		),
	)
}

// Initbasissolve is wrapping [MSK_initbasissolve]
//
// function MSK_initbasissolve has following parameters:
//   - task: MSKtask_t
//   - basis: MSKint32t *
//
// [MSK_initbasissolve]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Initbasissolve(
	basis *int32,
) res.Code {
	return res.Code(
		C.MSK_initbasissolve(
			task.task,
			(*C.MSKint32t)(basis),
		),
	)
}

// Inputdata is wrapping [MSK_inputdata]
//
// function MSK_inputdata has following parameters:
//   - task: MSKtask_t
//   - maxnumcon: MSKint32t
//   - maxnumvar: MSKint32t
//   - numcon: MSKint32t
//   - numvar: MSKint32t
//   - c: const MSKrealt *
//   - cfix: MSKrealt
//   - aptrb: const MSKint32t *
//   - aptre: const MSKint32t *
//   - asub: const MSKint32t *
//   - aval: const MSKrealt *
//   - bkc: const MSKboundkeye *
//   - blc: const MSKrealt *
//   - buc: const MSKrealt *
//   - bkx: const MSKboundkeye *
//   - blx: const MSKrealt *
//   - bux: const MSKrealt *
//
// [MSK_inputdata]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Inputdata(
	maxnumcon int32,
	maxnumvar int32,
	numcon int32,
	numvar int32,
	c *float64,
	cfix float64,
	aptrb *int32,
	aptre *int32,
	asub *int32,
	aval *float64,
	bkc *BoundKey,
	blc *float64,
	buc *float64,
	bkx *BoundKey,
	blx *float64,
	bux *float64,
) res.Code {
	return res.Code(
		C.MSK_inputdata(
			task.task,
			C.MSKint32t(maxnumcon),
			C.MSKint32t(maxnumvar),
			C.MSKint32t(numcon),
			C.MSKint32t(numvar),
			(*C.MSKrealt)(c),
			C.MSKrealt(cfix),
			(*C.MSKint32t)(aptrb),
			(*C.MSKint32t)(aptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
			(*C.MSKboundkeye)(bkc),
			(*C.MSKrealt)(blc),
			(*C.MSKrealt)(buc),
			(*C.MSKboundkeye)(bkx),
			(*C.MSKrealt)(blx),
			(*C.MSKrealt)(bux),
		),
	)
}

// Inputdata64 is wrapping [MSK_inputdata64]
//
// function MSK_inputdata64 has following parameters:
//   - task: MSKtask_t
//   - maxnumcon: MSKint32t
//   - maxnumvar: MSKint32t
//   - numcon: MSKint32t
//   - numvar: MSKint32t
//   - c: const MSKrealt *
//   - cfix: MSKrealt
//   - aptrb: const MSKint64t *
//   - aptre: const MSKint64t *
//   - asub: const MSKint32t *
//   - aval: const MSKrealt *
//   - bkc: const MSKboundkeye *
//   - blc: const MSKrealt *
//   - buc: const MSKrealt *
//   - bkx: const MSKboundkeye *
//   - blx: const MSKrealt *
//   - bux: const MSKrealt *
//
// [MSK_inputdata64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Inputdata64(
	maxnumcon int32,
	maxnumvar int32,
	numcon int32,
	numvar int32,
	c *float64,
	cfix float64,
	aptrb *int64,
	aptre *int64,
	asub *int32,
	aval *float64,
	bkc *BoundKey,
	blc *float64,
	buc *float64,
	bkx *BoundKey,
	blx *float64,
	bux *float64,
) res.Code {
	return res.Code(
		C.MSK_inputdata64(
			task.task,
			C.MSKint32t(maxnumcon),
			C.MSKint32t(maxnumvar),
			C.MSKint32t(numcon),
			C.MSKint32t(numvar),
			(*C.MSKrealt)(c),
			C.MSKrealt(cfix),
			(*C.MSKint64t)(aptrb),
			(*C.MSKint64t)(aptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
			(*C.MSKboundkeye)(bkc),
			(*C.MSKrealt)(blc),
			(*C.MSKrealt)(buc),
			(*C.MSKboundkeye)(bkx),
			(*C.MSKrealt)(blx),
			(*C.MSKrealt)(bux),
		),
	)
}

// Isdouparname is wrapping [MSK_isdouparname]
//
// function MSK_isdouparname has following parameters:
//   - task: MSKtask_t
//   - parname: const char *
//   - param: MSKdparame *
//
// [MSK_isdouparname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Isdouparname(
	parname *byte,
	param *DParam,
) res.Code {
	return res.Code(
		C.MSK_isdouparname(
			task.task,
			(*C.char)(unsafe.Pointer(parname)),
			(*C.MSKdparame)(param),
		),
	)
}

// Isintparname is wrapping [MSK_isintparname]
//
// function MSK_isintparname has following parameters:
//   - task: MSKtask_t
//   - parname: const char *
//   - param: MSKiparame *
//
// [MSK_isintparname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Isintparname(
	parname *byte,
	param *IParam,
) res.Code {
	return res.Code(
		C.MSK_isintparname(
			task.task,
			(*C.char)(unsafe.Pointer(parname)),
			(*C.MSKiparame)(param),
		),
	)
}

// Isstrparname is wrapping [MSK_isstrparname]
//
// function MSK_isstrparname has following parameters:
//   - task: MSKtask_t
//   - parname: const char *
//   - param: MSKsparame *
//
// [MSK_isstrparname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Isstrparname(
	parname *byte,
	param *SParam,
) res.Code {
	return res.Code(
		C.MSK_isstrparname(
			task.task,
			(*C.char)(unsafe.Pointer(parname)),
			(*C.MSKsparame)(param),
		),
	)
}

// Linkfiletotaskstream is wrapping [MSK_linkfiletotaskstream]
//
// function MSK_linkfiletotaskstream has following parameters:
//   - task: MSKtask_t
//   - whichstream: MSKstreamtypee
//   - filename: const char *
//   - append: MSKint32t
//
// [MSK_linkfiletotaskstream]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Linkfiletotaskstream(
	whichstream StreamType,
	filename *byte,
	append int32,
) res.Code {
	return res.Code(
		C.MSK_linkfiletotaskstream(
			task.task,
			C.MSKstreamtypee(whichstream),
			(*C.char)(unsafe.Pointer(filename)),
			C.MSKint32t(append),
		),
	)
}

// Onesolutionsummary is wrapping [MSK_onesolutionsummary]
//
// function MSK_onesolutionsummary has following parameters:
//   - task: MSKtask_t
//   - whichstream: MSKstreamtypee
//   - whichsol: MSKsoltypee
//
// [MSK_onesolutionsummary]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Onesolutionsummary(
	whichstream StreamType,
	whichsol SolType,
) res.Code {
	return res.Code(
		C.MSK_onesolutionsummary(
			task.task,
			C.MSKstreamtypee(whichstream),
			C.MSKsoltypee(whichsol),
		),
	)
}

// Optimize is wrapping [MSK_optimize]
//
// function MSK_optimize has following parameters:
//   - task: MSKtask_t
//
// [MSK_optimize]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Optimize() res.Code {
	return res.Code(
		C.MSK_optimize(
			task.task,
		),
	)
}

// Optimizermt is wrapping [MSK_optimizermt]
//
// function MSK_optimizermt has following parameters:
//   - task: MSKtask_t
//   - address: const char *
//   - accesstoken: const char *
//   - trmcode: MSKrescodee *
//
// [MSK_optimizermt]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Optimizermt(
	address *byte,
	accesstoken *byte,
	trmcode *res.Code,
) res.Code {
	return res.Code(
		C.MSK_optimizermt(
			task.task,
			(*C.char)(unsafe.Pointer(address)),
			(*C.char)(unsafe.Pointer(accesstoken)),
			(*C.MSKrescodee)(trmcode),
		),
	)
}

// Optimizersummary is wrapping [MSK_optimizersummary]
//
// function MSK_optimizersummary has following parameters:
//   - task: MSKtask_t
//   - whichstream: MSKstreamtypee
//
// [MSK_optimizersummary]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Optimizersummary(
	whichstream StreamType,
) res.Code {
	return res.Code(
		C.MSK_optimizersummary(
			task.task,
			C.MSKstreamtypee(whichstream),
		),
	)
}

// Optimizetrm is wrapping [MSK_optimizetrm]
//
// function MSK_optimizetrm has following parameters:
//   - task: MSKtask_t
//   - trmcode: MSKrescodee *
//
// [MSK_optimizetrm]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Optimizetrm(
	trmcode *res.Code,
) res.Code {
	return res.Code(
		C.MSK_optimizetrm(
			task.task,
			(*C.MSKrescodee)(trmcode),
		),
	)
}

// Primalrepair is wrapping [MSK_primalrepair]
//
// function MSK_primalrepair has following parameters:
//   - task: MSKtask_t
//   - wlc: const MSKrealt *
//   - wuc: const MSKrealt *
//   - wlx: const MSKrealt *
//   - wux: const MSKrealt *
//
// [MSK_primalrepair]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Primalrepair(
	wlc *float64,
	wuc *float64,
	wlx *float64,
	wux *float64,
) res.Code {
	return res.Code(
		C.MSK_primalrepair(
			task.task,
			(*C.MSKrealt)(wlc),
			(*C.MSKrealt)(wuc),
			(*C.MSKrealt)(wlx),
			(*C.MSKrealt)(wux),
		),
	)
}

// Primalsensitivity is wrapping [MSK_primalsensitivity]
//
// function MSK_primalsensitivity has following parameters:
//   - task: MSKtask_t
//   - numi: MSKint32t
//   - subi: const MSKint32t *
//   - marki: const MSKmarke *
//   - numj: MSKint32t
//   - subj: const MSKint32t *
//   - markj: const MSKmarke *
//   - leftpricei: MSKrealt *
//   - rightpricei: MSKrealt *
//   - leftrangei: MSKrealt *
//   - rightrangei: MSKrealt *
//   - leftpricej: MSKrealt *
//   - rightpricej: MSKrealt *
//   - leftrangej: MSKrealt *
//   - rightrangej: MSKrealt *
//
// [MSK_primalsensitivity]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Primalsensitivity(
	numi int32,
	subi *int32,
	marki *Mark,
	numj int32,
	subj *int32,
	markj *Mark,
	leftpricei *float64,
	rightpricei *float64,
	leftrangei *float64,
	rightrangei *float64,
	leftpricej *float64,
	rightpricej *float64,
	leftrangej *float64,
	rightrangej *float64,
) res.Code {
	return res.Code(
		C.MSK_primalsensitivity(
			task.task,
			C.MSKint32t(numi),
			(*C.MSKint32t)(subi),
			(*C.MSKmarke)(marki),
			C.MSKint32t(numj),
			(*C.MSKint32t)(subj),
			(*C.MSKmarke)(markj),
			(*C.MSKrealt)(leftpricei),
			(*C.MSKrealt)(rightpricei),
			(*C.MSKrealt)(leftrangei),
			(*C.MSKrealt)(rightrangei),
			(*C.MSKrealt)(leftpricej),
			(*C.MSKrealt)(rightpricej),
			(*C.MSKrealt)(leftrangej),
			(*C.MSKrealt)(rightrangej),
		),
	)
}

// Printparam is wrapping [MSK_printparam]
//
// function MSK_printparam has following parameters:
//   - task: MSKtask_t
//
// [MSK_printparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Printparam() res.Code {
	return res.Code(
		C.MSK_printparam(
			task.task,
		),
	)
}

// Probtypetostr is wrapping [MSK_probtypetostr]
//
// function MSK_probtypetostr has following parameters:
//   - task: MSKtask_t
//   - probtype: MSKproblemtypee
//   - str: char *
//
// [MSK_probtypetostr]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Probtypetostr(
	probtype ProblemType,
	str *byte,
) res.Code {
	return res.Code(
		C.MSK_probtypetostr(
			task.task,
			C.MSKproblemtypee(probtype),
			(*C.char)(unsafe.Pointer(str)),
		),
	)
}

// Prostatostr is wrapping [MSK_prostatostr]
//
// function MSK_prostatostr has following parameters:
//   - task: MSKtask_t
//   - problemsta: MSKprostae
//   - str: char *
//
// [MSK_prostatostr]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Prostatostr(
	problemsta ProSta,
	str *byte,
) res.Code {
	return res.Code(
		C.MSK_prostatostr(
			task.task,
			C.MSKprostae(problemsta),
			(*C.char)(unsafe.Pointer(str)),
		),
	)
}

// PutAcc is wrapping [MSK_putacc]
//
// function MSK_putacc has following parameters:
//   - task: MSKtask_t
//   - accidx: MSKint64t
//   - domidx: MSKint64t
//   - numafeidx: MSKint64t
//   - afeidxlist: const MSKint64t *
//   - b: const MSKrealt *
//
// [MSK_putacc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAcc(
	accidx int64,
	domidx int64,
	numafeidx int64,
	afeidxlist *int64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_putacc(
			task.task,
			C.MSKint64t(accidx),
			C.MSKint64t(domidx),
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidxlist),
			(*C.MSKrealt)(b),
		),
	)
}

// PutAccb is wrapping [MSK_putaccb]
//
// function MSK_putaccb has following parameters:
//   - task: MSKtask_t
//   - accidx: MSKint64t
//   - lengthb: MSKint64t
//   - b: const MSKrealt *
//
// [MSK_putaccb]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAccb(
	accidx int64,
	lengthb int64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_putaccb(
			task.task,
			C.MSKint64t(accidx),
			C.MSKint64t(lengthb),
			(*C.MSKrealt)(b),
		),
	)
}

// PutAccbj is wrapping [MSK_putaccbj]
//
// function MSK_putaccbj has following parameters:
//   - task: MSKtask_t
//   - accidx: MSKint64t
//   - j: MSKint64t
//   - bj: MSKrealt
//
// [MSK_putaccbj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAccbj(
	accidx int64,
	j int64,
	bj float64,
) res.Code {
	return res.Code(
		C.MSK_putaccbj(
			task.task,
			C.MSKint64t(accidx),
			C.MSKint64t(j),
			C.MSKrealt(bj),
		),
	)
}

// PutAccdoty is wrapping [MSK_putaccdoty]
//
// function MSK_putaccdoty has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - accidx: MSKint64t
//   - doty: MSKrealt *
//
// [MSK_putaccdoty]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAccdoty(
	whichsol SolType,
	accidx int64,
	doty *float64,
) res.Code {
	return res.Code(
		C.MSK_putaccdoty(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint64t(accidx),
			(*C.MSKrealt)(doty),
		),
	)
}

// PutAccList is wrapping [MSK_putacclist]
//
// function MSK_putacclist has following parameters:
//   - task: MSKtask_t
//   - numaccs: MSKint64t
//   - accidxs: const MSKint64t *
//   - domidxs: const MSKint64t *
//   - numafeidx: MSKint64t
//   - afeidxlist: const MSKint64t *
//   - b: const MSKrealt *
//
// [MSK_putacclist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAccList(
	numaccs int64,
	accidxs *int64,
	domidxs *int64,
	numafeidx int64,
	afeidxlist *int64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_putacclist(
			task.task,
			C.MSKint64t(numaccs),
			(*C.MSKint64t)(accidxs),
			(*C.MSKint64t)(domidxs),
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidxlist),
			(*C.MSKrealt)(b),
		),
	)
}

// PutAccname is wrapping [MSK_putaccname]
//
// function MSK_putaccname has following parameters:
//   - task: MSKtask_t
//   - accidx: MSKint64t
//   - name: const char *
//
// [MSK_putaccname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAccname(
	accidx int64,
	name *byte,
) res.Code {
	return res.Code(
		C.MSK_putaccname(
			task.task,
			C.MSKint64t(accidx),
			(*C.char)(unsafe.Pointer(name)),
		),
	)
}

// PutAcol is wrapping [MSK_putacol]
//
// function MSK_putacol has following parameters:
//   - task: MSKtask_t
//   - j: MSKint32t
//   - nzj: MSKint32t
//   - subj: const MSKint32t *
//   - valj: const MSKrealt *
//
// [MSK_putacol]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAcol(
	j int32,
	nzj int32,
	subj *int32,
	valj *float64,
) res.Code {
	return res.Code(
		C.MSK_putacol(
			task.task,
			C.MSKint32t(j),
			C.MSKint32t(nzj),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(valj),
		),
	)
}

// PutAcolList is wrapping [MSK_putacollist]
//
// function MSK_putacollist has following parameters:
//   - task: MSKtask_t
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - ptrb: const MSKint32t *
//   - ptre: const MSKint32t *
//   - asub: const MSKint32t *
//   - aval: const MSKrealt *
//
// [MSK_putacollist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAcolList(
	num int32,
	sub *int32,
	ptrb *int32,
	ptre *int32,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putacollist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKint32t)(ptrb),
			(*C.MSKint32t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// PutAcollist64 is wrapping [MSK_putacollist64]
//
// function MSK_putacollist64 has following parameters:
//   - task: MSKtask_t
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - ptrb: const MSKint64t *
//   - ptre: const MSKint64t *
//   - asub: const MSKint32t *
//   - aval: const MSKrealt *
//
// [MSK_putacollist64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAcollist64(
	num int32,
	sub *int32,
	ptrb *int64,
	ptre *int64,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putacollist64(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKint64t)(ptrb),
			(*C.MSKint64t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// PutAcolSlice is wrapping [MSK_putacolslice]
//
// function MSK_putacolslice has following parameters:
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - ptrb: const MSKint32t *
//   - ptre: const MSKint32t *
//   - asub: const MSKint32t *
//   - aval: const MSKrealt *
//
// [MSK_putacolslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAcolSlice(
	first int32,
	last int32,
	ptrb *int32,
	ptre *int32,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putacolslice(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKint32t)(ptrb),
			(*C.MSKint32t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// PutAcolslice64 is wrapping [MSK_putacolslice64]
//
// function MSK_putacolslice64 has following parameters:
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - ptrb: const MSKint64t *
//   - ptre: const MSKint64t *
//   - asub: const MSKint32t *
//   - aval: const MSKrealt *
//
// [MSK_putacolslice64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAcolslice64(
	first int32,
	last int32,
	ptrb *int64,
	ptre *int64,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putacolslice64(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKint64t)(ptrb),
			(*C.MSKint64t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// PutAfebarfblocktriplet is wrapping [MSK_putafebarfblocktriplet]
//
// function MSK_putafebarfblocktriplet has following parameters:
//   - task: MSKtask_t
//   - numtrip: MSKint64t
//   - afeidx: const MSKint64t *
//   - barvaridx: const MSKint32t *
//   - subk: const MSKint32t *
//   - subl: const MSKint32t *
//   - valkl: const MSKrealt *
//
// [MSK_putafebarfblocktriplet]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAfebarfblocktriplet(
	numtrip int64,
	afeidx *int64,
	barvaridx *int32,
	subk *int32,
	subl *int32,
	valkl *float64,
) res.Code {
	return res.Code(
		C.MSK_putafebarfblocktriplet(
			task.task,
			C.MSKint64t(numtrip),
			(*C.MSKint64t)(afeidx),
			(*C.MSKint32t)(barvaridx),
			(*C.MSKint32t)(subk),
			(*C.MSKint32t)(subl),
			(*C.MSKrealt)(valkl),
		),
	)
}

// PutAfebarfentry is wrapping [MSK_putafebarfentry]
//
// function MSK_putafebarfentry has following parameters:
//   - task: MSKtask_t
//   - afeidx: MSKint64t
//   - barvaridx: MSKint32t
//   - numterm: MSKint64t
//   - termidx: const MSKint64t *
//   - termweight: const MSKrealt *
//
// [MSK_putafebarfentry]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAfebarfentry(
	afeidx int64,
	barvaridx int32,
	numterm int64,
	termidx *int64,
	termweight *float64,
) res.Code {
	return res.Code(
		C.MSK_putafebarfentry(
			task.task,
			C.MSKint64t(afeidx),
			C.MSKint32t(barvaridx),
			C.MSKint64t(numterm),
			(*C.MSKint64t)(termidx),
			(*C.MSKrealt)(termweight),
		),
	)
}

// PutAfebarfentryList is wrapping [MSK_putafebarfentrylist]
//
// function MSK_putafebarfentrylist has following parameters:
//   - task: MSKtask_t
//   - numafeidx: MSKint64t
//   - afeidx: const MSKint64t *
//   - barvaridx: const MSKint32t *
//   - numterm: const MSKint64t *
//   - ptrterm: const MSKint64t *
//   - lenterm: MSKint64t
//   - termidx: const MSKint64t *
//   - termweight: const MSKrealt *
//
// [MSK_putafebarfentrylist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAfebarfentryList(
	numafeidx int64,
	afeidx *int64,
	barvaridx *int32,
	numterm *int64,
	ptrterm *int64,
	lenterm int64,
	termidx *int64,
	termweight *float64,
) res.Code {
	return res.Code(
		C.MSK_putafebarfentrylist(
			task.task,
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidx),
			(*C.MSKint32t)(barvaridx),
			(*C.MSKint64t)(numterm),
			(*C.MSKint64t)(ptrterm),
			C.MSKint64t(lenterm),
			(*C.MSKint64t)(termidx),
			(*C.MSKrealt)(termweight),
		),
	)
}

// PutAfebarfrow is wrapping [MSK_putafebarfrow]
//
// function MSK_putafebarfrow has following parameters:
//   - task: MSKtask_t
//   - afeidx: MSKint64t
//   - numentr: MSKint32t
//   - barvaridx: const MSKint32t *
//   - numterm: const MSKint64t *
//   - ptrterm: const MSKint64t *
//   - lenterm: MSKint64t
//   - termidx: const MSKint64t *
//   - termweight: const MSKrealt *
//
// [MSK_putafebarfrow]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAfebarfrow(
	afeidx int64,
	numentr int32,
	barvaridx *int32,
	numterm *int64,
	ptrterm *int64,
	lenterm int64,
	termidx *int64,
	termweight *float64,
) res.Code {
	return res.Code(
		C.MSK_putafebarfrow(
			task.task,
			C.MSKint64t(afeidx),
			C.MSKint32t(numentr),
			(*C.MSKint32t)(barvaridx),
			(*C.MSKint64t)(numterm),
			(*C.MSKint64t)(ptrterm),
			C.MSKint64t(lenterm),
			(*C.MSKint64t)(termidx),
			(*C.MSKrealt)(termweight),
		),
	)
}

// PutAfefcol is wrapping [MSK_putafefcol]
//
// function MSK_putafefcol has following parameters:
//   - task: MSKtask_t
//   - varidx: MSKint32t
//   - numnz: MSKint64t
//   - afeidx: const MSKint64t *
//   - val: const MSKrealt *
//
// [MSK_putafefcol]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAfefcol(
	varidx int32,
	numnz int64,
	afeidx *int64,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_putafefcol(
			task.task,
			C.MSKint32t(varidx),
			C.MSKint64t(numnz),
			(*C.MSKint64t)(afeidx),
			(*C.MSKrealt)(val),
		),
	)
}

// PutAfefentry is wrapping [MSK_putafefentry]
//
// function MSK_putafefentry has following parameters:
//   - task: MSKtask_t
//   - afeidx: MSKint64t
//   - varidx: MSKint32t
//   - value: MSKrealt
//
// [MSK_putafefentry]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAfefentry(
	afeidx int64,
	varidx int32,
	value float64,
) res.Code {
	return res.Code(
		C.MSK_putafefentry(
			task.task,
			C.MSKint64t(afeidx),
			C.MSKint32t(varidx),
			C.MSKrealt(value),
		),
	)
}

// PutAfefentryList is wrapping [MSK_putafefentrylist]
//
// function MSK_putafefentrylist has following parameters:
//   - task: MSKtask_t
//   - numentr: MSKint64t
//   - afeidx: const MSKint64t *
//   - varidx: const MSKint32t *
//   - val: const MSKrealt *
//
// [MSK_putafefentrylist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAfefentryList(
	numentr int64,
	afeidx *int64,
	varidx *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_putafefentrylist(
			task.task,
			C.MSKint64t(numentr),
			(*C.MSKint64t)(afeidx),
			(*C.MSKint32t)(varidx),
			(*C.MSKrealt)(val),
		),
	)
}

// PutAfefrow is wrapping [MSK_putafefrow]
//
// function MSK_putafefrow has following parameters:
//   - task: MSKtask_t
//   - afeidx: MSKint64t
//   - numnz: MSKint32t
//   - varidx: const MSKint32t *
//   - val: const MSKrealt *
//
// [MSK_putafefrow]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAfefrow(
	afeidx int64,
	numnz int32,
	varidx *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_putafefrow(
			task.task,
			C.MSKint64t(afeidx),
			C.MSKint32t(numnz),
			(*C.MSKint32t)(varidx),
			(*C.MSKrealt)(val),
		),
	)
}

// PutAfefrowList is wrapping [MSK_putafefrowlist]
//
// function MSK_putafefrowlist has following parameters:
//   - task: MSKtask_t
//   - numafeidx: MSKint64t
//   - afeidx: const MSKint64t *
//   - numnzrow: const MSKint32t *
//   - ptrrow: const MSKint64t *
//   - lenidxval: MSKint64t
//   - varidx: const MSKint32t *
//   - val: const MSKrealt *
//
// [MSK_putafefrowlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAfefrowList(
	numafeidx int64,
	afeidx *int64,
	numnzrow *int32,
	ptrrow *int64,
	lenidxval int64,
	varidx *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_putafefrowlist(
			task.task,
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidx),
			(*C.MSKint32t)(numnzrow),
			(*C.MSKint64t)(ptrrow),
			C.MSKint64t(lenidxval),
			(*C.MSKint32t)(varidx),
			(*C.MSKrealt)(val),
		),
	)
}

// PutAfeg is wrapping [MSK_putafeg]
//
// function MSK_putafeg has following parameters:
//   - task: MSKtask_t
//   - afeidx: MSKint64t
//   - g: MSKrealt
//
// [MSK_putafeg]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAfeg(
	afeidx int64,
	g float64,
) res.Code {
	return res.Code(
		C.MSK_putafeg(
			task.task,
			C.MSKint64t(afeidx),
			C.MSKrealt(g),
		),
	)
}

// PutAfegList is wrapping [MSK_putafeglist]
//
// function MSK_putafeglist has following parameters:
//   - task: MSKtask_t
//   - numafeidx: MSKint64t
//   - afeidx: const MSKint64t *
//   - g: const MSKrealt *
//
// [MSK_putafeglist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAfegList(
	numafeidx int64,
	afeidx *int64,
	g *float64,
) res.Code {
	return res.Code(
		C.MSK_putafeglist(
			task.task,
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidx),
			(*C.MSKrealt)(g),
		),
	)
}

// PutAfegSlice is wrapping [MSK_putafegslice]
//
// function MSK_putafegslice has following parameters:
//   - task: MSKtask_t
//   - first: MSKint64t
//   - last: MSKint64t
//   - slice: const MSKrealt *
//
// [MSK_putafegslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAfegSlice(
	first int64,
	last int64,
	slice *float64,
) res.Code {
	return res.Code(
		C.MSK_putafegslice(
			task.task,
			C.MSKint64t(first),
			C.MSKint64t(last),
			(*C.MSKrealt)(slice),
		),
	)
}

// PutAij is wrapping [MSK_putaij]
//
// function MSK_putaij has following parameters:
//   - task: MSKtask_t
//   - i: MSKint32t
//   - j: MSKint32t
//   - aij: MSKrealt
//
// [MSK_putaij]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAij(
	i int32,
	j int32,
	aij float64,
) res.Code {
	return res.Code(
		C.MSK_putaij(
			task.task,
			C.MSKint32t(i),
			C.MSKint32t(j),
			C.MSKrealt(aij),
		),
	)
}

// PutAijList is wrapping [MSK_putaijlist]
//
// function MSK_putaijlist has following parameters:
//   - task: MSKtask_t
//   - num: MSKint32t
//   - subi: const MSKint32t *
//   - subj: const MSKint32t *
//   - valij: const MSKrealt *
//
// [MSK_putaijlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAijList(
	num int32,
	subi *int32,
	subj *int32,
	valij *float64,
) res.Code {
	return res.Code(
		C.MSK_putaijlist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(valij),
		),
	)
}

// PutAijlist64 is wrapping [MSK_putaijlist64]
//
// function MSK_putaijlist64 has following parameters:
//   - task: MSKtask_t
//   - num: MSKint64t
//   - subi: const MSKint32t *
//   - subj: const MSKint32t *
//   - valij: const MSKrealt *
//
// [MSK_putaijlist64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAijlist64(
	num int64,
	subi *int32,
	subj *int32,
	valij *float64,
) res.Code {
	return res.Code(
		C.MSK_putaijlist64(
			task.task,
			C.MSKint64t(num),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(valij),
		),
	)
}

// PutArow is wrapping [MSK_putarow]
//
// function MSK_putarow has following parameters:
//   - task: MSKtask_t
//   - i: MSKint32t
//   - nzi: MSKint32t
//   - subi: const MSKint32t *
//   - vali: const MSKrealt *
//
// [MSK_putarow]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutArow(
	i int32,
	nzi int32,
	subi *int32,
	vali *float64,
) res.Code {
	return res.Code(
		C.MSK_putarow(
			task.task,
			C.MSKint32t(i),
			C.MSKint32t(nzi),
			(*C.MSKint32t)(subi),
			(*C.MSKrealt)(vali),
		),
	)
}

// PutArowList is wrapping [MSK_putarowlist]
//
// function MSK_putarowlist has following parameters:
//   - task: MSKtask_t
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - ptrb: const MSKint32t *
//   - ptre: const MSKint32t *
//   - asub: const MSKint32t *
//   - aval: const MSKrealt *
//
// [MSK_putarowlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutArowList(
	num int32,
	sub *int32,
	ptrb *int32,
	ptre *int32,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putarowlist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKint32t)(ptrb),
			(*C.MSKint32t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// PutArowlist64 is wrapping [MSK_putarowlist64]
//
// function MSK_putarowlist64 has following parameters:
//   - task: MSKtask_t
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - ptrb: const MSKint64t *
//   - ptre: const MSKint64t *
//   - asub: const MSKint32t *
//   - aval: const MSKrealt *
//
// [MSK_putarowlist64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutArowlist64(
	num int32,
	sub *int32,
	ptrb *int64,
	ptre *int64,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putarowlist64(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKint64t)(ptrb),
			(*C.MSKint64t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// PutArowSlice is wrapping [MSK_putarowslice]
//
// function MSK_putarowslice has following parameters:
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - ptrb: const MSKint32t *
//   - ptre: const MSKint32t *
//   - asub: const MSKint32t *
//   - aval: const MSKrealt *
//
// [MSK_putarowslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutArowSlice(
	first int32,
	last int32,
	ptrb *int32,
	ptre *int32,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putarowslice(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKint32t)(ptrb),
			(*C.MSKint32t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// PutArowslice64 is wrapping [MSK_putarowslice64]
//
// function MSK_putarowslice64 has following parameters:
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - ptrb: const MSKint64t *
//   - ptre: const MSKint64t *
//   - asub: const MSKint32t *
//   - aval: const MSKrealt *
//
// [MSK_putarowslice64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutArowslice64(
	first int32,
	last int32,
	ptrb *int64,
	ptre *int64,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putarowslice64(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKint64t)(ptrb),
			(*C.MSKint64t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// PutAtruncatetol is wrapping [MSK_putatruncatetol]
//
// function MSK_putatruncatetol has following parameters:
//   - task: MSKtask_t
//   - tolzero: MSKrealt
//
// [MSK_putatruncatetol]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAtruncatetol(
	tolzero float64,
) res.Code {
	return res.Code(
		C.MSK_putatruncatetol(
			task.task,
			C.MSKrealt(tolzero),
		),
	)
}

// PutBarablocktriplet is wrapping [MSK_putbarablocktriplet]
//
// function MSK_putbarablocktriplet has following parameters:
//   - task: MSKtask_t
//   - num: MSKint64t
//   - subi: const MSKint32t *
//   - subj: const MSKint32t *
//   - subk: const MSKint32t *
//   - subl: const MSKint32t *
//   - valijkl: const MSKrealt *
//
// [MSK_putbarablocktriplet]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutBarablocktriplet(
	num int64,
	subi *int32,
	subj *int32,
	subk *int32,
	subl *int32,
	valijkl *float64,
) res.Code {
	return res.Code(
		C.MSK_putbarablocktriplet(
			task.task,
			C.MSKint64t(num),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKint32t)(subk),
			(*C.MSKint32t)(subl),
			(*C.MSKrealt)(valijkl),
		),
	)
}

// PutBaraij is wrapping [MSK_putbaraij]
//
// function MSK_putbaraij has following parameters:
//   - task: MSKtask_t
//   - i: MSKint32t
//   - j: MSKint32t
//   - num: MSKint64t
//   - sub: const MSKint64t *
//   - weights: const MSKrealt *
//
// [MSK_putbaraij]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutBaraij(
	i int32,
	j int32,
	num int64,
	sub *int64,
	weights *float64,
) res.Code {
	return res.Code(
		C.MSK_putbaraij(
			task.task,
			C.MSKint32t(i),
			C.MSKint32t(j),
			C.MSKint64t(num),
			(*C.MSKint64t)(sub),
			(*C.MSKrealt)(weights),
		),
	)
}

// PutBaraijList is wrapping [MSK_putbaraijlist]
//
// function MSK_putbaraijlist has following parameters:
//   - task: MSKtask_t
//   - num: MSKint32t
//   - subi: const MSKint32t *
//   - subj: const MSKint32t *
//   - alphaptrb: const MSKint64t *
//   - alphaptre: const MSKint64t *
//   - matidx: const MSKint64t *
//   - weights: const MSKrealt *
//
// [MSK_putbaraijlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutBaraijList(
	num int32,
	subi *int32,
	subj *int32,
	alphaptrb *int64,
	alphaptre *int64,
	matidx *int64,
	weights *float64,
) res.Code {
	return res.Code(
		C.MSK_putbaraijlist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKint64t)(alphaptrb),
			(*C.MSKint64t)(alphaptre),
			(*C.MSKint64t)(matidx),
			(*C.MSKrealt)(weights),
		),
	)
}

// PutBararowList is wrapping [MSK_putbararowlist]
//
// function MSK_putbararowlist has following parameters:
//   - task: MSKtask_t
//   - num: MSKint32t
//   - subi: const MSKint32t *
//   - ptrb: const MSKint64t *
//   - ptre: const MSKint64t *
//   - subj: const MSKint32t *
//   - nummat: const MSKint64t *
//   - matidx: const MSKint64t *
//   - weights: const MSKrealt *
//
// [MSK_putbararowlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutBararowList(
	num int32,
	subi *int32,
	ptrb *int64,
	ptre *int64,
	subj *int32,
	nummat *int64,
	matidx *int64,
	weights *float64,
) res.Code {
	return res.Code(
		C.MSK_putbararowlist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subi),
			(*C.MSKint64t)(ptrb),
			(*C.MSKint64t)(ptre),
			(*C.MSKint32t)(subj),
			(*C.MSKint64t)(nummat),
			(*C.MSKint64t)(matidx),
			(*C.MSKrealt)(weights),
		),
	)
}

// PutBarcblocktriplet is wrapping [MSK_putbarcblocktriplet]
//
// function MSK_putbarcblocktriplet has following parameters:
//   - task: MSKtask_t
//   - num: MSKint64t
//   - subj: const MSKint32t *
//   - subk: const MSKint32t *
//   - subl: const MSKint32t *
//   - valjkl: const MSKrealt *
//
// [MSK_putbarcblocktriplet]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutBarcblocktriplet(
	num int64,
	subj *int32,
	subk *int32,
	subl *int32,
	valjkl *float64,
) res.Code {
	return res.Code(
		C.MSK_putbarcblocktriplet(
			task.task,
			C.MSKint64t(num),
			(*C.MSKint32t)(subj),
			(*C.MSKint32t)(subk),
			(*C.MSKint32t)(subl),
			(*C.MSKrealt)(valjkl),
		),
	)
}

// PutBarcj is wrapping [MSK_putbarcj]
//
// function MSK_putbarcj has following parameters:
//   - task: MSKtask_t
//   - j: MSKint32t
//   - num: MSKint64t
//   - sub: const MSKint64t *
//   - weights: const MSKrealt *
//
// [MSK_putbarcj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutBarcj(
	j int32,
	num int64,
	sub *int64,
	weights *float64,
) res.Code {
	return res.Code(
		C.MSK_putbarcj(
			task.task,
			C.MSKint32t(j),
			C.MSKint64t(num),
			(*C.MSKint64t)(sub),
			(*C.MSKrealt)(weights),
		),
	)
}

// PutBarsj is wrapping [MSK_putbarsj]
//
// function MSK_putbarsj has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - j: MSKint32t
//   - barsj: const MSKrealt *
//
// [MSK_putbarsj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutBarsj(
	whichsol SolType,
	j int32,
	barsj *float64,
) res.Code {
	return res.Code(
		C.MSK_putbarsj(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(j),
			(*C.MSKrealt)(barsj),
		),
	)
}

// PutBarvarname is wrapping [MSK_putbarvarname]
//
// function MSK_putbarvarname has following parameters:
//   - task: MSKtask_t
//   - j: MSKint32t
//   - name: const char *
//
// [MSK_putbarvarname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutBarvarname(
	j int32,
	name *byte,
) res.Code {
	return res.Code(
		C.MSK_putbarvarname(
			task.task,
			C.MSKint32t(j),
			(*C.char)(unsafe.Pointer(name)),
		),
	)
}

// PutBarxj is wrapping [MSK_putbarxj]
//
// function MSK_putbarxj has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - j: MSKint32t
//   - barxj: const MSKrealt *
//
// [MSK_putbarxj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutBarxj(
	whichsol SolType,
	j int32,
	barxj *float64,
) res.Code {
	return res.Code(
		C.MSK_putbarxj(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(j),
			(*C.MSKrealt)(barxj),
		),
	)
}

// PutCfix is wrapping [MSK_putcfix]
//
// function MSK_putcfix has following parameters:
//   - task: MSKtask_t
//   - cfix: MSKrealt
//
// [MSK_putcfix]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutCfix(
	cfix float64,
) res.Code {
	return res.Code(
		C.MSK_putcfix(
			task.task,
			C.MSKrealt(cfix),
		),
	)
}

// PutCj is wrapping [MSK_putcj]
//
// function MSK_putcj has following parameters:
//   - task: MSKtask_t
//   - j: MSKint32t
//   - cj: MSKrealt
//
// [MSK_putcj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutCj(
	j int32,
	cj float64,
) res.Code {
	return res.Code(
		C.MSK_putcj(
			task.task,
			C.MSKint32t(j),
			C.MSKrealt(cj),
		),
	)
}

// PutCList is wrapping [MSK_putclist]
//
// function MSK_putclist has following parameters:
//   - task: MSKtask_t
//   - num: MSKint32t
//   - subj: const MSKint32t *
//   - val: const MSKrealt *
//
// [MSK_putclist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutCList(
	num int32,
	subj *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_putclist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(val),
		),
	)
}

// PutConbound is wrapping [MSK_putconbound]
//
// function MSK_putconbound has following parameters:
//   - task: MSKtask_t
//   - i: MSKint32t
//   - bkc: MSKboundkeye
//   - blc: MSKrealt
//   - buc: MSKrealt
//
// [MSK_putconbound]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutConbound(
	i int32,
	bkc BoundKey,
	blc float64,
	buc float64,
) res.Code {
	return res.Code(
		C.MSK_putconbound(
			task.task,
			C.MSKint32t(i),
			C.MSKboundkeye(bkc),
			C.MSKrealt(blc),
			C.MSKrealt(buc),
		),
	)
}

// PutConboundList is wrapping [MSK_putconboundlist]
//
// function MSK_putconboundlist has following parameters:
//   - task: MSKtask_t
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - bkc: const MSKboundkeye *
//   - blc: const MSKrealt *
//   - buc: const MSKrealt *
//
// [MSK_putconboundlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutConboundList(
	num int32,
	sub *int32,
	bkc *BoundKey,
	blc *float64,
	buc *float64,
) res.Code {
	return res.Code(
		C.MSK_putconboundlist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKboundkeye)(bkc),
			(*C.MSKrealt)(blc),
			(*C.MSKrealt)(buc),
		),
	)
}

// PutConboundListConst is wrapping [MSK_putconboundlistconst]
//
// function MSK_putconboundlistconst has following parameters:
//   - task: MSKtask_t
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - bkc: MSKboundkeye
//   - blc: MSKrealt
//   - buc: MSKrealt
//
// [MSK_putconboundlistconst]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutConboundListConst(
	num int32,
	sub *int32,
	bkc BoundKey,
	blc float64,
	buc float64,
) res.Code {
	return res.Code(
		C.MSK_putconboundlistconst(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			C.MSKboundkeye(bkc),
			C.MSKrealt(blc),
			C.MSKrealt(buc),
		),
	)
}

// PutConboundSlice is wrapping [MSK_putconboundslice]
//
// function MSK_putconboundslice has following parameters:
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - bkc: const MSKboundkeye *
//   - blc: const MSKrealt *
//   - buc: const MSKrealt *
//
// [MSK_putconboundslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutConboundSlice(
	first int32,
	last int32,
	bkc *BoundKey,
	blc *float64,
	buc *float64,
) res.Code {
	return res.Code(
		C.MSK_putconboundslice(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKboundkeye)(bkc),
			(*C.MSKrealt)(blc),
			(*C.MSKrealt)(buc),
		),
	)
}

// PutConboundSliceConst is wrapping [MSK_putconboundsliceconst]
//
// function MSK_putconboundsliceconst has following parameters:
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - bkc: MSKboundkeye
//   - blc: MSKrealt
//   - buc: MSKrealt
//
// [MSK_putconboundsliceconst]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutConboundSliceConst(
	first int32,
	last int32,
	bkc BoundKey,
	blc float64,
	buc float64,
) res.Code {
	return res.Code(
		C.MSK_putconboundsliceconst(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			C.MSKboundkeye(bkc),
			C.MSKrealt(blc),
			C.MSKrealt(buc),
		),
	)
}

// PutCone is wrapping [MSK_putcone]
//
// function MSK_putcone has following parameters:
//   - task: MSKtask_t
//   - k: MSKint32t
//   - ct: MSKconetypee
//   - conepar: MSKrealt
//   - nummem: MSKint32t
//   - submem: const MSKint32t *
//
// [MSK_putcone]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutCone(
	k int32,
	ct ConeType,
	conepar float64,
	nummem int32,
	submem *int32,
) res.Code {
	return res.Code(
		C.MSK_putcone(
			task.task,
			C.MSKint32t(k),
			C.MSKconetypee(ct),
			C.MSKrealt(conepar),
			C.MSKint32t(nummem),
			(*C.MSKint32t)(submem),
		),
	)
}

// PutConename is wrapping [MSK_putconename]
//
// function MSK_putconename has following parameters:
//   - task: MSKtask_t
//   - j: MSKint32t
//   - name: const char *
//
// [MSK_putconename]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutConename(
	j int32,
	name *byte,
) res.Code {
	return res.Code(
		C.MSK_putconename(
			task.task,
			C.MSKint32t(j),
			(*C.char)(unsafe.Pointer(name)),
		),
	)
}

// PutConname is wrapping [MSK_putconname]
//
// function MSK_putconname has following parameters:
//   - task: MSKtask_t
//   - i: MSKint32t
//   - name: const char *
//
// [MSK_putconname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutConname(
	i int32,
	name *byte,
) res.Code {
	return res.Code(
		C.MSK_putconname(
			task.task,
			C.MSKint32t(i),
			(*C.char)(unsafe.Pointer(name)),
		),
	)
}

// PutConsolutioni is wrapping [MSK_putconsolutioni]
//
// function MSK_putconsolutioni has following parameters:
//   - task: MSKtask_t
//   - i: MSKint32t
//   - whichsol: MSKsoltypee
//   - sk: MSKstakeye
//   - x: MSKrealt
//   - sl: MSKrealt
//   - su: MSKrealt
//
// [MSK_putconsolutioni]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutConsolutioni(
	i int32,
	whichsol SolType,
	sk StaKey,
	x float64,
	sl float64,
	su float64,
) res.Code {
	return res.Code(
		C.MSK_putconsolutioni(
			task.task,
			C.MSKint32t(i),
			C.MSKsoltypee(whichsol),
			C.MSKstakeye(sk),
			C.MSKrealt(x),
			C.MSKrealt(sl),
			C.MSKrealt(su),
		),
	)
}

// PutCSlice is wrapping [MSK_putcslice]
//
// function MSK_putcslice has following parameters:
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - slice: const MSKrealt *
//
// [MSK_putcslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutCSlice(
	first int32,
	last int32,
	slice *float64,
) res.Code {
	return res.Code(
		C.MSK_putcslice(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(slice),
		),
	)
}

// PutDjc is wrapping [MSK_putdjc]
//
// function MSK_putdjc has following parameters:
//   - task: MSKtask_t
//   - djcidx: MSKint64t
//   - numdomidx: MSKint64t
//   - domidxlist: const MSKint64t *
//   - numafeidx: MSKint64t
//   - afeidxlist: const MSKint64t *
//   - b: const MSKrealt *
//   - numterms: MSKint64t
//   - termsizelist: const MSKint64t *
//
// [MSK_putdjc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutDjc(
	djcidx int64,
	numdomidx int64,
	domidxlist *int64,
	numafeidx int64,
	afeidxlist *int64,
	b *float64,
	numterms int64,
	termsizelist *int64,
) res.Code {
	return res.Code(
		C.MSK_putdjc(
			task.task,
			C.MSKint64t(djcidx),
			C.MSKint64t(numdomidx),
			(*C.MSKint64t)(domidxlist),
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidxlist),
			(*C.MSKrealt)(b),
			C.MSKint64t(numterms),
			(*C.MSKint64t)(termsizelist),
		),
	)
}

// PutDjcname is wrapping [MSK_putdjcname]
//
// function MSK_putdjcname has following parameters:
//   - task: MSKtask_t
//   - djcidx: MSKint64t
//   - name: const char *
//
// [MSK_putdjcname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutDjcname(
	djcidx int64,
	name *byte,
) res.Code {
	return res.Code(
		C.MSK_putdjcname(
			task.task,
			C.MSKint64t(djcidx),
			(*C.char)(unsafe.Pointer(name)),
		),
	)
}

// PutDjcSlice is wrapping [MSK_putdjcslice]
//
// function MSK_putdjcslice has following parameters:
//   - task: MSKtask_t
//   - idxfirst: MSKint64t
//   - idxlast: MSKint64t
//   - numdomidx: MSKint64t
//   - domidxlist: const MSKint64t *
//   - numafeidx: MSKint64t
//   - afeidxlist: const MSKint64t *
//   - b: const MSKrealt *
//   - numterms: MSKint64t
//   - termsizelist: const MSKint64t *
//   - termsindjc: const MSKint64t *
//
// [MSK_putdjcslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutDjcSlice(
	idxfirst int64,
	idxlast int64,
	numdomidx int64,
	domidxlist *int64,
	numafeidx int64,
	afeidxlist *int64,
	b *float64,
	numterms int64,
	termsizelist *int64,
	termsindjc *int64,
) res.Code {
	return res.Code(
		C.MSK_putdjcslice(
			task.task,
			C.MSKint64t(idxfirst),
			C.MSKint64t(idxlast),
			C.MSKint64t(numdomidx),
			(*C.MSKint64t)(domidxlist),
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidxlist),
			(*C.MSKrealt)(b),
			C.MSKint64t(numterms),
			(*C.MSKint64t)(termsizelist),
			(*C.MSKint64t)(termsindjc),
		),
	)
}

// PutDomainname is wrapping [MSK_putdomainname]
//
// function MSK_putdomainname has following parameters:
//   - task: MSKtask_t
//   - domidx: MSKint64t
//   - name: const char *
//
// [MSK_putdomainname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutDomainname(
	domidx int64,
	name *byte,
) res.Code {
	return res.Code(
		C.MSK_putdomainname(
			task.task,
			C.MSKint64t(domidx),
			(*C.char)(unsafe.Pointer(name)),
		),
	)
}

// PutDouparam is wrapping [MSK_putdouparam]
//
// function MSK_putdouparam has following parameters:
//   - task: MSKtask_t
//   - param: MSKdparame
//   - parvalue: MSKrealt
//
// [MSK_putdouparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutDouparam(
	param DParam,
	parvalue float64,
) res.Code {
	return res.Code(
		C.MSK_putdouparam(
			task.task,
			C.MSKdparame(param),
			C.MSKrealt(parvalue),
		),
	)
}

// PutIntparam is wrapping [MSK_putintparam]
//
// function MSK_putintparam has following parameters:
//   - task: MSKtask_t
//   - param: MSKiparame
//   - parvalue: MSKint32t
//
// [MSK_putintparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutIntparam(
	param IParam,
	parvalue int32,
) res.Code {
	return res.Code(
		C.MSK_putintparam(
			task.task,
			C.MSKiparame(param),
			C.MSKint32t(parvalue),
		),
	)
}

// PutMaxnumacc is wrapping [MSK_putmaxnumacc]
//
// function MSK_putmaxnumacc has following parameters:
//   - task: MSKtask_t
//   - maxnumacc: MSKint64t
//
// [MSK_putmaxnumacc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutMaxnumacc(
	maxnumacc int64,
) res.Code {
	return res.Code(
		C.MSK_putmaxnumacc(
			task.task,
			C.MSKint64t(maxnumacc),
		),
	)
}

// PutMaxnumafe is wrapping [MSK_putmaxnumafe]
//
// function MSK_putmaxnumafe has following parameters:
//   - task: MSKtask_t
//   - maxnumafe: MSKint64t
//
// [MSK_putmaxnumafe]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutMaxnumafe(
	maxnumafe int64,
) res.Code {
	return res.Code(
		C.MSK_putmaxnumafe(
			task.task,
			C.MSKint64t(maxnumafe),
		),
	)
}

// PutMaxnumanz is wrapping [MSK_putmaxnumanz]
//
// function MSK_putmaxnumanz has following parameters:
//   - task: MSKtask_t
//   - maxnumanz: MSKint64t
//
// [MSK_putmaxnumanz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutMaxnumanz(
	maxnumanz int64,
) res.Code {
	return res.Code(
		C.MSK_putmaxnumanz(
			task.task,
			C.MSKint64t(maxnumanz),
		),
	)
}

// PutMaxnumbarvar is wrapping [MSK_putmaxnumbarvar]
//
// function MSK_putmaxnumbarvar has following parameters:
//   - task: MSKtask_t
//   - maxnumbarvar: MSKint32t
//
// [MSK_putmaxnumbarvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutMaxnumbarvar(
	maxnumbarvar int32,
) res.Code {
	return res.Code(
		C.MSK_putmaxnumbarvar(
			task.task,
			C.MSKint32t(maxnumbarvar),
		),
	)
}

// PutMaxnumcon is wrapping [MSK_putmaxnumcon]
//
// function MSK_putmaxnumcon has following parameters:
//   - task: MSKtask_t
//   - maxnumcon: MSKint32t
//
// [MSK_putmaxnumcon]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutMaxnumcon(
	maxnumcon int32,
) res.Code {
	return res.Code(
		C.MSK_putmaxnumcon(
			task.task,
			C.MSKint32t(maxnumcon),
		),
	)
}

// PutMaxnumcone is wrapping [MSK_putmaxnumcone]
//
// function MSK_putmaxnumcone has following parameters:
//   - task: MSKtask_t
//   - maxnumcone: MSKint32t
//
// [MSK_putmaxnumcone]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutMaxnumcone(
	maxnumcone int32,
) res.Code {
	return res.Code(
		C.MSK_putmaxnumcone(
			task.task,
			C.MSKint32t(maxnumcone),
		),
	)
}

// PutMaxnumdjc is wrapping [MSK_putmaxnumdjc]
//
// function MSK_putmaxnumdjc has following parameters:
//   - task: MSKtask_t
//   - maxnumdjc: MSKint64t
//
// [MSK_putmaxnumdjc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutMaxnumdjc(
	maxnumdjc int64,
) res.Code {
	return res.Code(
		C.MSK_putmaxnumdjc(
			task.task,
			C.MSKint64t(maxnumdjc),
		),
	)
}

// PutMaxnumdomain is wrapping [MSK_putmaxnumdomain]
//
// function MSK_putmaxnumdomain has following parameters:
//   - task: MSKtask_t
//   - maxnumdomain: MSKint64t
//
// [MSK_putmaxnumdomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutMaxnumdomain(
	maxnumdomain int64,
) res.Code {
	return res.Code(
		C.MSK_putmaxnumdomain(
			task.task,
			C.MSKint64t(maxnumdomain),
		),
	)
}

// PutMaxnumqnz is wrapping [MSK_putmaxnumqnz]
//
// function MSK_putmaxnumqnz has following parameters:
//   - task: MSKtask_t
//   - maxnumqnz: MSKint64t
//
// [MSK_putmaxnumqnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutMaxnumqnz(
	maxnumqnz int64,
) res.Code {
	return res.Code(
		C.MSK_putmaxnumqnz(
			task.task,
			C.MSKint64t(maxnumqnz),
		),
	)
}

// PutMaxnumvar is wrapping [MSK_putmaxnumvar]
//
// function MSK_putmaxnumvar has following parameters:
//   - task: MSKtask_t
//   - maxnumvar: MSKint32t
//
// [MSK_putmaxnumvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutMaxnumvar(
	maxnumvar int32,
) res.Code {
	return res.Code(
		C.MSK_putmaxnumvar(
			task.task,
			C.MSKint32t(maxnumvar),
		),
	)
}

// PutNadouparam is wrapping [MSK_putnadouparam]
//
// function MSK_putnadouparam has following parameters:
//   - task: MSKtask_t
//   - paramname: const char *
//   - parvalue: MSKrealt
//
// [MSK_putnadouparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutNadouparam(
	paramname *byte,
	parvalue float64,
) res.Code {
	return res.Code(
		C.MSK_putnadouparam(
			task.task,
			(*C.char)(unsafe.Pointer(paramname)),
			C.MSKrealt(parvalue),
		),
	)
}

// PutNaintparam is wrapping [MSK_putnaintparam]
//
// function MSK_putnaintparam has following parameters:
//   - task: MSKtask_t
//   - paramname: const char *
//   - parvalue: MSKint32t
//
// [MSK_putnaintparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutNaintparam(
	paramname *byte,
	parvalue int32,
) res.Code {
	return res.Code(
		C.MSK_putnaintparam(
			task.task,
			(*C.char)(unsafe.Pointer(paramname)),
			C.MSKint32t(parvalue),
		),
	)
}

// PutNastrparam is wrapping [MSK_putnastrparam]
//
// function MSK_putnastrparam has following parameters:
//   - task: MSKtask_t
//   - paramname: const char *
//   - parvalue: const char *
//
// [MSK_putnastrparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutNastrparam(
	paramname *byte,
	parvalue *byte,
) res.Code {
	return res.Code(
		C.MSK_putnastrparam(
			task.task,
			(*C.char)(unsafe.Pointer(paramname)),
			(*C.char)(unsafe.Pointer(parvalue)),
		),
	)
}

// PutObjname is wrapping [MSK_putobjname]
//
// function MSK_putobjname has following parameters:
//   - task: MSKtask_t
//   - objname: const char *
//
// [MSK_putobjname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutObjname(
	objname *byte,
) res.Code {
	return res.Code(
		C.MSK_putobjname(
			task.task,
			(*C.char)(unsafe.Pointer(objname)),
		),
	)
}

// PutObjsense is wrapping [MSK_putobjsense]
//
// function MSK_putobjsense has following parameters:
//   - task: MSKtask_t
//   - sense: MSKobjsensee
//
// [MSK_putobjsense]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutObjsense(
	sense ObjectiveSense,
) res.Code {
	return res.Code(
		C.MSK_putobjsense(
			task.task,
			C.MSKobjsensee(sense),
		),
	)
}

// PutOptserverhost is wrapping [MSK_putoptserverhost]
//
// function MSK_putoptserverhost has following parameters:
//   - task: MSKtask_t
//   - host: const char *
//
// [MSK_putoptserverhost]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutOptserverhost(
	host *byte,
) res.Code {
	return res.Code(
		C.MSK_putoptserverhost(
			task.task,
			(*C.char)(unsafe.Pointer(host)),
		),
	)
}

// PutParam is wrapping [MSK_putparam]
//
// function MSK_putparam has following parameters:
//   - task: MSKtask_t
//   - parname: const char *
//   - parvalue: const char *
//
// [MSK_putparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutParam(
	parname *byte,
	parvalue *byte,
) res.Code {
	return res.Code(
		C.MSK_putparam(
			task.task,
			(*C.char)(unsafe.Pointer(parname)),
			(*C.char)(unsafe.Pointer(parvalue)),
		),
	)
}

// PutQcon is wrapping [MSK_putqcon]
//
// function MSK_putqcon has following parameters:
//   - task: MSKtask_t
//   - numqcnz: MSKint32t
//   - qcsubk: const MSKint32t *
//   - qcsubi: const MSKint32t *
//   - qcsubj: const MSKint32t *
//   - qcval: const MSKrealt *
//
// [MSK_putqcon]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutQcon(
	numqcnz int32,
	qcsubk *int32,
	qcsubi *int32,
	qcsubj *int32,
	qcval *float64,
) res.Code {
	return res.Code(
		C.MSK_putqcon(
			task.task,
			C.MSKint32t(numqcnz),
			(*C.MSKint32t)(qcsubk),
			(*C.MSKint32t)(qcsubi),
			(*C.MSKint32t)(qcsubj),
			(*C.MSKrealt)(qcval),
		),
	)
}

// PutQconk is wrapping [MSK_putqconk]
//
// function MSK_putqconk has following parameters:
//   - task: MSKtask_t
//   - k: MSKint32t
//   - numqcnz: MSKint32t
//   - qcsubi: const MSKint32t *
//   - qcsubj: const MSKint32t *
//   - qcval: const MSKrealt *
//
// [MSK_putqconk]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutQconk(
	k int32,
	numqcnz int32,
	qcsubi *int32,
	qcsubj *int32,
	qcval *float64,
) res.Code {
	return res.Code(
		C.MSK_putqconk(
			task.task,
			C.MSKint32t(k),
			C.MSKint32t(numqcnz),
			(*C.MSKint32t)(qcsubi),
			(*C.MSKint32t)(qcsubj),
			(*C.MSKrealt)(qcval),
		),
	)
}

// PutQobj is wrapping [MSK_putqobj]
//
// function MSK_putqobj has following parameters:
//   - task: MSKtask_t
//   - numqonz: MSKint32t
//   - qosubi: const MSKint32t *
//   - qosubj: const MSKint32t *
//   - qoval: const MSKrealt *
//
// [MSK_putqobj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutQobj(
	numqonz int32,
	qosubi *int32,
	qosubj *int32,
	qoval *float64,
) res.Code {
	return res.Code(
		C.MSK_putqobj(
			task.task,
			C.MSKint32t(numqonz),
			(*C.MSKint32t)(qosubi),
			(*C.MSKint32t)(qosubj),
			(*C.MSKrealt)(qoval),
		),
	)
}

// PutQobjij is wrapping [MSK_putqobjij]
//
// function MSK_putqobjij has following parameters:
//   - task: MSKtask_t
//   - i: MSKint32t
//   - j: MSKint32t
//   - qoij: MSKrealt
//
// [MSK_putqobjij]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutQobjij(
	i int32,
	j int32,
	qoij float64,
) res.Code {
	return res.Code(
		C.MSK_putqobjij(
			task.task,
			C.MSKint32t(i),
			C.MSKint32t(j),
			C.MSKrealt(qoij),
		),
	)
}

// PutSkc is wrapping [MSK_putskc]
//
// function MSK_putskc has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - skc: const MSKstakeye *
//
// [MSK_putskc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutSkc(
	whichsol SolType,
	skc *StaKey,
) res.Code {
	return res.Code(
		C.MSK_putskc(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKstakeye)(skc),
		),
	)
}

// PutSkcSlice is wrapping [MSK_putskcslice]
//
// function MSK_putskcslice has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - skc: const MSKstakeye *
//
// [MSK_putskcslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutSkcSlice(
	whichsol SolType,
	first int32,
	last int32,
	skc *StaKey,
) res.Code {
	return res.Code(
		C.MSK_putskcslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKstakeye)(skc),
		),
	)
}

// PutSkx is wrapping [MSK_putskx]
//
// function MSK_putskx has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - skx: const MSKstakeye *
//
// [MSK_putskx]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutSkx(
	whichsol SolType,
	skx *StaKey,
) res.Code {
	return res.Code(
		C.MSK_putskx(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKstakeye)(skx),
		),
	)
}

// PutSkxSlice is wrapping [MSK_putskxslice]
//
// function MSK_putskxslice has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - skx: const MSKstakeye *
//
// [MSK_putskxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutSkxSlice(
	whichsol SolType,
	first int32,
	last int32,
	skx *StaKey,
) res.Code {
	return res.Code(
		C.MSK_putskxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKstakeye)(skx),
		),
	)
}

// PutSlc is wrapping [MSK_putslc]
//
// function MSK_putslc has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - slc: const MSKrealt *
//
// [MSK_putslc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutSlc(
	whichsol SolType,
	slc *float64,
) res.Code {
	return res.Code(
		C.MSK_putslc(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(slc),
		),
	)
}

// PutSlcSlice is wrapping [MSK_putslcslice]
//
// function MSK_putslcslice has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - slc: const MSKrealt *
//
// [MSK_putslcslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutSlcSlice(
	whichsol SolType,
	first int32,
	last int32,
	slc *float64,
) res.Code {
	return res.Code(
		C.MSK_putslcslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(slc),
		),
	)
}

// PutSlx is wrapping [MSK_putslx]
//
// function MSK_putslx has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - slx: const MSKrealt *
//
// [MSK_putslx]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutSlx(
	whichsol SolType,
	slx *float64,
) res.Code {
	return res.Code(
		C.MSK_putslx(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(slx),
		),
	)
}

// PutSlxSlice is wrapping [MSK_putslxslice]
//
// function MSK_putslxslice has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - slx: const MSKrealt *
//
// [MSK_putslxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutSlxSlice(
	whichsol SolType,
	first int32,
	last int32,
	slx *float64,
) res.Code {
	return res.Code(
		C.MSK_putslxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(slx),
		),
	)
}

// PutSnx is wrapping [MSK_putsnx]
//
// function MSK_putsnx has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - sux: const MSKrealt *
//
// [MSK_putsnx]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutSnx(
	whichsol SolType,
	sux *float64,
) res.Code {
	return res.Code(
		C.MSK_putsnx(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(sux),
		),
	)
}

// PutSnxSlice is wrapping [MSK_putsnxslice]
//
// function MSK_putsnxslice has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - snx: const MSKrealt *
//
// [MSK_putsnxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutSnxSlice(
	whichsol SolType,
	first int32,
	last int32,
	snx *float64,
) res.Code {
	return res.Code(
		C.MSK_putsnxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(snx),
		),
	)
}

// PutSolution is wrapping [MSK_putsolution]
//
// function MSK_putsolution has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - skc: const MSKstakeye *
//   - skx: const MSKstakeye *
//   - skn: const MSKstakeye *
//   - xc: const MSKrealt *
//   - xx: const MSKrealt *
//   - y: const MSKrealt *
//   - slc: const MSKrealt *
//   - suc: const MSKrealt *
//   - slx: const MSKrealt *
//   - sux: const MSKrealt *
//   - snx: const MSKrealt *
//
// [MSK_putsolution]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutSolution(
	whichsol SolType,
	skc *StaKey,
	skx *StaKey,
	skn *StaKey,
	xc *float64,
	xx *float64,
	y *float64,
	slc *float64,
	suc *float64,
	slx *float64,
	sux *float64,
	snx *float64,
) res.Code {
	return res.Code(
		C.MSK_putsolution(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKstakeye)(skc),
			(*C.MSKstakeye)(skx),
			(*C.MSKstakeye)(skn),
			(*C.MSKrealt)(xc),
			(*C.MSKrealt)(xx),
			(*C.MSKrealt)(y),
			(*C.MSKrealt)(slc),
			(*C.MSKrealt)(suc),
			(*C.MSKrealt)(slx),
			(*C.MSKrealt)(sux),
			(*C.MSKrealt)(snx),
		),
	)
}

// PutSolutionnew is wrapping [MSK_putsolutionnew]
//
// function MSK_putsolutionnew has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - skc: const MSKstakeye *
//   - skx: const MSKstakeye *
//   - skn: const MSKstakeye *
//   - xc: const MSKrealt *
//   - xx: const MSKrealt *
//   - y: const MSKrealt *
//   - slc: const MSKrealt *
//   - suc: const MSKrealt *
//   - slx: const MSKrealt *
//   - sux: const MSKrealt *
//   - snx: const MSKrealt *
//   - doty: const MSKrealt *
//
// [MSK_putsolutionnew]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutSolutionnew(
	whichsol SolType,
	skc *StaKey,
	skx *StaKey,
	skn *StaKey,
	xc *float64,
	xx *float64,
	y *float64,
	slc *float64,
	suc *float64,
	slx *float64,
	sux *float64,
	snx *float64,
	doty *float64,
) res.Code {
	return res.Code(
		C.MSK_putsolutionnew(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKstakeye)(skc),
			(*C.MSKstakeye)(skx),
			(*C.MSKstakeye)(skn),
			(*C.MSKrealt)(xc),
			(*C.MSKrealt)(xx),
			(*C.MSKrealt)(y),
			(*C.MSKrealt)(slc),
			(*C.MSKrealt)(suc),
			(*C.MSKrealt)(slx),
			(*C.MSKrealt)(sux),
			(*C.MSKrealt)(snx),
			(*C.MSKrealt)(doty),
		),
	)
}

// PutSolutionyi is wrapping [MSK_putsolutionyi]
//
// function MSK_putsolutionyi has following parameters:
//   - task: MSKtask_t
//   - i: MSKint32t
//   - whichsol: MSKsoltypee
//   - y: MSKrealt
//
// [MSK_putsolutionyi]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutSolutionyi(
	i int32,
	whichsol SolType,
	y float64,
) res.Code {
	return res.Code(
		C.MSK_putsolutionyi(
			task.task,
			C.MSKint32t(i),
			C.MSKsoltypee(whichsol),
			C.MSKrealt(y),
		),
	)
}

// PutStrparam is wrapping [MSK_putstrparam]
//
// function MSK_putstrparam has following parameters:
//   - task: MSKtask_t
//   - param: MSKsparame
//   - parvalue: const char *
//
// [MSK_putstrparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutStrparam(
	param SParam,
	parvalue *byte,
) res.Code {
	return res.Code(
		C.MSK_putstrparam(
			task.task,
			C.MSKsparame(param),
			(*C.char)(unsafe.Pointer(parvalue)),
		),
	)
}

// PutSuc is wrapping [MSK_putsuc]
//
// function MSK_putsuc has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - suc: const MSKrealt *
//
// [MSK_putsuc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutSuc(
	whichsol SolType,
	suc *float64,
) res.Code {
	return res.Code(
		C.MSK_putsuc(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(suc),
		),
	)
}

// PutSucSlice is wrapping [MSK_putsucslice]
//
// function MSK_putsucslice has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - suc: const MSKrealt *
//
// [MSK_putsucslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutSucSlice(
	whichsol SolType,
	first int32,
	last int32,
	suc *float64,
) res.Code {
	return res.Code(
		C.MSK_putsucslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(suc),
		),
	)
}

// PutSux is wrapping [MSK_putsux]
//
// function MSK_putsux has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - sux: const MSKrealt *
//
// [MSK_putsux]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutSux(
	whichsol SolType,
	sux *float64,
) res.Code {
	return res.Code(
		C.MSK_putsux(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(sux),
		),
	)
}

// PutSuxSlice is wrapping [MSK_putsuxslice]
//
// function MSK_putsuxslice has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - sux: const MSKrealt *
//
// [MSK_putsuxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutSuxSlice(
	whichsol SolType,
	first int32,
	last int32,
	sux *float64,
) res.Code {
	return res.Code(
		C.MSK_putsuxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(sux),
		),
	)
}

// PutTaskname is wrapping [MSK_puttaskname]
//
// function MSK_puttaskname has following parameters:
//   - task: MSKtask_t
//   - taskname: const char *
//
// [MSK_puttaskname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutTaskname(
	taskname *byte,
) res.Code {
	return res.Code(
		C.MSK_puttaskname(
			task.task,
			(*C.char)(unsafe.Pointer(taskname)),
		),
	)
}

// PutVarbound is wrapping [MSK_putvarbound]
//
// function MSK_putvarbound has following parameters:
//   - task: MSKtask_t
//   - j: MSKint32t
//   - bkx: MSKboundkeye
//   - blx: MSKrealt
//   - bux: MSKrealt
//
// [MSK_putvarbound]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutVarbound(
	j int32,
	bkx BoundKey,
	blx float64,
	bux float64,
) res.Code {
	return res.Code(
		C.MSK_putvarbound(
			task.task,
			C.MSKint32t(j),
			C.MSKboundkeye(bkx),
			C.MSKrealt(blx),
			C.MSKrealt(bux),
		),
	)
}

// PutVarboundList is wrapping [MSK_putvarboundlist]
//
// function MSK_putvarboundlist has following parameters:
//   - task: MSKtask_t
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - bkx: const MSKboundkeye *
//   - blx: const MSKrealt *
//   - bux: const MSKrealt *
//
// [MSK_putvarboundlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutVarboundList(
	num int32,
	sub *int32,
	bkx *BoundKey,
	blx *float64,
	bux *float64,
) res.Code {
	return res.Code(
		C.MSK_putvarboundlist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKboundkeye)(bkx),
			(*C.MSKrealt)(blx),
			(*C.MSKrealt)(bux),
		),
	)
}

// PutVarboundListConst is wrapping [MSK_putvarboundlistconst]
//
// function MSK_putvarboundlistconst has following parameters:
//   - task: MSKtask_t
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - bkx: MSKboundkeye
//   - blx: MSKrealt
//   - bux: MSKrealt
//
// [MSK_putvarboundlistconst]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutVarboundListConst(
	num int32,
	sub *int32,
	bkx BoundKey,
	blx float64,
	bux float64,
) res.Code {
	return res.Code(
		C.MSK_putvarboundlistconst(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			C.MSKboundkeye(bkx),
			C.MSKrealt(blx),
			C.MSKrealt(bux),
		),
	)
}

// PutVarboundSlice is wrapping [MSK_putvarboundslice]
//
// function MSK_putvarboundslice has following parameters:
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - bkx: const MSKboundkeye *
//   - blx: const MSKrealt *
//   - bux: const MSKrealt *
//
// [MSK_putvarboundslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutVarboundSlice(
	first int32,
	last int32,
	bkx *BoundKey,
	blx *float64,
	bux *float64,
) res.Code {
	return res.Code(
		C.MSK_putvarboundslice(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKboundkeye)(bkx),
			(*C.MSKrealt)(blx),
			(*C.MSKrealt)(bux),
		),
	)
}

// PutVarboundSliceConst is wrapping [MSK_putvarboundsliceconst]
//
// function MSK_putvarboundsliceconst has following parameters:
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - bkx: MSKboundkeye
//   - blx: MSKrealt
//   - bux: MSKrealt
//
// [MSK_putvarboundsliceconst]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutVarboundSliceConst(
	first int32,
	last int32,
	bkx BoundKey,
	blx float64,
	bux float64,
) res.Code {
	return res.Code(
		C.MSK_putvarboundsliceconst(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			C.MSKboundkeye(bkx),
			C.MSKrealt(blx),
			C.MSKrealt(bux),
		),
	)
}

// PutVarname is wrapping [MSK_putvarname]
//
// function MSK_putvarname has following parameters:
//   - task: MSKtask_t
//   - j: MSKint32t
//   - name: const char *
//
// [MSK_putvarname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutVarname(
	j int32,
	name *byte,
) res.Code {
	return res.Code(
		C.MSK_putvarname(
			task.task,
			C.MSKint32t(j),
			(*C.char)(unsafe.Pointer(name)),
		),
	)
}

// PutVarsolutionj is wrapping [MSK_putvarsolutionj]
//
// function MSK_putvarsolutionj has following parameters:
//   - task: MSKtask_t
//   - j: MSKint32t
//   - whichsol: MSKsoltypee
//   - sk: MSKstakeye
//   - x: MSKrealt
//   - sl: MSKrealt
//   - su: MSKrealt
//   - sn: MSKrealt
//
// [MSK_putvarsolutionj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutVarsolutionj(
	j int32,
	whichsol SolType,
	sk StaKey,
	x float64,
	sl float64,
	su float64,
	sn float64,
) res.Code {
	return res.Code(
		C.MSK_putvarsolutionj(
			task.task,
			C.MSKint32t(j),
			C.MSKsoltypee(whichsol),
			C.MSKstakeye(sk),
			C.MSKrealt(x),
			C.MSKrealt(sl),
			C.MSKrealt(su),
			C.MSKrealt(sn),
		),
	)
}

// PutVartype is wrapping [MSK_putvartype]
//
// function MSK_putvartype has following parameters:
//   - task: MSKtask_t
//   - j: MSKint32t
//   - vartype: MSKvariabletypee
//
// [MSK_putvartype]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutVartype(
	j int32,
	vartype VariableType,
) res.Code {
	return res.Code(
		C.MSK_putvartype(
			task.task,
			C.MSKint32t(j),
			C.MSKvariabletypee(vartype),
		),
	)
}

// PutVartypeList is wrapping [MSK_putvartypelist]
//
// function MSK_putvartypelist has following parameters:
//   - task: MSKtask_t
//   - num: MSKint32t
//   - subj: const MSKint32t *
//   - vartype: const MSKvariabletypee *
//
// [MSK_putvartypelist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutVartypeList(
	num int32,
	subj *int32,
	vartype *VariableType,
) res.Code {
	return res.Code(
		C.MSK_putvartypelist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subj),
			(*C.MSKvariabletypee)(vartype),
		),
	)
}

// PutXc is wrapping [MSK_putxc]
//
// function MSK_putxc has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - xc: MSKrealt *
//
// [MSK_putxc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutXc(
	whichsol SolType,
	xc *float64,
) res.Code {
	return res.Code(
		C.MSK_putxc(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(xc),
		),
	)
}

// PutXcSlice is wrapping [MSK_putxcslice]
//
// function MSK_putxcslice has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - xc: const MSKrealt *
//
// [MSK_putxcslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutXcSlice(
	whichsol SolType,
	first int32,
	last int32,
	xc *float64,
) res.Code {
	return res.Code(
		C.MSK_putxcslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(xc),
		),
	)
}

// PutXx is wrapping [MSK_putxx]
//
// function MSK_putxx has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - xx: const MSKrealt *
//
// [MSK_putxx]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutXx(
	whichsol SolType,
	xx *float64,
) res.Code {
	return res.Code(
		C.MSK_putxx(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(xx),
		),
	)
}

// PutXxSlice is wrapping [MSK_putxxslice]
//
// function MSK_putxxslice has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - xx: const MSKrealt *
//
// [MSK_putxxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutXxSlice(
	whichsol SolType,
	first int32,
	last int32,
	xx *float64,
) res.Code {
	return res.Code(
		C.MSK_putxxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(xx),
		),
	)
}

// PutY is wrapping [MSK_puty]
//
// function MSK_puty has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - y: const MSKrealt *
//
// [MSK_puty]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutY(
	whichsol SolType,
	y *float64,
) res.Code {
	return res.Code(
		C.MSK_puty(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(y),
		),
	)
}

// PutYSlice is wrapping [MSK_putyslice]
//
// function MSK_putyslice has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - y: const MSKrealt *
//
// [MSK_putyslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutYSlice(
	whichsol SolType,
	first int32,
	last int32,
	y *float64,
) res.Code {
	return res.Code(
		C.MSK_putyslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(y),
		),
	)
}

// Readbsolution is wrapping [MSK_readbsolution]
//
// function MSK_readbsolution has following parameters:
//   - task: MSKtask_t
//   - filename: const char *
//   - compress: MSKcompresstypee
//
// [MSK_readbsolution]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Readbsolution(
	filename *byte,
	compress CompressType,
) res.Code {
	return res.Code(
		C.MSK_readbsolution(
			task.task,
			(*C.char)(unsafe.Pointer(filename)),
			C.MSKcompresstypee(compress),
		),
	)
}

// Readdata is wrapping [MSK_readdata]
//
// function MSK_readdata has following parameters:
//   - task: MSKtask_t
//   - filename: const char *
//
// [MSK_readdata]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Readdata(
	filename *byte,
) res.Code {
	return res.Code(
		C.MSK_readdata(
			task.task,
			(*C.char)(unsafe.Pointer(filename)),
		),
	)
}

// Readdataautoformat is wrapping [MSK_readdataautoformat]
//
// function MSK_readdataautoformat has following parameters:
//   - task: MSKtask_t
//   - filename: const char *
//
// [MSK_readdataautoformat]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Readdataautoformat(
	filename *byte,
) res.Code {
	return res.Code(
		C.MSK_readdataautoformat(
			task.task,
			(*C.char)(unsafe.Pointer(filename)),
		),
	)
}

// Readdataformat is wrapping [MSK_readdataformat]
//
// function MSK_readdataformat has following parameters:
//   - task: MSKtask_t
//   - filename: const char *
//   - format: MSKdataformate
//   - compress: MSKcompresstypee
//
// [MSK_readdataformat]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Readdataformat(
	filename *byte,
	format DataFormat,
	compress CompressType,
) res.Code {
	return res.Code(
		C.MSK_readdataformat(
			task.task,
			(*C.char)(unsafe.Pointer(filename)),
			C.MSKdataformate(format),
			C.MSKcompresstypee(compress),
		),
	)
}

// Readjsonsol is wrapping [MSK_readjsonsol]
//
// function MSK_readjsonsol has following parameters:
//   - task: MSKtask_t
//   - filename: const char *
//
// [MSK_readjsonsol]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Readjsonsol(
	filename *byte,
) res.Code {
	return res.Code(
		C.MSK_readjsonsol(
			task.task,
			(*C.char)(unsafe.Pointer(filename)),
		),
	)
}

// Readjsonstring is wrapping [MSK_readjsonstring]
//
// function MSK_readjsonstring has following parameters:
//   - task: MSKtask_t
//   - data: const char *
//
// [MSK_readjsonstring]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Readjsonstring(
	data *byte,
) res.Code {
	return res.Code(
		C.MSK_readjsonstring(
			task.task,
			(*C.char)(unsafe.Pointer(data)),
		),
	)
}

// Readlpstring is wrapping [MSK_readlpstring]
//
// function MSK_readlpstring has following parameters:
//   - task: MSKtask_t
//   - data: const char *
//
// [MSK_readlpstring]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Readlpstring(
	data *byte,
) res.Code {
	return res.Code(
		C.MSK_readlpstring(
			task.task,
			(*C.char)(unsafe.Pointer(data)),
		),
	)
}

// Readopfstring is wrapping [MSK_readopfstring]
//
// function MSK_readopfstring has following parameters:
//   - task: MSKtask_t
//   - data: const char *
//
// [MSK_readopfstring]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Readopfstring(
	data *byte,
) res.Code {
	return res.Code(
		C.MSK_readopfstring(
			task.task,
			(*C.char)(unsafe.Pointer(data)),
		),
	)
}

// Readparamfile is wrapping [MSK_readparamfile]
//
// function MSK_readparamfile has following parameters:
//   - task: MSKtask_t
//   - filename: const char *
//
// [MSK_readparamfile]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Readparamfile(
	filename *byte,
) res.Code {
	return res.Code(
		C.MSK_readparamfile(
			task.task,
			(*C.char)(unsafe.Pointer(filename)),
		),
	)
}

// Readptfstring is wrapping [MSK_readptfstring]
//
// function MSK_readptfstring has following parameters:
//   - task: MSKtask_t
//   - data: const char *
//
// [MSK_readptfstring]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Readptfstring(
	data *byte,
) res.Code {
	return res.Code(
		C.MSK_readptfstring(
			task.task,
			(*C.char)(unsafe.Pointer(data)),
		),
	)
}

// Readsolution is wrapping [MSK_readsolution]
//
// function MSK_readsolution has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - filename: const char *
//
// [MSK_readsolution]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Readsolution(
	whichsol SolType,
	filename *byte,
) res.Code {
	return res.Code(
		C.MSK_readsolution(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.char)(unsafe.Pointer(filename)),
		),
	)
}

// Readsolutionfile is wrapping [MSK_readsolutionfile]
//
// function MSK_readsolutionfile has following parameters:
//   - task: MSKtask_t
//   - filename: const char *
//
// [MSK_readsolutionfile]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Readsolutionfile(
	filename *byte,
) res.Code {
	return res.Code(
		C.MSK_readsolutionfile(
			task.task,
			(*C.char)(unsafe.Pointer(filename)),
		),
	)
}

// Readsummary is wrapping [MSK_readsummary]
//
// function MSK_readsummary has following parameters:
//   - task: MSKtask_t
//   - whichstream: MSKstreamtypee
//
// [MSK_readsummary]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Readsummary(
	whichstream StreamType,
) res.Code {
	return res.Code(
		C.MSK_readsummary(
			task.task,
			C.MSKstreamtypee(whichstream),
		),
	)
}

// Readtask is wrapping [MSK_readtask]
//
// function MSK_readtask has following parameters:
//   - task: MSKtask_t
//   - filename: const char *
//
// [MSK_readtask]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Readtask(
	filename *byte,
) res.Code {
	return res.Code(
		C.MSK_readtask(
			task.task,
			(*C.char)(unsafe.Pointer(filename)),
		),
	)
}

// Removebarvars is wrapping [MSK_removebarvars]
//
// function MSK_removebarvars has following parameters:
//   - task: MSKtask_t
//   - num: MSKint32t
//   - subset: const MSKint32t *
//
// [MSK_removebarvars]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Removebarvars(
	num int32,
	subset *int32,
) res.Code {
	return res.Code(
		C.MSK_removebarvars(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subset),
		),
	)
}

// Removecones is wrapping [MSK_removecones]
//
// function MSK_removecones has following parameters:
//   - task: MSKtask_t
//   - num: MSKint32t
//   - subset: const MSKint32t *
//
// [MSK_removecones]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Removecones(
	num int32,
	subset *int32,
) res.Code {
	return res.Code(
		C.MSK_removecones(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subset),
		),
	)
}

// Removecons is wrapping [MSK_removecons]
//
// function MSK_removecons has following parameters:
//   - task: MSKtask_t
//   - num: MSKint32t
//   - subset: const MSKint32t *
//
// [MSK_removecons]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Removecons(
	num int32,
	subset *int32,
) res.Code {
	return res.Code(
		C.MSK_removecons(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subset),
		),
	)
}

// Removevars is wrapping [MSK_removevars]
//
// function MSK_removevars has following parameters:
//   - task: MSKtask_t
//   - num: MSKint32t
//   - subset: const MSKint32t *
//
// [MSK_removevars]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Removevars(
	num int32,
	subset *int32,
) res.Code {
	return res.Code(
		C.MSK_removevars(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subset),
		),
	)
}

// Resizetask is wrapping [MSK_resizetask]
//
// function MSK_resizetask has following parameters:
//   - task: MSKtask_t
//   - maxnumcon: MSKint32t
//   - maxnumvar: MSKint32t
//   - maxnumcone: MSKint32t
//   - maxnumanz: MSKint64t
//   - maxnumqnz: MSKint64t
//
// [MSK_resizetask]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Resizetask(
	maxnumcon int32,
	maxnumvar int32,
	maxnumcone int32,
	maxnumanz int64,
	maxnumqnz int64,
) res.Code {
	return res.Code(
		C.MSK_resizetask(
			task.task,
			C.MSKint32t(maxnumcon),
			C.MSKint32t(maxnumvar),
			C.MSKint32t(maxnumcone),
			C.MSKint64t(maxnumanz),
			C.MSKint64t(maxnumqnz),
		),
	)
}

// Sensitivityreport is wrapping [MSK_sensitivityreport]
//
// function MSK_sensitivityreport has following parameters:
//   - task: MSKtask_t
//   - whichstream: MSKstreamtypee
//
// [MSK_sensitivityreport]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Sensitivityreport(
	whichstream StreamType,
) res.Code {
	return res.Code(
		C.MSK_sensitivityreport(
			task.task,
			C.MSKstreamtypee(whichstream),
		),
	)
}

// Setdefaults is wrapping [MSK_setdefaults]
//
// function MSK_setdefaults has following parameters:
//   - task: MSKtask_t
//
// [MSK_setdefaults]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Setdefaults() res.Code {
	return res.Code(
		C.MSK_setdefaults(
			task.task,
		),
	)
}

// Sktostr is wrapping [MSK_sktostr]
//
// function MSK_sktostr has following parameters:
//   - task: MSKtask_t
//   - sk: MSKstakeye
//   - str: char *
//
// [MSK_sktostr]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Sktostr(
	sk StaKey,
	str *byte,
) res.Code {
	return res.Code(
		C.MSK_sktostr(
			task.task,
			C.MSKstakeye(sk),
			(*C.char)(unsafe.Pointer(str)),
		),
	)
}

// Solstatostr is wrapping [MSK_solstatostr]
//
// function MSK_solstatostr has following parameters:
//   - task: MSKtask_t
//   - solutionsta: MSKsolstae
//   - str: char *
//
// [MSK_solstatostr]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Solstatostr(
	solutionsta SolSta,
	str *byte,
) res.Code {
	return res.Code(
		C.MSK_solstatostr(
			task.task,
			C.MSKsolstae(solutionsta),
			(*C.char)(unsafe.Pointer(str)),
		),
	)
}

// Solutiondef is wrapping [MSK_solutiondef]
//
// function MSK_solutiondef has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - isdef: MSKbooleant *
//
// [MSK_solutiondef]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Solutiondef(
	whichsol SolType,
	isdef *int32,
) res.Code {
	return res.Code(
		C.MSK_solutiondef(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKbooleant)(isdef),
		),
	)
}

// Solutionsummary is wrapping [MSK_solutionsummary]
//
// function MSK_solutionsummary has following parameters:
//   - task: MSKtask_t
//   - whichstream: MSKstreamtypee
//
// [MSK_solutionsummary]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Solutionsummary(
	whichstream StreamType,
) res.Code {
	return res.Code(
		C.MSK_solutionsummary(
			task.task,
			C.MSKstreamtypee(whichstream),
		),
	)
}

// Solvewithbasis is wrapping [MSK_solvewithbasis]
//
// function MSK_solvewithbasis has following parameters:
//   - task: MSKtask_t
//   - transp: MSKbooleant
//   - numnz: MSKint32t
//   - sub: MSKint32t *
//   - val: MSKrealt *
//   - numnzout: MSKint32t *
//
// [MSK_solvewithbasis]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Solvewithbasis(
	transp int32,
	numnz int32,
	sub *int32,
	val *float64,
	numnzout *int32,
) res.Code {
	return res.Code(
		C.MSK_solvewithbasis(
			task.task,
			C.MSKbooleant(transp),
			C.MSKint32t(numnz),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(val),
			(*C.MSKint32t)(numnzout),
		),
	)
}

// Strtoconetype is wrapping [MSK_strtoconetype]
//
// function MSK_strtoconetype has following parameters:
//   - task: MSKtask_t
//   - str: const char *
//   - conetype: MSKconetypee *
//
// [MSK_strtoconetype]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Strtoconetype(
	str *byte,
	conetype *ConeType,
) res.Code {
	return res.Code(
		C.MSK_strtoconetype(
			task.task,
			(*C.char)(unsafe.Pointer(str)),
			(*C.MSKconetypee)(conetype),
		),
	)
}

// Strtosk is wrapping [MSK_strtosk]
//
// function MSK_strtosk has following parameters:
//   - task: MSKtask_t
//   - str: const char *
//   - sk: MSKstakeye *
//
// [MSK_strtosk]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Strtosk(
	str *byte,
	sk *StaKey,
) res.Code {
	return res.Code(
		C.MSK_strtosk(
			task.task,
			(*C.char)(unsafe.Pointer(str)),
			(*C.MSKstakeye)(sk),
		),
	)
}

// Toconic is wrapping [MSK_toconic]
//
// function MSK_toconic has following parameters:
//   - task: MSKtask_t
//
// [MSK_toconic]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Toconic() res.Code {
	return res.Code(
		C.MSK_toconic(
			task.task,
		),
	)
}

// Unlinkfuncfromtaskstream is wrapping [MSK_unlinkfuncfromtaskstream]
//
// function MSK_unlinkfuncfromtaskstream has following parameters:
//   - task: MSKtask_t
//   - whichstream: MSKstreamtypee
//
// [MSK_unlinkfuncfromtaskstream]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Unlinkfuncfromtaskstream(
	whichstream StreamType,
) res.Code {
	return res.Code(
		C.MSK_unlinkfuncfromtaskstream(
			task.task,
			C.MSKstreamtypee(whichstream),
		),
	)
}

// Updatesolutioninfo is wrapping [MSK_updatesolutioninfo]
//
// function MSK_updatesolutioninfo has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//
// [MSK_updatesolutioninfo]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Updatesolutioninfo(
	whichsol SolType,
) res.Code {
	return res.Code(
		C.MSK_updatesolutioninfo(
			task.task,
			C.MSKsoltypee(whichsol),
		),
	)
}

// Whichparam is wrapping [MSK_whichparam]
//
// function MSK_whichparam has following parameters:
//   - task: MSKtask_t
//   - parname: const char *
//   - partype: MSKparametertypee *
//   - param: MSKint32t *
//
// [MSK_whichparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Whichparam(
	parname *byte,
	partype *ParameterType,
	param *int32,
) res.Code {
	return res.Code(
		C.MSK_whichparam(
			task.task,
			(*C.char)(unsafe.Pointer(parname)),
			(*C.MSKparametertypee)(partype),
			(*C.MSKint32t)(param),
		),
	)
}

// Writebsolution is wrapping [MSK_writebsolution]
//
// function MSK_writebsolution has following parameters:
//   - task: MSKtask_t
//   - filename: const char *
//   - compress: MSKcompresstypee
//
// [MSK_writebsolution]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Writebsolution(
	filename *byte,
	compress CompressType,
) res.Code {
	return res.Code(
		C.MSK_writebsolution(
			task.task,
			(*C.char)(unsafe.Pointer(filename)),
			C.MSKcompresstypee(compress),
		),
	)
}

// Writedata is wrapping [MSK_writedata]
//
// function MSK_writedata has following parameters:
//   - task: MSKtask_t
//   - filename: const char *
//
// [MSK_writedata]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Writedata(
	filename *byte,
) res.Code {
	return res.Code(
		C.MSK_writedata(
			task.task,
			(*C.char)(unsafe.Pointer(filename)),
		),
	)
}

// Writejsonsol is wrapping [MSK_writejsonsol]
//
// function MSK_writejsonsol has following parameters:
//   - task: MSKtask_t
//   - filename: const char *
//
// [MSK_writejsonsol]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Writejsonsol(
	filename *byte,
) res.Code {
	return res.Code(
		C.MSK_writejsonsol(
			task.task,
			(*C.char)(unsafe.Pointer(filename)),
		),
	)
}

// Writeparamfile is wrapping [MSK_writeparamfile]
//
// function MSK_writeparamfile has following parameters:
//   - task: MSKtask_t
//   - filename: const char *
//
// [MSK_writeparamfile]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Writeparamfile(
	filename *byte,
) res.Code {
	return res.Code(
		C.MSK_writeparamfile(
			task.task,
			(*C.char)(unsafe.Pointer(filename)),
		),
	)
}

// Writesolution is wrapping [MSK_writesolution]
//
// function MSK_writesolution has following parameters:
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - filename: const char *
//
// [MSK_writesolution]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Writesolution(
	whichsol SolType,
	filename *byte,
) res.Code {
	return res.Code(
		C.MSK_writesolution(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.char)(unsafe.Pointer(filename)),
		),
	)
}

// Writesolutionfile is wrapping [MSK_writesolutionfile]
//
// function MSK_writesolutionfile has following parameters:
//   - task: MSKtask_t
//   - filename: const char *
//
// [MSK_writesolutionfile]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Writesolutionfile(
	filename *byte,
) res.Code {
	return res.Code(
		C.MSK_writesolutionfile(
			task.task,
			(*C.char)(unsafe.Pointer(filename)),
		),
	)
}

// Writetask is wrapping [MSK_writetask]
//
// function MSK_writetask has following parameters:
//   - task: MSKtask_t
//   - filename: const char *
//
// [MSK_writetask]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) Writetask(
	filename *byte,
) res.Code {
	return res.Code(
		C.MSK_writetask(
			task.task,
			(*C.char)(unsafe.Pointer(filename)),
		),
	)
}

// Axpy is wrapping [MSK_axpy]
//
// function MSK_axpy has following parameters:
//   - env: MSKenv_t
//   - n: MSKint32t
//   - alpha: MSKrealt
//   - x: const MSKrealt *
//   - y: MSKrealt *
//
// [MSK_axpy]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Axpy(
	n int32,
	alpha float64,
	x *float64,
	y *float64,
) res.Code {
	return res.Code(
		C.MSK_axpy(
			env.getEnv(),
			C.MSKint32t(n),
			C.MSKrealt(alpha),
			(*C.MSKrealt)(x),
			(*C.MSKrealt)(y),
		),
	)
}

// Checkinall is wrapping [MSK_checkinall]
//
// function MSK_checkinall has following parameters:
//   - env: MSKenv_t
//
// [MSK_checkinall]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Checkinall() res.Code {
	return res.Code(
		C.MSK_checkinall(
			env.getEnv(),
		),
	)
}

// Checkinlicense is wrapping [MSK_checkinlicense]
//
// function MSK_checkinlicense has following parameters:
//   - env: MSKenv_t
//   - feature: MSKfeaturee
//
// [MSK_checkinlicense]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Checkinlicense(
	feature Feature,
) res.Code {
	return res.Code(
		C.MSK_checkinlicense(
			env.getEnv(),
			C.MSKfeaturee(feature),
		),
	)
}

// Checkmemenv is wrapping [MSK_checkmemenv]
//
// function MSK_checkmemenv has following parameters:
//   - env: MSKenv_t
//   - file: const char *
//   - line: MSKint32t
//
// [MSK_checkmemenv]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Checkmemenv(
	file *byte,
	line int32,
) res.Code {
	return res.Code(
		C.MSK_checkmemenv(
			env.getEnv(),
			(*C.char)(unsafe.Pointer(file)),
			C.MSKint32t(line),
		),
	)
}

// Checkoutlicense is wrapping [MSK_checkoutlicense]
//
// function MSK_checkoutlicense has following parameters:
//   - env: MSKenv_t
//   - feature: MSKfeaturee
//
// [MSK_checkoutlicense]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Checkoutlicense(
	feature Feature,
) res.Code {
	return res.Code(
		C.MSK_checkoutlicense(
			env.getEnv(),
			C.MSKfeaturee(feature),
		),
	)
}

// Checkversion is wrapping [MSK_checkversion]
//
// function MSK_checkversion has following parameters:
//   - env: MSKenv_t
//   - major: MSKint32t
//   - minor: MSKint32t
//   - revision: MSKint32t
//
// [MSK_checkversion]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Checkversion(
	major int32,
	minor int32,
	revision int32,
) res.Code {
	return res.Code(
		C.MSK_checkversion(
			env.getEnv(),
			C.MSKint32t(major),
			C.MSKint32t(minor),
			C.MSKint32t(revision),
		),
	)
}

// Dot is wrapping [MSK_dot]
//
// function MSK_dot has following parameters:
//   - env: MSKenv_t
//   - n: MSKint32t
//   - x: const MSKrealt *
//   - y: const MSKrealt *
//   - xty: MSKrealt *
//
// [MSK_dot]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Dot(
	n int32,
	x *float64,
	y *float64,
) (r res.Code, xty float64) {
	r = res.Code(
		C.MSK_dot(
			env.getEnv(),
			C.MSKint32t(n),
			(*C.MSKrealt)(x),
			(*C.MSKrealt)(y),
			(*C.MSKrealt)(&xty),
		),
	)
	return
}

// Echointro is wrapping [MSK_echointro]
//
// function MSK_echointro has following parameters:
//   - env: MSKenv_t
//   - longver: MSKint32t
//
// [MSK_echointro]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Echointro(
	longver int32,
) res.Code {
	return res.Code(
		C.MSK_echointro(
			env.getEnv(),
			C.MSKint32t(longver),
		),
	)
}

// Expirylicenses is wrapping [MSK_expirylicenses]
//
// function MSK_expirylicenses has following parameters:
//   - env: MSKenv_t
//   - expiry: MSKint64t *
//
// [MSK_expirylicenses]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Expirylicenses(
	expiry *int64,
) res.Code {
	return res.Code(
		C.MSK_expirylicenses(
			env.getEnv(),
			(*C.MSKint64t)(expiry),
		),
	)
}

// Gemm is wrapping [MSK_gemm]
//
// function MSK_gemm has following parameters:
//   - env: MSKenv_t
//   - transa: MSKtransposee
//   - transb: MSKtransposee
//   - m: MSKint32t
//   - n: MSKint32t
//   - k: MSKint32t
//   - alpha: MSKrealt
//   - a: const MSKrealt *
//   - b: const MSKrealt *
//   - beta: MSKrealt
//   - c: MSKrealt *
//
// [MSK_gemm]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Gemm(
	transa Transpose,
	transb Transpose,
	m int32,
	n int32,
	k int32,
	alpha float64,
	a *float64,
	b *float64,
	beta float64,
	c *float64,
) res.Code {
	return res.Code(
		C.MSK_gemm(
			env.getEnv(),
			C.MSKtransposee(transa),
			C.MSKtransposee(transb),
			C.MSKint32t(m),
			C.MSKint32t(n),
			C.MSKint32t(k),
			C.MSKrealt(alpha),
			(*C.MSKrealt)(a),
			(*C.MSKrealt)(b),
			C.MSKrealt(beta),
			(*C.MSKrealt)(c),
		),
	)
}

// Gemv is wrapping [MSK_gemv]
//
// function MSK_gemv has following parameters:
//   - env: MSKenv_t
//   - transa: MSKtransposee
//   - m: MSKint32t
//   - n: MSKint32t
//   - alpha: MSKrealt
//   - a: const MSKrealt *
//   - x: const MSKrealt *
//   - beta: MSKrealt
//   - y: MSKrealt *
//
// [MSK_gemv]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Gemv(
	transa Transpose,
	m int32,
	n int32,
	alpha float64,
	a *float64,
	x *float64,
	beta float64,
	y *float64,
) res.Code {
	return res.Code(
		C.MSK_gemv(
			env.getEnv(),
			C.MSKtransposee(transa),
			C.MSKint32t(m),
			C.MSKint32t(n),
			C.MSKrealt(alpha),
			(*C.MSKrealt)(a),
			(*C.MSKrealt)(x),
			C.MSKrealt(beta),
			(*C.MSKrealt)(y),
		),
	)
}

// GetBuildinfo is wrapping [MSK_getbuildinfo]
//
// function MSK_getbuildinfo has following parameters:
//   - buildstate: char *
//   - builddate: char *
//
// [MSK_getbuildinfo]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func GetBuildinfo(
	buildstate *byte,
	builddate *byte,
) res.Code {
	return res.Code(
		C.MSK_getbuildinfo(
			(*C.char)(unsafe.Pointer(buildstate)),
			(*C.char)(unsafe.Pointer(builddate)),
		),
	)
}

// GetCodedesc is wrapping [MSK_getcodedesc]
//
// function MSK_getcodedesc has following parameters:
//   - code: MSKrescodee
//   - symname: char *
//   - str: char *
//
// [MSK_getcodedesc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func GetCodedesc(
	code res.Code,
	symname *byte,
	str *byte,
) res.Code {
	return res.Code(
		C.MSK_getcodedesc(
			C.MSKrescodee(code),
			(*C.char)(unsafe.Pointer(symname)),
			(*C.char)(unsafe.Pointer(str)),
		),
	)
}

// GetResponseclass is wrapping [MSK_getresponseclass]
//
// function MSK_getresponseclass has following parameters:
//   - r: MSKrescodee
//   - rc: MSKrescodetypee *
//
// [MSK_getresponseclass]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func GetResponseclass(
	r res.Code,
	rc *ResCodeType,
) res.Code {
	return res.Code(
		C.MSK_getresponseclass(
			C.MSKrescodee(r),
			(*C.MSKrescodetypee)(rc),
		),
	)
}

// GetSymbcondim is wrapping [MSK_getsymbcondim]
//
// function MSK_getsymbcondim has following parameters:
//   - env: MSKenv_t
//   - num: MSKint32t *
//   - maxlen: size_t *
//
// [MSK_getsymbcondim]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) GetSymbcondim(
	num *int32,
	maxlen *uint64,
) res.Code {
	return res.Code(
		C.MSK_getsymbcondim(
			env.getEnv(),
			(*C.MSKint32t)(num),
			(*C.size_t)(maxlen),
		),
	)
}

// GetVersion is wrapping [MSK_getversion]
//
// function MSK_getversion has following parameters:
//   - major: MSKint32t *
//   - minor: MSKint32t *
//   - revision: MSKint32t *
//
// [MSK_getversion]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func GetVersion(
	major *int32,
	minor *int32,
	revision *int32,
) res.Code {
	return res.Code(
		C.MSK_getversion(
			(*C.MSKint32t)(major),
			(*C.MSKint32t)(minor),
			(*C.MSKint32t)(revision),
		),
	)
}

// Iparvaltosymnam is wrapping [MSK_iparvaltosymnam]
//
// function MSK_iparvaltosymnam has following parameters:
//   - env: MSKenv_t
//   - whichparam: MSKiparame
//   - whichvalue: MSKint32t
//   - symbolicname: char *
//
// [MSK_iparvaltosymnam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Iparvaltosymnam(
	whichparam IParam,
	whichvalue int32,
	symbolicname *byte,
) res.Code {
	return res.Code(
		C.MSK_iparvaltosymnam(
			env.getEnv(),
			C.MSKiparame(whichparam),
			C.MSKint32t(whichvalue),
			(*C.char)(unsafe.Pointer(symbolicname)),
		),
	)
}

// Isinfinity is wrapping [MSK_isinfinity]
//
// function MSK_isinfinity has following parameters:
//   - value: MSKrealt
//
// [MSK_isinfinity]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func Isinfinity(
	value float64,
) int32 {
	return int32(
		C.MSK_isinfinity(
			C.MSKrealt(value),
		),
	)
}

// Licensecleanup is wrapping [MSK_licensecleanup]
//
// function MSK_licensecleanup has following parameters:
//
// [MSK_licensecleanup]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func Licensecleanup() res.Code {
	return res.Code(
		C.MSK_licensecleanup(),
	)
}

// Linkfiletoenvstream is wrapping [MSK_linkfiletoenvstream]
//
// function MSK_linkfiletoenvstream has following parameters:
//   - env: MSKenv_t
//   - whichstream: MSKstreamtypee
//   - filename: const char *
//   - append: MSKint32t
//
// [MSK_linkfiletoenvstream]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Linkfiletoenvstream(
	whichstream StreamType,
	filename *byte,
	append int32,
) res.Code {
	return res.Code(
		C.MSK_linkfiletoenvstream(
			env.getEnv(),
			C.MSKstreamtypee(whichstream),
			(*C.char)(unsafe.Pointer(filename)),
			C.MSKint32t(append),
		),
	)
}

// Potrf is wrapping [MSK_potrf]
//
// function MSK_potrf has following parameters:
//   - env: MSKenv_t
//   - uplo: MSKuploe
//   - n: MSKint32t
//   - a: MSKrealt *
//
// [MSK_potrf]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Potrf(
	uplo UpLo,
	n int32,
	a *float64,
) res.Code {
	return res.Code(
		C.MSK_potrf(
			env.getEnv(),
			C.MSKuploe(uplo),
			C.MSKint32t(n),
			(*C.MSKrealt)(a),
		),
	)
}

// PutLicensecode is wrapping [MSK_putlicensecode]
//
// function MSK_putlicensecode has following parameters:
//   - env: MSKenv_t
//   - code: const MSKint32t *
//
// [MSK_putlicensecode]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) PutLicensecode(
	code *int32,
) res.Code {
	return res.Code(
		C.MSK_putlicensecode(
			env.getEnv(),
			(*C.MSKint32t)(code),
		),
	)
}

// PutLicensedebug is wrapping [MSK_putlicensedebug]
//
// function MSK_putlicensedebug has following parameters:
//   - env: MSKenv_t
//   - licdebug: MSKint32t
//
// [MSK_putlicensedebug]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) PutLicensedebug(
	licdebug int32,
) res.Code {
	return res.Code(
		C.MSK_putlicensedebug(
			env.getEnv(),
			C.MSKint32t(licdebug),
		),
	)
}

// PutLicensepath is wrapping [MSK_putlicensepath]
//
// function MSK_putlicensepath has following parameters:
//   - env: MSKenv_t
//   - licensepath: const char *
//
// [MSK_putlicensepath]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) PutLicensepath(
	licensepath *byte,
) res.Code {
	return res.Code(
		C.MSK_putlicensepath(
			env.getEnv(),
			(*C.char)(unsafe.Pointer(licensepath)),
		),
	)
}

// PutLicensewait is wrapping [MSK_putlicensewait]
//
// function MSK_putlicensewait has following parameters:
//   - env: MSKenv_t
//   - licwait: MSKint32t
//
// [MSK_putlicensewait]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) PutLicensewait(
	licwait int32,
) res.Code {
	return res.Code(
		C.MSK_putlicensewait(
			env.getEnv(),
			C.MSKint32t(licwait),
		),
	)
}

// Resetexpirylicenses is wrapping [MSK_resetexpirylicenses]
//
// function MSK_resetexpirylicenses has following parameters:
//   - env: MSKenv_t
//
// [MSK_resetexpirylicenses]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Resetexpirylicenses() res.Code {
	return res.Code(
		C.MSK_resetexpirylicenses(
			env.getEnv(),
		),
	)
}

// Sparsetriangularsolvedense is wrapping [MSK_sparsetriangularsolvedense]
//
// function MSK_sparsetriangularsolvedense has following parameters:
//   - env: MSKenv_t
//   - transposed: MSKtransposee
//   - n: MSKint32t
//   - lnzc: const MSKint32t *
//   - lptrc: const MSKint64t *
//   - lensubnval: MSKint64t
//   - lsubc: const MSKint32t *
//   - lvalc: const MSKrealt *
//   - b: MSKrealt *
//
// [MSK_sparsetriangularsolvedense]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Sparsetriangularsolvedense(
	transposed Transpose,
	n int32,
	lnzc *int32,
	lptrc *int64,
	lensubnval int64,
	lsubc *int32,
	lvalc *float64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_sparsetriangularsolvedense(
			env.getEnv(),
			C.MSKtransposee(transposed),
			C.MSKint32t(n),
			(*C.MSKint32t)(lnzc),
			(*C.MSKint64t)(lptrc),
			C.MSKint64t(lensubnval),
			(*C.MSKint32t)(lsubc),
			(*C.MSKrealt)(lvalc),
			(*C.MSKrealt)(b),
		),
	)
}

// Syeig is wrapping [MSK_syeig]
//
// function MSK_syeig has following parameters:
//   - env: MSKenv_t
//   - uplo: MSKuploe
//   - n: MSKint32t
//   - a: const MSKrealt *
//   - w: MSKrealt *
//
// [MSK_syeig]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Syeig(
	uplo UpLo,
	n int32,
	a *float64,
	w *float64,
) res.Code {
	return res.Code(
		C.MSK_syeig(
			env.getEnv(),
			C.MSKuploe(uplo),
			C.MSKint32t(n),
			(*C.MSKrealt)(a),
			(*C.MSKrealt)(w),
		),
	)
}

// Syevd is wrapping [MSK_syevd]
//
// function MSK_syevd has following parameters:
//   - env: MSKenv_t
//   - uplo: MSKuploe
//   - n: MSKint32t
//   - a: MSKrealt *
//   - w: MSKrealt *
//
// [MSK_syevd]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Syevd(
	uplo UpLo,
	n int32,
	a *float64,
	w *float64,
) res.Code {
	return res.Code(
		C.MSK_syevd(
			env.getEnv(),
			C.MSKuploe(uplo),
			C.MSKint32t(n),
			(*C.MSKrealt)(a),
			(*C.MSKrealt)(w),
		),
	)
}

// Symnamtovalue is wrapping [MSK_symnamtovalue]
//
// function MSK_symnamtovalue has following parameters:
//   - name: const char *
//   - value: char *
//
// [MSK_symnamtovalue]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func Symnamtovalue(
	name *byte,
	value *byte,
) int32 {
	return int32(
		C.MSK_symnamtovalue(
			(*C.char)(unsafe.Pointer(name)),
			(*C.char)(unsafe.Pointer(value)),
		),
	)
}

// Syrk is wrapping [MSK_syrk]
//
// function MSK_syrk has following parameters:
//   - env: MSKenv_t
//   - uplo: MSKuploe
//   - trans: MSKtransposee
//   - n: MSKint32t
//   - k: MSKint32t
//   - alpha: MSKrealt
//   - a: const MSKrealt *
//   - beta: MSKrealt
//   - c: MSKrealt *
//
// [MSK_syrk]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Syrk(
	uplo UpLo,
	trans Transpose,
	n int32,
	k int32,
	alpha float64,
	a *float64,
	beta float64,
	c *float64,
) res.Code {
	return res.Code(
		C.MSK_syrk(
			env.getEnv(),
			C.MSKuploe(uplo),
			C.MSKtransposee(trans),
			C.MSKint32t(n),
			C.MSKint32t(k),
			C.MSKrealt(alpha),
			(*C.MSKrealt)(a),
			C.MSKrealt(beta),
			(*C.MSKrealt)(c),
		),
	)
}

// Unlinkfuncfromenvstream is wrapping [MSK_unlinkfuncfromenvstream]
//
// function MSK_unlinkfuncfromenvstream has following parameters:
//   - env: MSKenv_t
//   - whichstream: MSKstreamtypee
//
// [MSK_unlinkfuncfromenvstream]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (env *Env) Unlinkfuncfromenvstream(
	whichstream StreamType,
) res.Code {
	return res.Code(
		C.MSK_unlinkfuncfromenvstream(
			env.getEnv(),
			C.MSKstreamtypee(whichstream),
		),
	)
}

// Utf8towchar is wrapping [MSK_utf8towchar]
//
// function MSK_utf8towchar has following parameters:
//   - outputlen: size_t
//   - len: size_t *
//   - conv: size_t *
//   - output: MSKwchart *
//   - input: const char *
//
// [MSK_utf8towchar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func Utf8towchar(
	outputlen uint64,
	len *uint64,
	conv *uint64,
	output *int32,
	input *byte,
) res.Code {
	return res.Code(
		C.MSK_utf8towchar(
			C.size_t(outputlen),
			(*C.size_t)(len),
			(*C.size_t)(conv),
			(*C.MSKwchart)(output),
			(*C.char)(unsafe.Pointer(input)),
		),
	)
}

// Wchartoutf8 is wrapping [MSK_wchartoutf8]
//
// function MSK_wchartoutf8 has following parameters:
//   - outputlen: size_t
//   - len: size_t *
//   - conv: size_t *
//   - output: char *
//   - input: const MSKwchart *
//
// [MSK_wchartoutf8]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func Wchartoutf8(
	outputlen uint64,
	len *uint64,
	conv *uint64,
	output *byte,
	input *int32,
) res.Code {
	return res.Code(
		C.MSK_wchartoutf8(
			C.size_t(outputlen),
			(*C.size_t)(len),
			(*C.size_t)(conv),
			(*C.char)(unsafe.Pointer(output)),
			(*C.MSKwchart)(input),
		),
	)
}
