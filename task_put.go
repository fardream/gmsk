// Automatically generated by github.com/fardream/gen-gmsk
// function deinitions

package gmsk

// #include <stdlib.h> // for C.free
// #include <mosek.h>
import "C"

import (
	"unsafe"

	"github.com/fardream/gmsk/res"
)

// PutAcc is wrapping [MSK_putacc]
//
// [MSK_putacc] has following parameters
//   - task: MSKtask_t
//   - accidx: MSKint64t
//   - domidx: MSKint64t
//   - numafeidx: MSKint64t
//   - afeidxlist: const MSKint64t *
//   - b: const MSKrealt *
//
// [MSK_putacc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAcc(
	accidx int64,
	domidx int64,
	numafeidx int64,
	afeidxlist *int64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_putacc(
			task.task,
			C.MSKint64t(accidx),
			C.MSKint64t(domidx),
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidxlist),
			(*C.MSKrealt)(b),
		),
	)
}

// PutAccb is wrapping [MSK_putaccb]
//
// [MSK_putaccb] has following parameters
//   - task: MSKtask_t
//   - accidx: MSKint64t
//   - lengthb: MSKint64t
//   - b: const MSKrealt *
//
// [MSK_putaccb]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAccb(
	accidx int64,
	lengthb int64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_putaccb(
			task.task,
			C.MSKint64t(accidx),
			C.MSKint64t(lengthb),
			(*C.MSKrealt)(b),
		),
	)
}

// PutAccbj is wrapping [MSK_putaccbj]
//
// [MSK_putaccbj] has following parameters
//   - task: MSKtask_t
//   - accidx: MSKint64t
//   - j: MSKint64t
//   - bj: MSKrealt
//
// [MSK_putaccbj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAccbj(
	accidx int64,
	j int64,
	bj float64,
) res.Code {
	return res.Code(
		C.MSK_putaccbj(
			task.task,
			C.MSKint64t(accidx),
			C.MSKint64t(j),
			C.MSKrealt(bj),
		),
	)
}

// PutAccdoty is wrapping [MSK_putaccdoty]
//
// [MSK_putaccdoty] has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - accidx: MSKint64t
//   - doty: MSKrealt *
//
// [MSK_putaccdoty]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAccdoty(
	whichsol SolType,
	accidx int64,
	doty *float64,
) res.Code {
	return res.Code(
		C.MSK_putaccdoty(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint64t(accidx),
			(*C.MSKrealt)(doty),
		),
	)
}

// PutAccList is wrapping [MSK_putacclist]
//
// [MSK_putacclist] has following parameters
//   - task: MSKtask_t
//   - numaccs: MSKint64t
//   - accidxs: const MSKint64t *
//   - domidxs: const MSKint64t *
//   - numafeidx: MSKint64t
//   - afeidxlist: const MSKint64t *
//   - b: const MSKrealt *
//
// [MSK_putacclist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAccList(
	numaccs int64,
	accidxs *int64,
	domidxs *int64,
	numafeidx int64,
	afeidxlist *int64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_putacclist(
			task.task,
			C.MSKint64t(numaccs),
			(*C.MSKint64t)(accidxs),
			(*C.MSKint64t)(domidxs),
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidxlist),
			(*C.MSKrealt)(b),
		),
	)
}

// PutAccName is wrapping [MSK_putaccname],
// sets a name for an affine conic constraint.
//
// [MSK_putaccname] has following parameters
//   - task: MSKtask_t
//   - accidx: MSKint64t
//   - name: const char *
//
// [MSK_putaccname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAccName(
	accidx int64,
	name string,
) res.Code {
	c_name := C.CString(name)
	defer C.free(unsafe.Pointer(c_name))

	return res.Code(
		C.MSK_putaccname(
			task.task,
			C.MSKint64t(accidx),
			c_name,
		),
	)
}

// PutAcol is wrapping [MSK_putacol]
//
// [MSK_putacol] has following parameters
//   - task: MSKtask_t
//   - j: MSKint32t
//   - nzj: MSKint32t
//   - subj: const MSKint32t *
//   - valj: const MSKrealt *
//
// [MSK_putacol]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAcol(
	j int32,
	nzj int32,
	subj *int32,
	valj *float64,
) res.Code {
	return res.Code(
		C.MSK_putacol(
			task.task,
			C.MSKint32t(j),
			C.MSKint32t(nzj),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(valj),
		),
	)
}

// PutAcolList is wrapping [MSK_putacollist]
//
// [MSK_putacollist] has following parameters
//   - task: MSKtask_t
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - ptrb: const MSKint32t *
//   - ptre: const MSKint32t *
//   - asub: const MSKint32t *
//   - aval: const MSKrealt *
//
// [MSK_putacollist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAcolList(
	num int32,
	sub *int32,
	ptrb *int32,
	ptre *int32,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putacollist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKint32t)(ptrb),
			(*C.MSKint32t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// PutAcollist64 is wrapping [MSK_putacollist64]
//
// [MSK_putacollist64] has following parameters
//   - task: MSKtask_t
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - ptrb: const MSKint64t *
//   - ptre: const MSKint64t *
//   - asub: const MSKint32t *
//   - aval: const MSKrealt *
//
// [MSK_putacollist64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAcollist64(
	num int32,
	sub *int32,
	ptrb *int64,
	ptre *int64,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putacollist64(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKint64t)(ptrb),
			(*C.MSKint64t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// PutAcolSlice is wrapping [MSK_putacolslice]
//
// [MSK_putacolslice] has following parameters
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - ptrb: const MSKint32t *
//   - ptre: const MSKint32t *
//   - asub: const MSKint32t *
//   - aval: const MSKrealt *
//
// [MSK_putacolslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAcolSlice(
	first int32,
	last int32,
	ptrb *int32,
	ptre *int32,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putacolslice(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKint32t)(ptrb),
			(*C.MSKint32t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// PutAcolslice64 is wrapping [MSK_putacolslice64]
//
// [MSK_putacolslice64] has following parameters
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - ptrb: const MSKint64t *
//   - ptre: const MSKint64t *
//   - asub: const MSKint32t *
//   - aval: const MSKrealt *
//
// [MSK_putacolslice64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAcolslice64(
	first int32,
	last int32,
	ptrb *int64,
	ptre *int64,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putacolslice64(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKint64t)(ptrb),
			(*C.MSKint64t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// PutAfebarfblocktriplet is wrapping [MSK_putafebarfblocktriplet]
//
// [MSK_putafebarfblocktriplet] has following parameters
//   - task: MSKtask_t
//   - numtrip: MSKint64t
//   - afeidx: const MSKint64t *
//   - barvaridx: const MSKint32t *
//   - subk: const MSKint32t *
//   - subl: const MSKint32t *
//   - valkl: const MSKrealt *
//
// [MSK_putafebarfblocktriplet]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAfebarfblocktriplet(
	numtrip int64,
	afeidx *int64,
	barvaridx *int32,
	subk *int32,
	subl *int32,
	valkl *float64,
) res.Code {
	return res.Code(
		C.MSK_putafebarfblocktriplet(
			task.task,
			C.MSKint64t(numtrip),
			(*C.MSKint64t)(afeidx),
			(*C.MSKint32t)(barvaridx),
			(*C.MSKint32t)(subk),
			(*C.MSKint32t)(subl),
			(*C.MSKrealt)(valkl),
		),
	)
}

// PutAfebarfentry is wrapping [MSK_putafebarfentry]
//
// [MSK_putafebarfentry] has following parameters
//   - task: MSKtask_t
//   - afeidx: MSKint64t
//   - barvaridx: MSKint32t
//   - numterm: MSKint64t
//   - termidx: const MSKint64t *
//   - termweight: const MSKrealt *
//
// [MSK_putafebarfentry]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAfebarfentry(
	afeidx int64,
	barvaridx int32,
	numterm int64,
	termidx *int64,
	termweight *float64,
) res.Code {
	return res.Code(
		C.MSK_putafebarfentry(
			task.task,
			C.MSKint64t(afeidx),
			C.MSKint32t(barvaridx),
			C.MSKint64t(numterm),
			(*C.MSKint64t)(termidx),
			(*C.MSKrealt)(termweight),
		),
	)
}

// PutAfebarfentryList is wrapping [MSK_putafebarfentrylist]
//
// [MSK_putafebarfentrylist] has following parameters
//   - task: MSKtask_t
//   - numafeidx: MSKint64t
//   - afeidx: const MSKint64t *
//   - barvaridx: const MSKint32t *
//   - numterm: const MSKint64t *
//   - ptrterm: const MSKint64t *
//   - lenterm: MSKint64t
//   - termidx: const MSKint64t *
//   - termweight: const MSKrealt *
//
// [MSK_putafebarfentrylist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAfebarfentryList(
	numafeidx int64,
	afeidx *int64,
	barvaridx *int32,
	numterm *int64,
	ptrterm *int64,
	lenterm int64,
	termidx *int64,
	termweight *float64,
) res.Code {
	return res.Code(
		C.MSK_putafebarfentrylist(
			task.task,
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidx),
			(*C.MSKint32t)(barvaridx),
			(*C.MSKint64t)(numterm),
			(*C.MSKint64t)(ptrterm),
			C.MSKint64t(lenterm),
			(*C.MSKint64t)(termidx),
			(*C.MSKrealt)(termweight),
		),
	)
}

// PutAfebarfrow is wrapping [MSK_putafebarfrow]
//
// [MSK_putafebarfrow] has following parameters
//   - task: MSKtask_t
//   - afeidx: MSKint64t
//   - numentr: MSKint32t
//   - barvaridx: const MSKint32t *
//   - numterm: const MSKint64t *
//   - ptrterm: const MSKint64t *
//   - lenterm: MSKint64t
//   - termidx: const MSKint64t *
//   - termweight: const MSKrealt *
//
// [MSK_putafebarfrow]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAfebarfrow(
	afeidx int64,
	numentr int32,
	barvaridx *int32,
	numterm *int64,
	ptrterm *int64,
	lenterm int64,
	termidx *int64,
	termweight *float64,
) res.Code {
	return res.Code(
		C.MSK_putafebarfrow(
			task.task,
			C.MSKint64t(afeidx),
			C.MSKint32t(numentr),
			(*C.MSKint32t)(barvaridx),
			(*C.MSKint64t)(numterm),
			(*C.MSKint64t)(ptrterm),
			C.MSKint64t(lenterm),
			(*C.MSKint64t)(termidx),
			(*C.MSKrealt)(termweight),
		),
	)
}

// PutAfefcol is wrapping [MSK_putafefcol]
//
// [MSK_putafefcol] has following parameters
//   - task: MSKtask_t
//   - varidx: MSKint32t
//   - numnz: MSKint64t
//   - afeidx: const MSKint64t *
//   - val: const MSKrealt *
//
// [MSK_putafefcol]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAfefcol(
	varidx int32,
	numnz int64,
	afeidx *int64,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_putafefcol(
			task.task,
			C.MSKint32t(varidx),
			C.MSKint64t(numnz),
			(*C.MSKint64t)(afeidx),
			(*C.MSKrealt)(val),
		),
	)
}

// PutAfefentry is wrapping [MSK_putafefentry]
//
// [MSK_putafefentry] has following parameters
//   - task: MSKtask_t
//   - afeidx: MSKint64t
//   - varidx: MSKint32t
//   - value: MSKrealt
//
// [MSK_putafefentry]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAfefentry(
	afeidx int64,
	varidx int32,
	value float64,
) res.Code {
	return res.Code(
		C.MSK_putafefentry(
			task.task,
			C.MSKint64t(afeidx),
			C.MSKint32t(varidx),
			C.MSKrealt(value),
		),
	)
}

// PutAfefentryList is wrapping [MSK_putafefentrylist]
//
// [MSK_putafefentrylist] has following parameters
//   - task: MSKtask_t
//   - numentr: MSKint64t
//   - afeidx: const MSKint64t *
//   - varidx: const MSKint32t *
//   - val: const MSKrealt *
//
// [MSK_putafefentrylist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAfefentryList(
	numentr int64,
	afeidx *int64,
	varidx *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_putafefentrylist(
			task.task,
			C.MSKint64t(numentr),
			(*C.MSKint64t)(afeidx),
			(*C.MSKint32t)(varidx),
			(*C.MSKrealt)(val),
		),
	)
}

// PutAfefrow is wrapping [MSK_putafefrow]
//
// [MSK_putafefrow] has following parameters
//   - task: MSKtask_t
//   - afeidx: MSKint64t
//   - numnz: MSKint32t
//   - varidx: const MSKint32t *
//   - val: const MSKrealt *
//
// [MSK_putafefrow]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAfefrow(
	afeidx int64,
	numnz int32,
	varidx *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_putafefrow(
			task.task,
			C.MSKint64t(afeidx),
			C.MSKint32t(numnz),
			(*C.MSKint32t)(varidx),
			(*C.MSKrealt)(val),
		),
	)
}

// PutAfefrowList is wrapping [MSK_putafefrowlist]
//
// [MSK_putafefrowlist] has following parameters
//   - task: MSKtask_t
//   - numafeidx: MSKint64t
//   - afeidx: const MSKint64t *
//   - numnzrow: const MSKint32t *
//   - ptrrow: const MSKint64t *
//   - lenidxval: MSKint64t
//   - varidx: const MSKint32t *
//   - val: const MSKrealt *
//
// [MSK_putafefrowlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAfefrowList(
	numafeidx int64,
	afeidx *int64,
	numnzrow *int32,
	ptrrow *int64,
	lenidxval int64,
	varidx *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_putafefrowlist(
			task.task,
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidx),
			(*C.MSKint32t)(numnzrow),
			(*C.MSKint64t)(ptrrow),
			C.MSKint64t(lenidxval),
			(*C.MSKint32t)(varidx),
			(*C.MSKrealt)(val),
		),
	)
}

// PutAfeg is wrapping [MSK_putafeg]
//
// [MSK_putafeg] has following parameters
//   - task: MSKtask_t
//   - afeidx: MSKint64t
//   - g: MSKrealt
//
// [MSK_putafeg]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAfeg(
	afeidx int64,
	g float64,
) res.Code {
	return res.Code(
		C.MSK_putafeg(
			task.task,
			C.MSKint64t(afeidx),
			C.MSKrealt(g),
		),
	)
}

// PutAfegList is wrapping [MSK_putafeglist]
//
// [MSK_putafeglist] has following parameters
//   - task: MSKtask_t
//   - numafeidx: MSKint64t
//   - afeidx: const MSKint64t *
//   - g: const MSKrealt *
//
// [MSK_putafeglist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAfegList(
	numafeidx int64,
	afeidx *int64,
	g *float64,
) res.Code {
	return res.Code(
		C.MSK_putafeglist(
			task.task,
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidx),
			(*C.MSKrealt)(g),
		),
	)
}

// PutAfegSlice is wrapping [MSK_putafegslice]
//
// [MSK_putafegslice] has following parameters
//   - task: MSKtask_t
//   - first: MSKint64t
//   - last: MSKint64t
//   - slice: const MSKrealt *
//
// [MSK_putafegslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAfegSlice(
	first int64,
	last int64,
	slice *float64,
) res.Code {
	return res.Code(
		C.MSK_putafegslice(
			task.task,
			C.MSKint64t(first),
			C.MSKint64t(last),
			(*C.MSKrealt)(slice),
		),
	)
}

// PutAij is wrapping [MSK_putaij],
// set the value of the constraints matrix A[i,j]
//
// [MSK_putaij] has following parameters
//   - task: MSKtask_t
//   - i: MSKint32t
//   - j: MSKint32t
//   - aij: MSKrealt
//
// [MSK_putaij]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAij(
	i int32,
	j int32,
	aij float64,
) res.Code {
	return res.Code(
		C.MSK_putaij(
			task.task,
			C.MSKint32t(i),
			C.MSKint32t(j),
			C.MSKrealt(aij),
		),
	)
}

// PutAijList is wrapping [MSK_putaijlist],
// sets a list of constraint matrix A by index.
//
// [MSK_putaijlist] has following parameters
//   - task: MSKtask_t
//   - num: MSKint32t
//   - subi: const MSKint32t *
//   - subj: const MSKint32t *
//   - valij: const MSKrealt *
//
// [MSK_putaijlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAijList(
	num int32,
	subi *int32,
	subj *int32,
	valij *float64,
) res.Code {
	return res.Code(
		C.MSK_putaijlist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(valij),
		),
	)
}

// PutAijlist64 is wrapping [MSK_putaijlist64]
//
// [MSK_putaijlist64] has following parameters
//   - task: MSKtask_t
//   - num: MSKint64t
//   - subi: const MSKint32t *
//   - subj: const MSKint32t *
//   - valij: const MSKrealt *
//
// [MSK_putaijlist64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAijlist64(
	num int64,
	subi *int32,
	subj *int32,
	valij *float64,
) res.Code {
	return res.Code(
		C.MSK_putaijlist64(
			task.task,
			C.MSKint64t(num),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(valij),
		),
	)
}

// PutArow is wrapping [MSK_putarow]
//
// [MSK_putarow] has following parameters
//   - task: MSKtask_t
//   - i: MSKint32t
//   - nzi: MSKint32t
//   - subi: const MSKint32t *
//   - vali: const MSKrealt *
//
// [MSK_putarow]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutArow(
	i int32,
	nzi int32,
	subi *int32,
	vali *float64,
) res.Code {
	return res.Code(
		C.MSK_putarow(
			task.task,
			C.MSKint32t(i),
			C.MSKint32t(nzi),
			(*C.MSKint32t)(subi),
			(*C.MSKrealt)(vali),
		),
	)
}

// PutArowList is wrapping [MSK_putarowlist]
//
// [MSK_putarowlist] has following parameters
//   - task: MSKtask_t
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - ptrb: const MSKint32t *
//   - ptre: const MSKint32t *
//   - asub: const MSKint32t *
//   - aval: const MSKrealt *
//
// [MSK_putarowlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutArowList(
	num int32,
	sub *int32,
	ptrb *int32,
	ptre *int32,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putarowlist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKint32t)(ptrb),
			(*C.MSKint32t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// PutArowlist64 is wrapping [MSK_putarowlist64]
//
// [MSK_putarowlist64] has following parameters
//   - task: MSKtask_t
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - ptrb: const MSKint64t *
//   - ptre: const MSKint64t *
//   - asub: const MSKint32t *
//   - aval: const MSKrealt *
//
// [MSK_putarowlist64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutArowlist64(
	num int32,
	sub *int32,
	ptrb *int64,
	ptre *int64,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putarowlist64(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKint64t)(ptrb),
			(*C.MSKint64t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// PutArowSlice is wrapping [MSK_putarowslice]
//
// [MSK_putarowslice] has following parameters
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - ptrb: const MSKint32t *
//   - ptre: const MSKint32t *
//   - asub: const MSKint32t *
//   - aval: const MSKrealt *
//
// [MSK_putarowslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutArowSlice(
	first int32,
	last int32,
	ptrb *int32,
	ptre *int32,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putarowslice(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKint32t)(ptrb),
			(*C.MSKint32t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// PutArowslice64 is wrapping [MSK_putarowslice64]
//
// [MSK_putarowslice64] has following parameters
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - ptrb: const MSKint64t *
//   - ptre: const MSKint64t *
//   - asub: const MSKint32t *
//   - aval: const MSKrealt *
//
// [MSK_putarowslice64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutArowslice64(
	first int32,
	last int32,
	ptrb *int64,
	ptre *int64,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putarowslice64(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKint64t)(ptrb),
			(*C.MSKint64t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// PutAtruncatetol is wrapping [MSK_putatruncatetol]
//
// [MSK_putatruncatetol] has following parameters
//   - task: MSKtask_t
//   - tolzero: MSKrealt
//
// [MSK_putatruncatetol]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutAtruncatetol(
	tolzero float64,
) res.Code {
	return res.Code(
		C.MSK_putatruncatetol(
			task.task,
			C.MSKrealt(tolzero),
		),
	)
}

// PutBarablocktriplet is wrapping [MSK_putbarablocktriplet]
//
// [MSK_putbarablocktriplet] has following parameters
//   - task: MSKtask_t
//   - num: MSKint64t
//   - subi: const MSKint32t *
//   - subj: const MSKint32t *
//   - subk: const MSKint32t *
//   - subl: const MSKint32t *
//   - valijkl: const MSKrealt *
//
// [MSK_putbarablocktriplet]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutBarablocktriplet(
	num int64,
	subi *int32,
	subj *int32,
	subk *int32,
	subl *int32,
	valijkl *float64,
) res.Code {
	return res.Code(
		C.MSK_putbarablocktriplet(
			task.task,
			C.MSKint64t(num),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKint32t)(subk),
			(*C.MSKint32t)(subl),
			(*C.MSKrealt)(valijkl),
		),
	)
}

// PutBaraij is wrapping [MSK_putbaraij]
//
// [MSK_putbaraij] has following parameters
//   - task: MSKtask_t
//   - i: MSKint32t
//   - j: MSKint32t
//   - num: MSKint64t
//   - sub: const MSKint64t *
//   - weights: const MSKrealt *
//
// [MSK_putbaraij]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutBaraij(
	i int32,
	j int32,
	num int64,
	sub *int64,
	weights *float64,
) res.Code {
	return res.Code(
		C.MSK_putbaraij(
			task.task,
			C.MSKint32t(i),
			C.MSKint32t(j),
			C.MSKint64t(num),
			(*C.MSKint64t)(sub),
			(*C.MSKrealt)(weights),
		),
	)
}

// PutBaraijList is wrapping [MSK_putbaraijlist]
//
// [MSK_putbaraijlist] has following parameters
//   - task: MSKtask_t
//   - num: MSKint32t
//   - subi: const MSKint32t *
//   - subj: const MSKint32t *
//   - alphaptrb: const MSKint64t *
//   - alphaptre: const MSKint64t *
//   - matidx: const MSKint64t *
//   - weights: const MSKrealt *
//
// [MSK_putbaraijlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutBaraijList(
	num int32,
	subi *int32,
	subj *int32,
	alphaptrb *int64,
	alphaptre *int64,
	matidx *int64,
	weights *float64,
) res.Code {
	return res.Code(
		C.MSK_putbaraijlist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKint64t)(alphaptrb),
			(*C.MSKint64t)(alphaptre),
			(*C.MSKint64t)(matidx),
			(*C.MSKrealt)(weights),
		),
	)
}

// PutBararowList is wrapping [MSK_putbararowlist]
//
// [MSK_putbararowlist] has following parameters
//   - task: MSKtask_t
//   - num: MSKint32t
//   - subi: const MSKint32t *
//   - ptrb: const MSKint64t *
//   - ptre: const MSKint64t *
//   - subj: const MSKint32t *
//   - nummat: const MSKint64t *
//   - matidx: const MSKint64t *
//   - weights: const MSKrealt *
//
// [MSK_putbararowlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutBararowList(
	num int32,
	subi *int32,
	ptrb *int64,
	ptre *int64,
	subj *int32,
	nummat *int64,
	matidx *int64,
	weights *float64,
) res.Code {
	return res.Code(
		C.MSK_putbararowlist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subi),
			(*C.MSKint64t)(ptrb),
			(*C.MSKint64t)(ptre),
			(*C.MSKint32t)(subj),
			(*C.MSKint64t)(nummat),
			(*C.MSKint64t)(matidx),
			(*C.MSKrealt)(weights),
		),
	)
}

// PutBarcblocktriplet is wrapping [MSK_putbarcblocktriplet]
//
// [MSK_putbarcblocktriplet] has following parameters
//   - task: MSKtask_t
//   - num: MSKint64t
//   - subj: const MSKint32t *
//   - subk: const MSKint32t *
//   - subl: const MSKint32t *
//   - valjkl: const MSKrealt *
//
// [MSK_putbarcblocktriplet]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutBarcblocktriplet(
	num int64,
	subj *int32,
	subk *int32,
	subl *int32,
	valjkl *float64,
) res.Code {
	return res.Code(
		C.MSK_putbarcblocktriplet(
			task.task,
			C.MSKint64t(num),
			(*C.MSKint32t)(subj),
			(*C.MSKint32t)(subk),
			(*C.MSKint32t)(subl),
			(*C.MSKrealt)(valjkl),
		),
	)
}

// PutBarcj is wrapping [MSK_putbarcj]
//
// [MSK_putbarcj] has following parameters
//   - task: MSKtask_t
//   - j: MSKint32t
//   - num: MSKint64t
//   - sub: const MSKint64t *
//   - weights: const MSKrealt *
//
// [MSK_putbarcj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutBarcj(
	j int32,
	num int64,
	sub *int64,
	weights *float64,
) res.Code {
	return res.Code(
		C.MSK_putbarcj(
			task.task,
			C.MSKint32t(j),
			C.MSKint64t(num),
			(*C.MSKint64t)(sub),
			(*C.MSKrealt)(weights),
		),
	)
}

// PutBarsj is wrapping [MSK_putbarsj]
//
// [MSK_putbarsj] has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - j: MSKint32t
//   - barsj: const MSKrealt *
//
// [MSK_putbarsj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutBarsj(
	whichsol SolType,
	j int32,
	barsj *float64,
) res.Code {
	return res.Code(
		C.MSK_putbarsj(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(j),
			(*C.MSKrealt)(barsj),
		),
	)
}

// PutBarvarName is wrapping [MSK_putbarvarname]
//
// [MSK_putbarvarname] has following parameters
//   - task: MSKtask_t
//   - j: MSKint32t
//   - name: const char *
//
// [MSK_putbarvarname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutBarvarName(
	j int32,
	name string,
) res.Code {
	c_name := C.CString(name)
	defer C.free(unsafe.Pointer(c_name))

	return res.Code(
		C.MSK_putbarvarname(
			task.task,
			C.MSKint32t(j),
			c_name,
		),
	)
}

// PutBarxj is wrapping [MSK_putbarxj]
//
// [MSK_putbarxj] has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - j: MSKint32t
//   - barxj: const MSKrealt *
//
// [MSK_putbarxj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutBarxj(
	whichsol SolType,
	j int32,
	barxj *float64,
) res.Code {
	return res.Code(
		C.MSK_putbarxj(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(j),
			(*C.MSKrealt)(barxj),
		),
	)
}

// PutCfix is wrapping [MSK_putcfix]
//
// [MSK_putcfix] has following parameters
//   - task: MSKtask_t
//   - cfix: MSKrealt
//
// [MSK_putcfix]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutCfix(
	cfix float64,
) res.Code {
	return res.Code(
		C.MSK_putcfix(
			task.task,
			C.MSKrealt(cfix),
		),
	)
}

// PutCj is wrapping [MSK_putcj],
// set the coefficient in the objective function.
//
// [MSK_putcj] has following parameters
//   - task: MSKtask_t
//   - j: MSKint32t
//   - cj: MSKrealt
//
// [MSK_putcj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutCj(
	j int32,
	cj float64,
) res.Code {
	return res.Code(
		C.MSK_putcj(
			task.task,
			C.MSKint32t(j),
			C.MSKrealt(cj),
		),
	)
}

// PutCList is wrapping [MSK_putclist]
//
// [MSK_putclist] has following parameters
//   - task: MSKtask_t
//   - num: MSKint32t
//   - subj: const MSKint32t *
//   - val: const MSKrealt *
//
// [MSK_putclist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutCList(
	num int32,
	subj *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_putclist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(val),
		),
	)
}

// PutConbound is wrapping [MSK_putconbound],
// set the bound for a contraint
//
// [MSK_putconbound] has following parameters
//   - task: MSKtask_t
//   - i: MSKint32t
//   - bkc: MSKboundkeye
//   - blc: MSKrealt
//   - buc: MSKrealt
//
// [MSK_putconbound]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutConbound(
	i int32,
	bkc BoundKey,
	blc float64,
	buc float64,
) res.Code {
	return res.Code(
		C.MSK_putconbound(
			task.task,
			C.MSKint32t(i),
			C.MSKboundkeye(bkc),
			C.MSKrealt(blc),
			C.MSKrealt(buc),
		),
	)
}

// PutConboundList is wrapping [MSK_putconboundlist]
//
// [MSK_putconboundlist] has following parameters
//   - task: MSKtask_t
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - bkc: const MSKboundkeye *
//   - blc: const MSKrealt *
//   - buc: const MSKrealt *
//
// [MSK_putconboundlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutConboundList(
	num int32,
	sub *int32,
	bkc *BoundKey,
	blc *float64,
	buc *float64,
) res.Code {
	return res.Code(
		C.MSK_putconboundlist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKboundkeye)(bkc),
			(*C.MSKrealt)(blc),
			(*C.MSKrealt)(buc),
		),
	)
}

// PutConboundListConst is wrapping [MSK_putconboundlistconst]
//
// [MSK_putconboundlistconst] has following parameters
//   - task: MSKtask_t
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - bkc: MSKboundkeye
//   - blc: MSKrealt
//   - buc: MSKrealt
//
// [MSK_putconboundlistconst]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutConboundListConst(
	num int32,
	sub *int32,
	bkc BoundKey,
	blc float64,
	buc float64,
) res.Code {
	return res.Code(
		C.MSK_putconboundlistconst(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			C.MSKboundkeye(bkc),
			C.MSKrealt(blc),
			C.MSKrealt(buc),
		),
	)
}

// PutConboundSlice is wrapping [MSK_putconboundslice],
// sets a list of constraint bounds.
//
// [MSK_putconboundslice] has following parameters
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - bkc: const MSKboundkeye *
//   - blc: const MSKrealt *
//   - buc: const MSKrealt *
//
// [MSK_putconboundslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutConboundSlice(
	first int32,
	last int32,
	bkc *BoundKey,
	blc *float64,
	buc *float64,
) res.Code {
	return res.Code(
		C.MSK_putconboundslice(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKboundkeye)(bkc),
			(*C.MSKrealt)(blc),
			(*C.MSKrealt)(buc),
		),
	)
}

// PutConboundSliceConst is wrapping [MSK_putconboundsliceconst],
// sets a slice of constraint bounds to the same constant value.
//
// [MSK_putconboundsliceconst] has following parameters
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - bkc: MSKboundkeye
//   - blc: MSKrealt
//   - buc: MSKrealt
//
// [MSK_putconboundsliceconst]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutConboundSliceConst(
	first int32,
	last int32,
	bkc BoundKey,
	blc float64,
	buc float64,
) res.Code {
	return res.Code(
		C.MSK_putconboundsliceconst(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			C.MSKboundkeye(bkc),
			C.MSKrealt(blc),
			C.MSKrealt(buc),
		),
	)
}

// PutCone is wrapping [MSK_putcone]
//
// [MSK_putcone] has following parameters
//   - task: MSKtask_t
//   - k: MSKint32t
//   - ct: MSKconetypee
//   - conepar: MSKrealt
//   - nummem: MSKint32t
//   - submem: const MSKint32t *
//
// [MSK_putcone]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutCone(
	k int32,
	ct ConeType,
	conepar float64,
	nummem int32,
	submem *int32,
) res.Code {
	return res.Code(
		C.MSK_putcone(
			task.task,
			C.MSKint32t(k),
			C.MSKconetypee(ct),
			C.MSKrealt(conepar),
			C.MSKint32t(nummem),
			(*C.MSKint32t)(submem),
		),
	)
}

// PutConeName is wrapping [MSK_putconename]
//
// [MSK_putconename] has following parameters
//   - task: MSKtask_t
//   - j: MSKint32t
//   - name: const char *
//
// [MSK_putconename]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutConeName(
	j int32,
	name string,
) res.Code {
	c_name := C.CString(name)
	defer C.free(unsafe.Pointer(c_name))

	return res.Code(
		C.MSK_putconename(
			task.task,
			C.MSKint32t(j),
			c_name,
		),
	)
}

// PutConName is wrapping [MSK_putconname],
// sets a name for a constraint at indext i.
//
// [MSK_putconname] has following parameters
//   - task: MSKtask_t
//   - i: MSKint32t
//   - name: const char *
//
// [MSK_putconname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutConName(
	i int32,
	name string,
) res.Code {
	c_name := C.CString(name)
	defer C.free(unsafe.Pointer(c_name))

	return res.Code(
		C.MSK_putconname(
			task.task,
			C.MSKint32t(i),
			c_name,
		),
	)
}

// PutConsolutioni is wrapping [MSK_putconsolutioni]
//
// [MSK_putconsolutioni] has following parameters
//   - task: MSKtask_t
//   - i: MSKint32t
//   - whichsol: MSKsoltypee
//   - sk: MSKstakeye
//   - x: MSKrealt
//   - sl: MSKrealt
//   - su: MSKrealt
//
// [MSK_putconsolutioni]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutConsolutioni(
	i int32,
	whichsol SolType,
	sk StaKey,
	x float64,
	sl float64,
	su float64,
) res.Code {
	return res.Code(
		C.MSK_putconsolutioni(
			task.task,
			C.MSKint32t(i),
			C.MSKsoltypee(whichsol),
			C.MSKstakeye(sk),
			C.MSKrealt(x),
			C.MSKrealt(sl),
			C.MSKrealt(su),
		),
	)
}

// PutCSlice is wrapping [MSK_putcslice]
//
// [MSK_putcslice] has following parameters
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - slice: const MSKrealt *
//
// [MSK_putcslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutCSlice(
	first int32,
	last int32,
	slice *float64,
) res.Code {
	return res.Code(
		C.MSK_putcslice(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(slice),
		),
	)
}

// PutDjc is wrapping [MSK_putdjc],
// sets the disjunctive constraint.
//
// [MSK_putdjc] has following parameters
//   - task: MSKtask_t
//   - djcidx: MSKint64t
//   - numdomidx: MSKint64t
//   - domidxlist: const MSKint64t *
//   - numafeidx: MSKint64t
//   - afeidxlist: const MSKint64t *
//   - b: const MSKrealt *
//   - numterms: MSKint64t
//   - termsizelist: const MSKint64t *
//
// [MSK_putdjc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutDjc(
	djcidx int64,
	numdomidx int64,
	domidxlist *int64,
	numafeidx int64,
	afeidxlist *int64,
	b *float64,
	numterms int64,
	termsizelist *int64,
) res.Code {
	return res.Code(
		C.MSK_putdjc(
			task.task,
			C.MSKint64t(djcidx),
			C.MSKint64t(numdomidx),
			(*C.MSKint64t)(domidxlist),
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidxlist),
			(*C.MSKrealt)(b),
			C.MSKint64t(numterms),
			(*C.MSKint64t)(termsizelist),
		),
	)
}

// PutDjcName is wrapping [MSK_putdjcname]
//
// [MSK_putdjcname] has following parameters
//   - task: MSKtask_t
//   - djcidx: MSKint64t
//   - name: const char *
//
// [MSK_putdjcname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutDjcName(
	djcidx int64,
	name string,
) res.Code {
	c_name := C.CString(name)
	defer C.free(unsafe.Pointer(c_name))

	return res.Code(
		C.MSK_putdjcname(
			task.task,
			C.MSKint64t(djcidx),
			c_name,
		),
	)
}

// PutDjcSlice is wrapping [MSK_putdjcslice]
//
// [MSK_putdjcslice] has following parameters
//   - task: MSKtask_t
//   - idxfirst: MSKint64t
//   - idxlast: MSKint64t
//   - numdomidx: MSKint64t
//   - domidxlist: const MSKint64t *
//   - numafeidx: MSKint64t
//   - afeidxlist: const MSKint64t *
//   - b: const MSKrealt *
//   - numterms: MSKint64t
//   - termsizelist: const MSKint64t *
//   - termsindjc: const MSKint64t *
//
// [MSK_putdjcslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutDjcSlice(
	idxfirst int64,
	idxlast int64,
	numdomidx int64,
	domidxlist *int64,
	numafeidx int64,
	afeidxlist *int64,
	b *float64,
	numterms int64,
	termsizelist *int64,
	termsindjc *int64,
) res.Code {
	return res.Code(
		C.MSK_putdjcslice(
			task.task,
			C.MSKint64t(idxfirst),
			C.MSKint64t(idxlast),
			C.MSKint64t(numdomidx),
			(*C.MSKint64t)(domidxlist),
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidxlist),
			(*C.MSKrealt)(b),
			C.MSKint64t(numterms),
			(*C.MSKint64t)(termsizelist),
			(*C.MSKint64t)(termsindjc),
		),
	)
}

// PutDomainName is wrapping [MSK_putdomainname]
//
// [MSK_putdomainname] has following parameters
//   - task: MSKtask_t
//   - domidx: MSKint64t
//   - name: const char *
//
// [MSK_putdomainname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutDomainName(
	domidx int64,
	name string,
) res.Code {
	c_name := C.CString(name)
	defer C.free(unsafe.Pointer(c_name))

	return res.Code(
		C.MSK_putdomainname(
			task.task,
			C.MSKint64t(domidx),
			c_name,
		),
	)
}

// PutDouparam is wrapping [MSK_putdouparam]
//
// [MSK_putdouparam] has following parameters
//   - task: MSKtask_t
//   - param: MSKdparame
//   - parvalue: MSKrealt
//
// [MSK_putdouparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutDouparam(
	param DParam,
	parvalue float64,
) res.Code {
	return res.Code(
		C.MSK_putdouparam(
			task.task,
			C.MSKdparame(param),
			C.MSKrealt(parvalue),
		),
	)
}

// PutIntparam is wrapping [MSK_putintparam]
//
// [MSK_putintparam] has following parameters
//   - task: MSKtask_t
//   - param: MSKiparame
//   - parvalue: MSKint32t
//
// [MSK_putintparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutIntparam(
	param IParam,
	parvalue int32,
) res.Code {
	return res.Code(
		C.MSK_putintparam(
			task.task,
			C.MSKiparame(param),
			C.MSKint32t(parvalue),
		),
	)
}

// PutMaxnumacc is wrapping [MSK_putmaxnumacc]
//
// [MSK_putmaxnumacc] has following parameters
//   - task: MSKtask_t
//   - maxnumacc: MSKint64t
//
// [MSK_putmaxnumacc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutMaxnumacc(
	maxnumacc int64,
) res.Code {
	return res.Code(
		C.MSK_putmaxnumacc(
			task.task,
			C.MSKint64t(maxnumacc),
		),
	)
}

// PutMaxnumafe is wrapping [MSK_putmaxnumafe]
//
// [MSK_putmaxnumafe] has following parameters
//   - task: MSKtask_t
//   - maxnumafe: MSKint64t
//
// [MSK_putmaxnumafe]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutMaxnumafe(
	maxnumafe int64,
) res.Code {
	return res.Code(
		C.MSK_putmaxnumafe(
			task.task,
			C.MSKint64t(maxnumafe),
		),
	)
}

// PutMaxnumanz is wrapping [MSK_putmaxnumanz]
//
// [MSK_putmaxnumanz] has following parameters
//   - task: MSKtask_t
//   - maxnumanz: MSKint64t
//
// [MSK_putmaxnumanz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutMaxnumanz(
	maxnumanz int64,
) res.Code {
	return res.Code(
		C.MSK_putmaxnumanz(
			task.task,
			C.MSKint64t(maxnumanz),
		),
	)
}

// PutMaxnumbarvar is wrapping [MSK_putmaxnumbarvar]
//
// [MSK_putmaxnumbarvar] has following parameters
//   - task: MSKtask_t
//   - maxnumbarvar: MSKint32t
//
// [MSK_putmaxnumbarvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutMaxnumbarvar(
	maxnumbarvar int32,
) res.Code {
	return res.Code(
		C.MSK_putmaxnumbarvar(
			task.task,
			C.MSKint32t(maxnumbarvar),
		),
	)
}

// PutMaxnumcon is wrapping [MSK_putmaxnumcon]
//
// [MSK_putmaxnumcon] has following parameters
//   - task: MSKtask_t
//   - maxnumcon: MSKint32t
//
// [MSK_putmaxnumcon]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutMaxnumcon(
	maxnumcon int32,
) res.Code {
	return res.Code(
		C.MSK_putmaxnumcon(
			task.task,
			C.MSKint32t(maxnumcon),
		),
	)
}

// PutMaxnumcone is wrapping [MSK_putmaxnumcone]
//
// [MSK_putmaxnumcone] has following parameters
//   - task: MSKtask_t
//   - maxnumcone: MSKint32t
//
// [MSK_putmaxnumcone]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutMaxnumcone(
	maxnumcone int32,
) res.Code {
	return res.Code(
		C.MSK_putmaxnumcone(
			task.task,
			C.MSKint32t(maxnumcone),
		),
	)
}

// PutMaxnumdjc is wrapping [MSK_putmaxnumdjc]
//
// [MSK_putmaxnumdjc] has following parameters
//   - task: MSKtask_t
//   - maxnumdjc: MSKint64t
//
// [MSK_putmaxnumdjc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutMaxnumdjc(
	maxnumdjc int64,
) res.Code {
	return res.Code(
		C.MSK_putmaxnumdjc(
			task.task,
			C.MSKint64t(maxnumdjc),
		),
	)
}

// PutMaxnumdomain is wrapping [MSK_putmaxnumdomain]
//
// [MSK_putmaxnumdomain] has following parameters
//   - task: MSKtask_t
//   - maxnumdomain: MSKint64t
//
// [MSK_putmaxnumdomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutMaxnumdomain(
	maxnumdomain int64,
) res.Code {
	return res.Code(
		C.MSK_putmaxnumdomain(
			task.task,
			C.MSKint64t(maxnumdomain),
		),
	)
}

// PutMaxnumqnz is wrapping [MSK_putmaxnumqnz]
//
// [MSK_putmaxnumqnz] has following parameters
//   - task: MSKtask_t
//   - maxnumqnz: MSKint64t
//
// [MSK_putmaxnumqnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutMaxnumqnz(
	maxnumqnz int64,
) res.Code {
	return res.Code(
		C.MSK_putmaxnumqnz(
			task.task,
			C.MSKint64t(maxnumqnz),
		),
	)
}

// PutMaxnumvar is wrapping [MSK_putmaxnumvar]
//
// [MSK_putmaxnumvar] has following parameters
//   - task: MSKtask_t
//   - maxnumvar: MSKint32t
//
// [MSK_putmaxnumvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutMaxnumvar(
	maxnumvar int32,
) res.Code {
	return res.Code(
		C.MSK_putmaxnumvar(
			task.task,
			C.MSKint32t(maxnumvar),
		),
	)
}

// PutNadouparam is wrapping [MSK_putnadouparam]
//
// [MSK_putnadouparam] has following parameters
//   - task: MSKtask_t
//   - paramname: const char *
//   - parvalue: MSKrealt
//
// [MSK_putnadouparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutNadouparam(
	paramname string,
	parvalue float64,
) res.Code {
	c_paramname := C.CString(paramname)
	defer C.free(unsafe.Pointer(c_paramname))

	return res.Code(
		C.MSK_putnadouparam(
			task.task,
			c_paramname,
			C.MSKrealt(parvalue),
		),
	)
}

// PutNaintparam is wrapping [MSK_putnaintparam]
//
// [MSK_putnaintparam] has following parameters
//   - task: MSKtask_t
//   - paramname: const char *
//   - parvalue: MSKint32t
//
// [MSK_putnaintparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutNaintparam(
	paramname string,
	parvalue int32,
) res.Code {
	c_paramname := C.CString(paramname)
	defer C.free(unsafe.Pointer(c_paramname))

	return res.Code(
		C.MSK_putnaintparam(
			task.task,
			c_paramname,
			C.MSKint32t(parvalue),
		),
	)
}

// PutNastrparam is wrapping [MSK_putnastrparam]
//
// [MSK_putnastrparam] has following parameters
//   - task: MSKtask_t
//   - paramname: const char *
//   - parvalue: const char *
//
// [MSK_putnastrparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutNastrparam(
	paramname string,
	parvalue string,
) res.Code {
	c_paramname := C.CString(paramname)
	defer C.free(unsafe.Pointer(c_paramname))

	c_parvalue := C.CString(parvalue)
	defer C.free(unsafe.Pointer(c_parvalue))

	return res.Code(
		C.MSK_putnastrparam(
			task.task,
			c_paramname,
			c_parvalue,
		),
	)
}

// PutObjName is wrapping [MSK_putobjname]
//
// [MSK_putobjname] has following parameters
//   - task: MSKtask_t
//   - objname: const char *
//
// [MSK_putobjname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutObjName(
	objname string,
) res.Code {
	c_objname := C.CString(objname)
	defer C.free(unsafe.Pointer(c_objname))

	return res.Code(
		C.MSK_putobjname(
			task.task,
			c_objname,
		),
	)
}

// PutObjsense is wrapping [MSK_putobjsense],
// set the objective sense - which is either minimize or maximize
//
// [MSK_putobjsense] has following parameters
//   - task: MSKtask_t
//   - sense: MSKobjsensee
//
// [MSK_putobjsense]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutObjsense(
	sense ObjectiveSense,
) res.Code {
	return res.Code(
		C.MSK_putobjsense(
			task.task,
			C.MSKobjsensee(sense),
		),
	)
}

// PutOptserverhost is wrapping [MSK_putoptserverhost]
//
// [MSK_putoptserverhost] has following parameters
//   - task: MSKtask_t
//   - host: const char *
//
// [MSK_putoptserverhost]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutOptserverhost(
	host string,
) res.Code {
	c_host := C.CString(host)
	defer C.free(unsafe.Pointer(c_host))

	return res.Code(
		C.MSK_putoptserverhost(
			task.task,
			c_host,
		),
	)
}

// PutParam is wrapping [MSK_putparam]
//
// [MSK_putparam] has following parameters
//   - task: MSKtask_t
//   - parname: const char *
//   - parvalue: const char *
//
// [MSK_putparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutParam(
	parname string,
	parvalue string,
) res.Code {
	c_parname := C.CString(parname)
	defer C.free(unsafe.Pointer(c_parname))

	c_parvalue := C.CString(parvalue)
	defer C.free(unsafe.Pointer(c_parvalue))

	return res.Code(
		C.MSK_putparam(
			task.task,
			c_parname,
			c_parvalue,
		),
	)
}

// PutQcon is wrapping [MSK_putqcon]
//
// [MSK_putqcon] has following parameters
//   - task: MSKtask_t
//   - numqcnz: MSKint32t
//   - qcsubk: const MSKint32t *
//   - qcsubi: const MSKint32t *
//   - qcsubj: const MSKint32t *
//   - qcval: const MSKrealt *
//
// [MSK_putqcon]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutQcon(
	numqcnz int32,
	qcsubk *int32,
	qcsubi *int32,
	qcsubj *int32,
	qcval *float64,
) res.Code {
	return res.Code(
		C.MSK_putqcon(
			task.task,
			C.MSKint32t(numqcnz),
			(*C.MSKint32t)(qcsubk),
			(*C.MSKint32t)(qcsubi),
			(*C.MSKint32t)(qcsubj),
			(*C.MSKrealt)(qcval),
		),
	)
}

// PutQconk is wrapping [MSK_putqconk]
//
// [MSK_putqconk] has following parameters
//   - task: MSKtask_t
//   - k: MSKint32t
//   - numqcnz: MSKint32t
//   - qcsubi: const MSKint32t *
//   - qcsubj: const MSKint32t *
//   - qcval: const MSKrealt *
//
// [MSK_putqconk]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutQconk(
	k int32,
	numqcnz int32,
	qcsubi *int32,
	qcsubj *int32,
	qcval *float64,
) res.Code {
	return res.Code(
		C.MSK_putqconk(
			task.task,
			C.MSKint32t(k),
			C.MSKint32t(numqcnz),
			(*C.MSKint32t)(qcsubi),
			(*C.MSKint32t)(qcsubj),
			(*C.MSKrealt)(qcval),
		),
	)
}

// PutQobj is wrapping [MSK_putqobj]
//
// [MSK_putqobj] has following parameters
//   - task: MSKtask_t
//   - numqonz: MSKint32t
//   - qosubi: const MSKint32t *
//   - qosubj: const MSKint32t *
//   - qoval: const MSKrealt *
//
// [MSK_putqobj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutQobj(
	numqonz int32,
	qosubi *int32,
	qosubj *int32,
	qoval *float64,
) res.Code {
	return res.Code(
		C.MSK_putqobj(
			task.task,
			C.MSKint32t(numqonz),
			(*C.MSKint32t)(qosubi),
			(*C.MSKint32t)(qosubj),
			(*C.MSKrealt)(qoval),
		),
	)
}

// PutQobjij is wrapping [MSK_putqobjij]
//
// [MSK_putqobjij] has following parameters
//   - task: MSKtask_t
//   - i: MSKint32t
//   - j: MSKint32t
//   - qoij: MSKrealt
//
// [MSK_putqobjij]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutQobjij(
	i int32,
	j int32,
	qoij float64,
) res.Code {
	return res.Code(
		C.MSK_putqobjij(
			task.task,
			C.MSKint32t(i),
			C.MSKint32t(j),
			C.MSKrealt(qoij),
		),
	)
}

// PutSkc is wrapping [MSK_putskc]
//
// [MSK_putskc] has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - skc: const MSKstakeye *
//
// [MSK_putskc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutSkc(
	whichsol SolType,
	skc *StaKey,
) res.Code {
	return res.Code(
		C.MSK_putskc(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKstakeye)(skc),
		),
	)
}

// PutSkcSlice is wrapping [MSK_putskcslice]
//
// [MSK_putskcslice] has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - skc: const MSKstakeye *
//
// [MSK_putskcslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutSkcSlice(
	whichsol SolType,
	first int32,
	last int32,
	skc *StaKey,
) res.Code {
	return res.Code(
		C.MSK_putskcslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKstakeye)(skc),
		),
	)
}

// PutSkx is wrapping [MSK_putskx]
//
// [MSK_putskx] has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - skx: const MSKstakeye *
//
// [MSK_putskx]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutSkx(
	whichsol SolType,
	skx *StaKey,
) res.Code {
	return res.Code(
		C.MSK_putskx(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKstakeye)(skx),
		),
	)
}

// PutSkxSlice is wrapping [MSK_putskxslice]
//
// [MSK_putskxslice] has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - skx: const MSKstakeye *
//
// [MSK_putskxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutSkxSlice(
	whichsol SolType,
	first int32,
	last int32,
	skx *StaKey,
) res.Code {
	return res.Code(
		C.MSK_putskxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKstakeye)(skx),
		),
	)
}

// PutSlc is wrapping [MSK_putslc]
//
// [MSK_putslc] has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - slc: const MSKrealt *
//
// [MSK_putslc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutSlc(
	whichsol SolType,
	slc *float64,
) res.Code {
	return res.Code(
		C.MSK_putslc(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(slc),
		),
	)
}

// PutSlcSlice is wrapping [MSK_putslcslice]
//
// [MSK_putslcslice] has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - slc: const MSKrealt *
//
// [MSK_putslcslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutSlcSlice(
	whichsol SolType,
	first int32,
	last int32,
	slc *float64,
) res.Code {
	return res.Code(
		C.MSK_putslcslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(slc),
		),
	)
}

// PutSlx is wrapping [MSK_putslx]
//
// [MSK_putslx] has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - slx: const MSKrealt *
//
// [MSK_putslx]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutSlx(
	whichsol SolType,
	slx *float64,
) res.Code {
	return res.Code(
		C.MSK_putslx(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(slx),
		),
	)
}

// PutSlxSlice is wrapping [MSK_putslxslice]
//
// [MSK_putslxslice] has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - slx: const MSKrealt *
//
// [MSK_putslxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutSlxSlice(
	whichsol SolType,
	first int32,
	last int32,
	slx *float64,
) res.Code {
	return res.Code(
		C.MSK_putslxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(slx),
		),
	)
}

// PutSnx is wrapping [MSK_putsnx]
//
// [MSK_putsnx] has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - sux: const MSKrealt *
//
// [MSK_putsnx]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutSnx(
	whichsol SolType,
	sux *float64,
) res.Code {
	return res.Code(
		C.MSK_putsnx(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(sux),
		),
	)
}

// PutSnxSlice is wrapping [MSK_putsnxslice]
//
// [MSK_putsnxslice] has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - snx: const MSKrealt *
//
// [MSK_putsnxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutSnxSlice(
	whichsol SolType,
	first int32,
	last int32,
	snx *float64,
) res.Code {
	return res.Code(
		C.MSK_putsnxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(snx),
		),
	)
}

// PutSolution is wrapping [MSK_putsolution]
//
// [MSK_putsolution] has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - skc: const MSKstakeye *
//   - skx: const MSKstakeye *
//   - skn: const MSKstakeye *
//   - xc: const MSKrealt *
//   - xx: const MSKrealt *
//   - y: const MSKrealt *
//   - slc: const MSKrealt *
//   - suc: const MSKrealt *
//   - slx: const MSKrealt *
//   - sux: const MSKrealt *
//   - snx: const MSKrealt *
//
// [MSK_putsolution]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutSolution(
	whichsol SolType,
	skc *StaKey,
	skx *StaKey,
	skn *StaKey,
	xc *float64,
	xx *float64,
	y *float64,
	slc *float64,
	suc *float64,
	slx *float64,
	sux *float64,
	snx *float64,
) res.Code {
	return res.Code(
		C.MSK_putsolution(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKstakeye)(skc),
			(*C.MSKstakeye)(skx),
			(*C.MSKstakeye)(skn),
			(*C.MSKrealt)(xc),
			(*C.MSKrealt)(xx),
			(*C.MSKrealt)(y),
			(*C.MSKrealt)(slc),
			(*C.MSKrealt)(suc),
			(*C.MSKrealt)(slx),
			(*C.MSKrealt)(sux),
			(*C.MSKrealt)(snx),
		),
	)
}

// PutSolutionNew is wrapping [MSK_putsolutionnew]
//
// [MSK_putsolutionnew] has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - skc: const MSKstakeye *
//   - skx: const MSKstakeye *
//   - skn: const MSKstakeye *
//   - xc: const MSKrealt *
//   - xx: const MSKrealt *
//   - y: const MSKrealt *
//   - slc: const MSKrealt *
//   - suc: const MSKrealt *
//   - slx: const MSKrealt *
//   - sux: const MSKrealt *
//   - snx: const MSKrealt *
//   - doty: const MSKrealt *
//
// [MSK_putsolutionnew]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutSolutionNew(
	whichsol SolType,
	skc *StaKey,
	skx *StaKey,
	skn *StaKey,
	xc *float64,
	xx *float64,
	y *float64,
	slc *float64,
	suc *float64,
	slx *float64,
	sux *float64,
	snx *float64,
	doty *float64,
) res.Code {
	return res.Code(
		C.MSK_putsolutionnew(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKstakeye)(skc),
			(*C.MSKstakeye)(skx),
			(*C.MSKstakeye)(skn),
			(*C.MSKrealt)(xc),
			(*C.MSKrealt)(xx),
			(*C.MSKrealt)(y),
			(*C.MSKrealt)(slc),
			(*C.MSKrealt)(suc),
			(*C.MSKrealt)(slx),
			(*C.MSKrealt)(sux),
			(*C.MSKrealt)(snx),
			(*C.MSKrealt)(doty),
		),
	)
}

// PutSolutionyi is wrapping [MSK_putsolutionyi]
//
// [MSK_putsolutionyi] has following parameters
//   - task: MSKtask_t
//   - i: MSKint32t
//   - whichsol: MSKsoltypee
//   - y: MSKrealt
//
// [MSK_putsolutionyi]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutSolutionyi(
	i int32,
	whichsol SolType,
	y float64,
) res.Code {
	return res.Code(
		C.MSK_putsolutionyi(
			task.task,
			C.MSKint32t(i),
			C.MSKsoltypee(whichsol),
			C.MSKrealt(y),
		),
	)
}

// PutStrparam is wrapping [MSK_putstrparam]
//
// [MSK_putstrparam] has following parameters
//   - task: MSKtask_t
//   - param: MSKsparame
//   - parvalue: const char *
//
// [MSK_putstrparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutStrparam(
	param SParam,
	parvalue string,
) res.Code {
	c_parvalue := C.CString(parvalue)
	defer C.free(unsafe.Pointer(c_parvalue))

	return res.Code(
		C.MSK_putstrparam(
			task.task,
			C.MSKsparame(param),
			c_parvalue,
		),
	)
}

// PutSuc is wrapping [MSK_putsuc]
//
// [MSK_putsuc] has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - suc: const MSKrealt *
//
// [MSK_putsuc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutSuc(
	whichsol SolType,
	suc *float64,
) res.Code {
	return res.Code(
		C.MSK_putsuc(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(suc),
		),
	)
}

// PutSucSlice is wrapping [MSK_putsucslice]
//
// [MSK_putsucslice] has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - suc: const MSKrealt *
//
// [MSK_putsucslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutSucSlice(
	whichsol SolType,
	first int32,
	last int32,
	suc *float64,
) res.Code {
	return res.Code(
		C.MSK_putsucslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(suc),
		),
	)
}

// PutSux is wrapping [MSK_putsux]
//
// [MSK_putsux] has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - sux: const MSKrealt *
//
// [MSK_putsux]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutSux(
	whichsol SolType,
	sux *float64,
) res.Code {
	return res.Code(
		C.MSK_putsux(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(sux),
		),
	)
}

// PutSuxSlice is wrapping [MSK_putsuxslice]
//
// [MSK_putsuxslice] has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - sux: const MSKrealt *
//
// [MSK_putsuxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutSuxSlice(
	whichsol SolType,
	first int32,
	last int32,
	sux *float64,
) res.Code {
	return res.Code(
		C.MSK_putsuxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(sux),
		),
	)
}

// PutTaskName is wrapping [MSK_puttaskname]
//
// [MSK_puttaskname] has following parameters
//   - task: MSKtask_t
//   - taskname: const char *
//
// [MSK_puttaskname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutTaskName(
	taskname string,
) res.Code {
	c_taskname := C.CString(taskname)
	defer C.free(unsafe.Pointer(c_taskname))

	return res.Code(
		C.MSK_puttaskname(
			task.task,
			c_taskname,
		),
	)
}

// PutVarbound is wrapping [MSK_putvarbound],
// set the bound for a variable.
//
// [MSK_putvarbound] has following parameters
//   - task: MSKtask_t
//   - j: MSKint32t
//   - bkx: MSKboundkeye
//   - blx: MSKrealt
//   - bux: MSKrealt
//
// [MSK_putvarbound]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutVarbound(
	j int32,
	bkx BoundKey,
	blx float64,
	bux float64,
) res.Code {
	return res.Code(
		C.MSK_putvarbound(
			task.task,
			C.MSKint32t(j),
			C.MSKboundkeye(bkx),
			C.MSKrealt(blx),
			C.MSKrealt(bux),
		),
	)
}

// PutVarboundList is wrapping [MSK_putvarboundlist]
//
// [MSK_putvarboundlist] has following parameters
//   - task: MSKtask_t
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - bkx: const MSKboundkeye *
//   - blx: const MSKrealt *
//   - bux: const MSKrealt *
//
// [MSK_putvarboundlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutVarboundList(
	num int32,
	sub *int32,
	bkx *BoundKey,
	blx *float64,
	bux *float64,
) res.Code {
	return res.Code(
		C.MSK_putvarboundlist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKboundkeye)(bkx),
			(*C.MSKrealt)(blx),
			(*C.MSKrealt)(bux),
		),
	)
}

// PutVarboundListConst is wrapping [MSK_putvarboundlistconst]
//
// [MSK_putvarboundlistconst] has following parameters
//   - task: MSKtask_t
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - bkx: MSKboundkeye
//   - blx: MSKrealt
//   - bux: MSKrealt
//
// [MSK_putvarboundlistconst]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutVarboundListConst(
	num int32,
	sub *int32,
	bkx BoundKey,
	blx float64,
	bux float64,
) res.Code {
	return res.Code(
		C.MSK_putvarboundlistconst(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			C.MSKboundkeye(bkx),
			C.MSKrealt(blx),
			C.MSKrealt(bux),
		),
	)
}

// PutVarboundSlice is wrapping [MSK_putvarboundslice],
// sets the bound for a slice of variables using 3 vectors.
//
// [MSK_putvarboundslice] has following parameters
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - bkx: const MSKboundkeye *
//   - blx: const MSKrealt *
//   - bux: const MSKrealt *
//
// [MSK_putvarboundslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutVarboundSlice(
	first int32,
	last int32,
	bkx *BoundKey,
	blx *float64,
	bux *float64,
) res.Code {
	return res.Code(
		C.MSK_putvarboundslice(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKboundkeye)(bkx),
			(*C.MSKrealt)(blx),
			(*C.MSKrealt)(bux),
		),
	)
}

// PutVarboundSliceConst is wrapping [MSK_putvarboundsliceconst],
// set the bound for a slice of variables to the same value.
//
// [MSK_putvarboundsliceconst] has following parameters
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - bkx: MSKboundkeye
//   - blx: MSKrealt
//   - bux: MSKrealt
//
// [MSK_putvarboundsliceconst]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutVarboundSliceConst(
	first int32,
	last int32,
	bkx BoundKey,
	blx float64,
	bux float64,
) res.Code {
	return res.Code(
		C.MSK_putvarboundsliceconst(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			C.MSKboundkeye(bkx),
			C.MSKrealt(blx),
			C.MSKrealt(bux),
		),
	)
}

// PutVarName is wrapping [MSK_putvarname],
// sets a name for variable at j.
//
// [MSK_putvarname] has following parameters
//   - task: MSKtask_t
//   - j: MSKint32t
//   - name: const char *
//
// [MSK_putvarname]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutVarName(
	j int32,
	name string,
) res.Code {
	c_name := C.CString(name)
	defer C.free(unsafe.Pointer(c_name))

	return res.Code(
		C.MSK_putvarname(
			task.task,
			C.MSKint32t(j),
			c_name,
		),
	)
}

// PutVarsolutionj is wrapping [MSK_putvarsolutionj]
//
// [MSK_putvarsolutionj] has following parameters
//   - task: MSKtask_t
//   - j: MSKint32t
//   - whichsol: MSKsoltypee
//   - sk: MSKstakeye
//   - x: MSKrealt
//   - sl: MSKrealt
//   - su: MSKrealt
//   - sn: MSKrealt
//
// [MSK_putvarsolutionj]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutVarsolutionj(
	j int32,
	whichsol SolType,
	sk StaKey,
	x float64,
	sl float64,
	su float64,
	sn float64,
) res.Code {
	return res.Code(
		C.MSK_putvarsolutionj(
			task.task,
			C.MSKint32t(j),
			C.MSKsoltypee(whichsol),
			C.MSKstakeye(sk),
			C.MSKrealt(x),
			C.MSKrealt(sl),
			C.MSKrealt(su),
			C.MSKrealt(sn),
		),
	)
}

// PutVartype is wrapping [MSK_putvartype]
//
// [MSK_putvartype] has following parameters
//   - task: MSKtask_t
//   - j: MSKint32t
//   - vartype: MSKvariabletypee
//
// [MSK_putvartype]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutVartype(
	j int32,
	vartype VariableType,
) res.Code {
	return res.Code(
		C.MSK_putvartype(
			task.task,
			C.MSKint32t(j),
			C.MSKvariabletypee(vartype),
		),
	)
}

// PutVartypeList is wrapping [MSK_putvartypelist]
//
// [MSK_putvartypelist] has following parameters
//   - task: MSKtask_t
//   - num: MSKint32t
//   - subj: const MSKint32t *
//   - vartype: const MSKvariabletypee *
//
// [MSK_putvartypelist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutVartypeList(
	num int32,
	subj *int32,
	vartype *VariableType,
) res.Code {
	return res.Code(
		C.MSK_putvartypelist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subj),
			(*C.MSKvariabletypee)(vartype),
		),
	)
}

// PutXc is wrapping [MSK_putxc]
//
// [MSK_putxc] has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - xc: MSKrealt *
//
// [MSK_putxc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutXc(
	whichsol SolType,
	xc *float64,
) res.Code {
	return res.Code(
		C.MSK_putxc(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(xc),
		),
	)
}

// PutXcSlice is wrapping [MSK_putxcslice]
//
// [MSK_putxcslice] has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - xc: const MSKrealt *
//
// [MSK_putxcslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutXcSlice(
	whichsol SolType,
	first int32,
	last int32,
	xc *float64,
) res.Code {
	return res.Code(
		C.MSK_putxcslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(xc),
		),
	)
}

// PutXx is wrapping [MSK_putxx]
//
// [MSK_putxx] has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - xx: const MSKrealt *
//
// [MSK_putxx]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutXx(
	whichsol SolType,
	xx *float64,
) res.Code {
	return res.Code(
		C.MSK_putxx(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(xx),
		),
	)
}

// PutXxSlice is wrapping [MSK_putxxslice],
// sets the initial solution for a slice.
//
// [MSK_putxxslice] has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - xx: const MSKrealt *
//
// [MSK_putxxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutXxSlice(
	whichsol SolType,
	first int32,
	last int32,
	xx *float64,
) res.Code {
	return res.Code(
		C.MSK_putxxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(xx),
		),
	)
}

// PutY is wrapping [MSK_puty]
//
// [MSK_puty] has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - y: const MSKrealt *
//
// [MSK_puty]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutY(
	whichsol SolType,
	y *float64,
) res.Code {
	return res.Code(
		C.MSK_puty(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(y),
		),
	)
}

// PutYSlice is wrapping [MSK_putyslice]
//
// [MSK_putyslice] has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - y: const MSKrealt *
//
// [MSK_putyslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html
func (task *Task) PutYSlice(
	whichsol SolType,
	first int32,
	last int32,
	y *float64,
) res.Code {
	return res.Code(
		C.MSK_putyslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(y),
		),
	)
}
