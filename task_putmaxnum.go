// Automatically generated by github.com/fardream/gen-gmsk
// function deinitions

package gmsk

// #include <stdlib.h> // for C.free
// #include <mosek.h>
import "C"

// PutMaxNumAcc is wrapping [MSK_putmaxnumacc],
// Sets the number of preallocated affine conic constraints.
//
// Arguments:
//
//   - `maxnumacc` Number of preallocated affine conic constraints.
//
// [MSK_putmaxnumacc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putmaxnumacc
func (task *Task) PutMaxNumAcc(
	maxnumacc int64,
) error {
	return ResCode(
		C.MSK_putmaxnumacc(
			task.task,
			C.MSKint64t(maxnumacc),
		),
	).ToError()
}

// PutMaxNumAfe is wrapping [MSK_putmaxnumafe],
// Sets the number of preallocated affine expressions in the optimization task.
//
// Arguments:
//
//   - `maxnumafe` Number of preallocated affine expressions.
//
// [MSK_putmaxnumafe]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putmaxnumafe
func (task *Task) PutMaxNumAfe(
	maxnumafe int64,
) error {
	return ResCode(
		C.MSK_putmaxnumafe(
			task.task,
			C.MSKint64t(maxnumafe),
		),
	).ToError()
}

// PutMaxNumANz is wrapping [MSK_putmaxnumanz],
// Sets the number of preallocated non-zero entries in the linear coefficient matrix.
//
// Arguments:
//
//   - `maxnumanz` New size of the storage reserved for storing the linear coefficient matrix.
//
// [MSK_putmaxnumanz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putmaxnumanz
func (task *Task) PutMaxNumANz(
	maxnumanz int64,
) error {
	return ResCode(
		C.MSK_putmaxnumanz(
			task.task,
			C.MSKint64t(maxnumanz),
		),
	).ToError()
}

// PutMaxNumBarvar is wrapping [MSK_putmaxnumbarvar],
// Sets the number of preallocated symmetric matrix variables.
//
// Arguments:
//
//   - `maxnumbarvar` Number of preallocated symmetric matrix variables.
//
// [MSK_putmaxnumbarvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putmaxnumbarvar
func (task *Task) PutMaxNumBarvar(
	maxnumbarvar int32,
) error {
	return ResCode(
		C.MSK_putmaxnumbarvar(
			task.task,
			C.MSKint32t(maxnumbarvar),
		),
	).ToError()
}

// PutMaxNumCon is wrapping [MSK_putmaxnumcon],
// Sets the number of preallocated constraints in the optimization task.
//
// Arguments:
//
//   - `maxnumcon` Number of preallocated constraints in the optimization task.
//
// [MSK_putmaxnumcon]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putmaxnumcon
func (task *Task) PutMaxNumCon(
	maxnumcon int32,
) error {
	return ResCode(
		C.MSK_putmaxnumcon(
			task.task,
			C.MSKint32t(maxnumcon),
		),
	).ToError()
}

// PutMaxNumCone is wrapping [MSK_putmaxnumcone],
// Sets the number of preallocated conic constraints in the optimization task.
//
// Arguments:
//
//   - `maxnumcone` Number of preallocated conic constraints in the optimization task.
//
// Deprecated: [MSK_putmaxnumcone]/PutMaxNumCone is deprecated by mosek and will be removed in a future release.
//
// [MSK_putmaxnumcone]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putmaxnumcone
func (task *Task) PutMaxNumCone(
	maxnumcone int32,
) error {
	return ResCode(
		C.MSK_putmaxnumcone(
			task.task,
			C.MSKint32t(maxnumcone),
		),
	).ToError()
}

// PutMaxNumDjc is wrapping [MSK_putmaxnumdjc],
// Sets the number of preallocated disjunctive constraints.
//
// Arguments:
//
//   - `maxnumdjc` Number of preallocated disjunctive constraints in the task.
//
// [MSK_putmaxnumdjc]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putmaxnumdjc
func (task *Task) PutMaxNumDjc(
	maxnumdjc int64,
) error {
	return ResCode(
		C.MSK_putmaxnumdjc(
			task.task,
			C.MSKint64t(maxnumdjc),
		),
	).ToError()
}

// PutMaxNumDomain is wrapping [MSK_putmaxnumdomain],
// Sets the number of preallocated domains in the optimization task.
//
// Arguments:
//
//   - `maxnumdomain` Number of preallocated domains.
//
// [MSK_putmaxnumdomain]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putmaxnumdomain
func (task *Task) PutMaxNumDomain(
	maxnumdomain int64,
) error {
	return ResCode(
		C.MSK_putmaxnumdomain(
			task.task,
			C.MSKint64t(maxnumdomain),
		),
	).ToError()
}

// PutMaxNumQNz is wrapping [MSK_putmaxnumqnz],
// Sets the number of preallocated non-zero entries in quadratic terms.
//
// Arguments:
//
//   - `maxnumqnz` Number of non-zero elements preallocated in quadratic coefficient matrices.
//
// [MSK_putmaxnumqnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putmaxnumqnz
func (task *Task) PutMaxNumQNz(
	maxnumqnz int64,
) error {
	return ResCode(
		C.MSK_putmaxnumqnz(
			task.task,
			C.MSKint64t(maxnumqnz),
		),
	).ToError()
}

// PutMaxNumVar is wrapping [MSK_putmaxnumvar],
// Sets the number of preallocated variables in the optimization task.
//
// Arguments:
//
//   - `maxnumvar` Number of preallocated variables in the optimization task.
//
// [MSK_putmaxnumvar]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putmaxnumvar
func (task *Task) PutMaxNumVar(
	maxnumvar int32,
) error {
	return ResCode(
		C.MSK_putmaxnumvar(
			task.task,
			C.MSKint32t(maxnumvar),
		),
	).ToError()
}
