// Automatically generated by github.com/fardream/gen-gmsk
// enum for MSKiinfitem_enum/IInfItem

package gmsk

// #include <mosek.h>
import "C"

import "strconv"

// IInfItem is MSKiinfitem_enum.
//
// Integer information items.
type IInfItem uint32

const (
	IINF_ANA_PRO_NUM_CON                       IInfItem = C.MSK_IINF_ANA_PRO_NUM_CON                       // Number of constraints in the problem.
	IINF_ANA_PRO_NUM_CON_EQ                    IInfItem = C.MSK_IINF_ANA_PRO_NUM_CON_EQ                    // Number of equality constraints.
	IINF_ANA_PRO_NUM_CON_FR                    IInfItem = C.MSK_IINF_ANA_PRO_NUM_CON_FR                    // Number of unbounded constraints.
	IINF_ANA_PRO_NUM_CON_LO                    IInfItem = C.MSK_IINF_ANA_PRO_NUM_CON_LO                    // Number of constraints with a lower bound and an infinite upper bound.
	IINF_ANA_PRO_NUM_CON_RA                    IInfItem = C.MSK_IINF_ANA_PRO_NUM_CON_RA                    // Number of constraints with finite lower and upper bounds.
	IINF_ANA_PRO_NUM_CON_UP                    IInfItem = C.MSK_IINF_ANA_PRO_NUM_CON_UP                    // Number of constraints with an upper bound and an infinite lower bound.
	IINF_ANA_PRO_NUM_VAR                       IInfItem = C.MSK_IINF_ANA_PRO_NUM_VAR                       // Number of variables in the problem.
	IINF_ANA_PRO_NUM_VAR_BIN                   IInfItem = C.MSK_IINF_ANA_PRO_NUM_VAR_BIN                   // Number of binary variables.
	IINF_ANA_PRO_NUM_VAR_CONT                  IInfItem = C.MSK_IINF_ANA_PRO_NUM_VAR_CONT                  // Number of continuous variables.
	IINF_ANA_PRO_NUM_VAR_EQ                    IInfItem = C.MSK_IINF_ANA_PRO_NUM_VAR_EQ                    // Number of fixed variables.
	IINF_ANA_PRO_NUM_VAR_FR                    IInfItem = C.MSK_IINF_ANA_PRO_NUM_VAR_FR                    // Number of unbounded constraints.
	IINF_ANA_PRO_NUM_VAR_INT                   IInfItem = C.MSK_IINF_ANA_PRO_NUM_VAR_INT                   // Number of general integer variables.
	IINF_ANA_PRO_NUM_VAR_LO                    IInfItem = C.MSK_IINF_ANA_PRO_NUM_VAR_LO                    // Number of variables with a lower bound and an infinite upper bound.
	IINF_ANA_PRO_NUM_VAR_RA                    IInfItem = C.MSK_IINF_ANA_PRO_NUM_VAR_RA                    // Number of variables with finite lower and upper bounds.
	IINF_ANA_PRO_NUM_VAR_UP                    IInfItem = C.MSK_IINF_ANA_PRO_NUM_VAR_UP                    // Number of variables with an upper bound and an infinite lower bound.
	IINF_INTPNT_FACTOR_DIM_DENSE               IInfItem = C.MSK_IINF_INTPNT_FACTOR_DIM_DENSE               // Dimension of the dense sub system in factorization.
	IINF_INTPNT_ITER                           IInfItem = C.MSK_IINF_INTPNT_ITER                           // Number of interior-point iterations since invoking the interior-point optimizer.
	IINF_INTPNT_NUM_THREADS                    IInfItem = C.MSK_IINF_INTPNT_NUM_THREADS                    // Number of threads that the interior-point optimizer is using.
	IINF_INTPNT_SOLVE_DUAL                     IInfItem = C.MSK_IINF_INTPNT_SOLVE_DUAL                     // Non-zero if the interior-point optimizer is solving the dual problem.
	IINF_MIO_ABSGAP_SATISFIED                  IInfItem = C.MSK_IINF_MIO_ABSGAP_SATISFIED                  // Non-zero if absolute gap is within tolerances.
	IINF_MIO_CLIQUE_TABLE_SIZE                 IInfItem = C.MSK_IINF_MIO_CLIQUE_TABLE_SIZE                 // Size of the clique table.
	IINF_MIO_CONSTRUCT_SOLUTION                IInfItem = C.MSK_IINF_MIO_CONSTRUCT_SOLUTION                // Informs if MOSEK successfully constructed an initial integer feasible solution.
	IINF_MIO_INITIAL_FEASIBLE_SOLUTION         IInfItem = C.MSK_IINF_MIO_INITIAL_FEASIBLE_SOLUTION         // Informs if MOSEK found the solution provided by the user to be feasible
	IINF_MIO_NODE_DEPTH                        IInfItem = C.MSK_IINF_MIO_NODE_DEPTH                        // Depth of the last node solved.
	IINF_MIO_NUM_ACTIVE_NODES                  IInfItem = C.MSK_IINF_MIO_NUM_ACTIVE_NODES                  // Number of active branch and bound nodes.
	IINF_MIO_NUM_ACTIVE_ROOT_CUTS              IInfItem = C.MSK_IINF_MIO_NUM_ACTIVE_ROOT_CUTS              // Number of active cuts in the final relaxation after the mixed-integer optimizer's root cut generation.
	IINF_MIO_NUM_BRANCH                        IInfItem = C.MSK_IINF_MIO_NUM_BRANCH                        // Number of branches performed during the optimization.
	IINF_MIO_NUM_INT_SOLUTIONS                 IInfItem = C.MSK_IINF_MIO_NUM_INT_SOLUTIONS                 // Number of integer feasible solutions that have been found.
	IINF_MIO_NUM_RELAX                         IInfItem = C.MSK_IINF_MIO_NUM_RELAX                         // Number of relaxations solved during the optimization.
	IINF_MIO_NUM_REPEATED_PRESOLVE             IInfItem = C.MSK_IINF_MIO_NUM_REPEATED_PRESOLVE             // Number of times presolve was repeated at root.
	IINF_MIO_NUM_RESTARTS                      IInfItem = C.MSK_IINF_MIO_NUM_RESTARTS                      // Number of restarts performed during the optimization.
	IINF_MIO_NUM_ROOT_CUT_ROUNDS               IInfItem = C.MSK_IINF_MIO_NUM_ROOT_CUT_ROUNDS               // Number of cut separation rounds at the root node of the mixed-integer optimizer.
	IINF_MIO_NUM_SELECTED_CLIQUE_CUTS          IInfItem = C.MSK_IINF_MIO_NUM_SELECTED_CLIQUE_CUTS          // Number of clique cuts selected to be included in the relaxation.
	IINF_MIO_NUM_SELECTED_CMIR_CUTS            IInfItem = C.MSK_IINF_MIO_NUM_SELECTED_CMIR_CUTS            // Number of Complemented Mixed Integer Rounding (CMIR) cuts selected to be included in the relaxation.
	IINF_MIO_NUM_SELECTED_GOMORY_CUTS          IInfItem = C.MSK_IINF_MIO_NUM_SELECTED_GOMORY_CUTS          // Number of Gomory cuts selected to be included in the relaxation.
	IINF_MIO_NUM_SELECTED_IMPLIED_BOUND_CUTS   IInfItem = C.MSK_IINF_MIO_NUM_SELECTED_IMPLIED_BOUND_CUTS   // Number of implied bound cuts selected to be included in the relaxation.
	IINF_MIO_NUM_SELECTED_KNAPSACK_COVER_CUTS  IInfItem = C.MSK_IINF_MIO_NUM_SELECTED_KNAPSACK_COVER_CUTS  // Number of clique cuts selected to be included in the relaxation.
	IINF_MIO_NUM_SELECTED_LIPRO_CUTS           IInfItem = C.MSK_IINF_MIO_NUM_SELECTED_LIPRO_CUTS           // Number of lift-and-project cuts selected to be included in the relaxation.
	IINF_MIO_NUM_SEPARATED_CLIQUE_CUTS         IInfItem = C.MSK_IINF_MIO_NUM_SEPARATED_CLIQUE_CUTS         // Number of separated clique cuts.
	IINF_MIO_NUM_SEPARATED_CMIR_CUTS           IInfItem = C.MSK_IINF_MIO_NUM_SEPARATED_CMIR_CUTS           // Number of separated Complemented Mixed Integer Rounding (CMIR) cuts.
	IINF_MIO_NUM_SEPARATED_GOMORY_CUTS         IInfItem = C.MSK_IINF_MIO_NUM_SEPARATED_GOMORY_CUTS         // Number of separated Gomory cuts.
	IINF_MIO_NUM_SEPARATED_IMPLIED_BOUND_CUTS  IInfItem = C.MSK_IINF_MIO_NUM_SEPARATED_IMPLIED_BOUND_CUTS  // Number of separated implied bound cuts.
	IINF_MIO_NUM_SEPARATED_KNAPSACK_COVER_CUTS IInfItem = C.MSK_IINF_MIO_NUM_SEPARATED_KNAPSACK_COVER_CUTS // Number of separated clique cuts.
	IINF_MIO_NUM_SEPARATED_LIPRO_CUTS          IInfItem = C.MSK_IINF_MIO_NUM_SEPARATED_LIPRO_CUTS          // Number of separated lift-and-project cuts.
	IINF_MIO_NUM_SOLVED_NODES                  IInfItem = C.MSK_IINF_MIO_NUM_SOLVED_NODES                  // Number of branch and bounds nodes solved in the main branch and bound tree.
	IINF_MIO_NUMBIN                            IInfItem = C.MSK_IINF_MIO_NUMBIN                            // Number of binary variables in the problem to be solved by the mixed-integer optimizer.
	IINF_MIO_NUMBINCONEVAR                     IInfItem = C.MSK_IINF_MIO_NUMBINCONEVAR                     // Number of binary cone variables in the problem to be solved by the mixed-integer optimizer.
	IINF_MIO_NUMCON                            IInfItem = C.MSK_IINF_MIO_NUMCON                            // Number of constraints in the problem to be solved by the mixed-integer optimizer.
	IINF_MIO_NUMCONE                           IInfItem = C.MSK_IINF_MIO_NUMCONE                           // Number of cones in the problem to be solved by the mixed-integer optimizer.
	IINF_MIO_NUMCONEVAR                        IInfItem = C.MSK_IINF_MIO_NUMCONEVAR                        // Number of cone variables in the problem to be solved by the mixed-integer optimizer.
	IINF_MIO_NUMCONT                           IInfItem = C.MSK_IINF_MIO_NUMCONT                           // Number of continuous variables in the problem to be solved by the mixed-integer optimizer.
	IINF_MIO_NUMCONTCONEVAR                    IInfItem = C.MSK_IINF_MIO_NUMCONTCONEVAR                    // Number of continuous cone variables in the problem to be solved by the mixed-integer optimizer.
	IINF_MIO_NUMDEXPCONES                      IInfItem = C.MSK_IINF_MIO_NUMDEXPCONES                      // Number of dual exponential cones in the problem to be solved by the mixed-integer optimizer.
	IINF_MIO_NUMDJC                            IInfItem = C.MSK_IINF_MIO_NUMDJC                            // Number of disjunctive constraints in the problem to be solved by the mixed-integer optimizer.
	IINF_MIO_NUMDPOWCONES                      IInfItem = C.MSK_IINF_MIO_NUMDPOWCONES                      // Number of dual power cones in the problem to be solved by the mixed-integer optimizer.
	IINF_MIO_NUMINT                            IInfItem = C.MSK_IINF_MIO_NUMINT                            // Number of integer variables in the problem to be solved by the mixed-integer optimizer.
	IINF_MIO_NUMINTCONEVAR                     IInfItem = C.MSK_IINF_MIO_NUMINTCONEVAR                     // Number of integer cone variables in the problem to be solved by the mixed-integer optimizer.
	IINF_MIO_NUMPEXPCONES                      IInfItem = C.MSK_IINF_MIO_NUMPEXPCONES                      // Number of primal exponential cones in the problem to be solved by the mixed-integer optimizer.
	IINF_MIO_NUMPPOWCONES                      IInfItem = C.MSK_IINF_MIO_NUMPPOWCONES                      // Number of primal power cones in the problem to be solved by the mixed-integer optimizer.
	IINF_MIO_NUMQCONES                         IInfItem = C.MSK_IINF_MIO_NUMQCONES                         // Number of quadratic cones in the problem to be solved by the mixed-integer optimizer.
	IINF_MIO_NUMRQCONES                        IInfItem = C.MSK_IINF_MIO_NUMRQCONES                        // Number of rotated quadratic cones in the problem to be solved by the mixed-integer optimizer.
	IINF_MIO_NUMVAR                            IInfItem = C.MSK_IINF_MIO_NUMVAR                            // Number of variables in the problem to be solved by the mixed-integer optimizer.
	IINF_MIO_OBJ_BOUND_DEFINED                 IInfItem = C.MSK_IINF_MIO_OBJ_BOUND_DEFINED                 // Non-zero if a valid objective bound has been found, otherwise zero.
	IINF_MIO_PRESOLVED_NUMBIN                  IInfItem = C.MSK_IINF_MIO_PRESOLVED_NUMBIN                  // Number of binary variables in the problem after the mixed-integer optimizer's presolve.
	IINF_MIO_PRESOLVED_NUMBINCONEVAR           IInfItem = C.MSK_IINF_MIO_PRESOLVED_NUMBINCONEVAR           // Number of binary cone variables in the problem after the mixed-integer optimizer's presolve.
	IINF_MIO_PRESOLVED_NUMCON                  IInfItem = C.MSK_IINF_MIO_PRESOLVED_NUMCON                  // Number of constraints in the problem after the mixed-integer optimizer's presolve.
	IINF_MIO_PRESOLVED_NUMCONE                 IInfItem = C.MSK_IINF_MIO_PRESOLVED_NUMCONE                 // Number of cones in the problem after the mixed-integer optimizer's presolve.
	IINF_MIO_PRESOLVED_NUMCONEVAR              IInfItem = C.MSK_IINF_MIO_PRESOLVED_NUMCONEVAR              // Number of cone variables in the problem after the mixed-integer optimizer's presolve.
	IINF_MIO_PRESOLVED_NUMCONT                 IInfItem = C.MSK_IINF_MIO_PRESOLVED_NUMCONT                 // Number of continuous variables in the problem after the mixed-integer optimizer's presolve.
	IINF_MIO_PRESOLVED_NUMCONTCONEVAR          IInfItem = C.MSK_IINF_MIO_PRESOLVED_NUMCONTCONEVAR          // Number of continuous cone variables in the problem after the mixed-integer optimizer's presolve.
	IINF_MIO_PRESOLVED_NUMDEXPCONES            IInfItem = C.MSK_IINF_MIO_PRESOLVED_NUMDEXPCONES            // Number of dual exponential cones in the problem after the mixed-integer optimizer's presolve.
	IINF_MIO_PRESOLVED_NUMDJC                  IInfItem = C.MSK_IINF_MIO_PRESOLVED_NUMDJC                  // Number of disjunctive constraints in the problem after the mixed-integer optimizer's presolve.
	IINF_MIO_PRESOLVED_NUMDPOWCONES            IInfItem = C.MSK_IINF_MIO_PRESOLVED_NUMDPOWCONES            // Number of dual power cones in the problem after the mixed-integer optimizer's presolve.
	IINF_MIO_PRESOLVED_NUMINT                  IInfItem = C.MSK_IINF_MIO_PRESOLVED_NUMINT                  // Number of integer variables in the problem after the mixed-integer optimizer's presolve.
	IINF_MIO_PRESOLVED_NUMINTCONEVAR           IInfItem = C.MSK_IINF_MIO_PRESOLVED_NUMINTCONEVAR           // Number of integer cone variables in the problem after the mixed-integer optimizer's presolve.
	IINF_MIO_PRESOLVED_NUMPEXPCONES            IInfItem = C.MSK_IINF_MIO_PRESOLVED_NUMPEXPCONES            // Number of primal exponential cones in the problem after the mixed-integer optimizer's presolve.
	IINF_MIO_PRESOLVED_NUMPPOWCONES            IInfItem = C.MSK_IINF_MIO_PRESOLVED_NUMPPOWCONES            // Number of primal power cones in the problem after the mixed-integer optimizer's presolve.
	IINF_MIO_PRESOLVED_NUMQCONES               IInfItem = C.MSK_IINF_MIO_PRESOLVED_NUMQCONES               // Number of quadratic cones in the problem after the mixed-integer optimizer's presolve.
	IINF_MIO_PRESOLVED_NUMRQCONES              IInfItem = C.MSK_IINF_MIO_PRESOLVED_NUMRQCONES              // Number of rotated quadratic cones in the problem after the mixed-integer optimizer's presolve.
	IINF_MIO_PRESOLVED_NUMVAR                  IInfItem = C.MSK_IINF_MIO_PRESOLVED_NUMVAR                  // Number of variables in the problem after the mixed-integer optimizer's presolve.
	IINF_MIO_RELGAP_SATISFIED                  IInfItem = C.MSK_IINF_MIO_RELGAP_SATISFIED                  // Non-zero if relative gap is within tolerances.
	IINF_MIO_TOTAL_NUM_SELECTED_CUTS           IInfItem = C.MSK_IINF_MIO_TOTAL_NUM_SELECTED_CUTS           // Total number of cuts selected to be included in the relaxation by the mixed-integer optimizer.
	IINF_MIO_TOTAL_NUM_SEPARATED_CUTS          IInfItem = C.MSK_IINF_MIO_TOTAL_NUM_SEPARATED_CUTS          // Total number of cuts separated by the mixed-integer optimizer.
	IINF_MIO_USER_OBJ_CUT                      IInfItem = C.MSK_IINF_MIO_USER_OBJ_CUT                      // If it is non-zero, then the objective cut is used.
	IINF_OPT_NUMCON                            IInfItem = C.MSK_IINF_OPT_NUMCON                            // Number of constraints in the problem solved when the optimizer is called.
	IINF_OPT_NUMVAR                            IInfItem = C.MSK_IINF_OPT_NUMVAR                            // Number of variables in the problem solved when the optimizer is called
	IINF_OPTIMIZE_RESPONSE                     IInfItem = C.MSK_IINF_OPTIMIZE_RESPONSE                     // The response code returned by optimize.
	IINF_PRESOLVE_NUM_PRIMAL_PERTURBATIONS     IInfItem = C.MSK_IINF_PRESOLVE_NUM_PRIMAL_PERTURBATIONS     // Number perturbations to thhe bounds of the primal problem.
	IINF_PURIFY_DUAL_SUCCESS                   IInfItem = C.MSK_IINF_PURIFY_DUAL_SUCCESS                   // Is nonzero if the dual solution is purified.
	IINF_PURIFY_PRIMAL_SUCCESS                 IInfItem = C.MSK_IINF_PURIFY_PRIMAL_SUCCESS                 // Is nonzero if the primal solution is purified.
	IINF_RD_NUMBARVAR                          IInfItem = C.MSK_IINF_RD_NUMBARVAR                          // Number of symmetric variables read.
	IINF_RD_NUMCON                             IInfItem = C.MSK_IINF_RD_NUMCON                             // Number of constraints read.
	IINF_RD_NUMCONE                            IInfItem = C.MSK_IINF_RD_NUMCONE                            // Number of conic constraints read.
	IINF_RD_NUMINTVAR                          IInfItem = C.MSK_IINF_RD_NUMINTVAR                          // Number of integer-constrained variables read.
	IINF_RD_NUMQ                               IInfItem = C.MSK_IINF_RD_NUMQ                               // Number of nonempty Q matrices read.
	IINF_RD_NUMVAR                             IInfItem = C.MSK_IINF_RD_NUMVAR                             // Number of variables read.
	IINF_RD_PROTYPE                            IInfItem = C.MSK_IINF_RD_PROTYPE                            // Problem type.
	IINF_SIM_DUAL_DEG_ITER                     IInfItem = C.MSK_IINF_SIM_DUAL_DEG_ITER                     // The number of dual degenerate iterations.
	IINF_SIM_DUAL_HOTSTART                     IInfItem = C.MSK_IINF_SIM_DUAL_HOTSTART                     // If 1 then the dual simplex algorithm is solving from an advanced basis.
	IINF_SIM_DUAL_HOTSTART_LU                  IInfItem = C.MSK_IINF_SIM_DUAL_HOTSTART_LU                  // If 1 then a valid basis factorization of full rank was located and used by the dual simplex algorithm.
	IINF_SIM_DUAL_INF_ITER                     IInfItem = C.MSK_IINF_SIM_DUAL_INF_ITER                     // The number of iterations taken with dual infeasibility.
	IINF_SIM_DUAL_ITER                         IInfItem = C.MSK_IINF_SIM_DUAL_ITER                         // Number of dual simplex iterations during the last optimization.
	IINF_SIM_NUMCON                            IInfItem = C.MSK_IINF_SIM_NUMCON                            // Number of constraints in the problem solved by the simplex optimizer.
	IINF_SIM_NUMVAR                            IInfItem = C.MSK_IINF_SIM_NUMVAR                            // Number of variables in the problem solved by the simplex optimizer.
	IINF_SIM_PRIMAL_DEG_ITER                   IInfItem = C.MSK_IINF_SIM_PRIMAL_DEG_ITER                   // The number of primal degenerate iterations.
	IINF_SIM_PRIMAL_HOTSTART                   IInfItem = C.MSK_IINF_SIM_PRIMAL_HOTSTART                   // If 1 then the primal simplex algorithm is solving from an advanced basis.
	IINF_SIM_PRIMAL_HOTSTART_LU                IInfItem = C.MSK_IINF_SIM_PRIMAL_HOTSTART_LU                // If 1 then a valid basis factorization of full rank was located and used by the primal simplex algorithm.
	IINF_SIM_PRIMAL_INF_ITER                   IInfItem = C.MSK_IINF_SIM_PRIMAL_INF_ITER                   // The number of iterations taken with primal infeasibility.
	IINF_SIM_PRIMAL_ITER                       IInfItem = C.MSK_IINF_SIM_PRIMAL_ITER                       // Number of primal simplex iterations during the last optimization.
	IINF_SIM_SOLVE_DUAL                        IInfItem = C.MSK_IINF_SIM_SOLVE_DUAL                        // Is non-zero if dual problem is solved.
	IINF_SOL_BAS_PROSTA                        IInfItem = C.MSK_IINF_SOL_BAS_PROSTA                        // Problem status of the basic solution. Updated after each optimization.
	IINF_SOL_BAS_SOLSTA                        IInfItem = C.MSK_IINF_SOL_BAS_SOLSTA                        // Solution status of the basic solution. Updated after each optimization.
	IINF_SOL_ITG_PROSTA                        IInfItem = C.MSK_IINF_SOL_ITG_PROSTA                        // Problem status of the integer solution. Updated after each optimization.
	IINF_SOL_ITG_SOLSTA                        IInfItem = C.MSK_IINF_SOL_ITG_SOLSTA                        // Solution status of the integer solution. Updated after each optimization.
	IINF_SOL_ITR_PROSTA                        IInfItem = C.MSK_IINF_SOL_ITR_PROSTA                        // Problem status of the interior-point solution. Updated after each optimization.
	IINF_SOL_ITR_SOLSTA                        IInfItem = C.MSK_IINF_SOL_ITR_SOLSTA                        // Solution status of the interior-point solution. Updated after each optimization.
	IINF_STO_NUM_A_REALLOC                     IInfItem = C.MSK_IINF_STO_NUM_A_REALLOC                     // Number of times the storage for storing the linear coefficient matrix has been changed.
)

var _IInfItem_map = map[IInfItem]string{
	IINF_ANA_PRO_NUM_CON:                       "IINF_ANA_PRO_NUM_CON",
	IINF_ANA_PRO_NUM_CON_EQ:                    "IINF_ANA_PRO_NUM_CON_EQ",
	IINF_ANA_PRO_NUM_CON_FR:                    "IINF_ANA_PRO_NUM_CON_FR",
	IINF_ANA_PRO_NUM_CON_LO:                    "IINF_ANA_PRO_NUM_CON_LO",
	IINF_ANA_PRO_NUM_CON_RA:                    "IINF_ANA_PRO_NUM_CON_RA",
	IINF_ANA_PRO_NUM_CON_UP:                    "IINF_ANA_PRO_NUM_CON_UP",
	IINF_ANA_PRO_NUM_VAR:                       "IINF_ANA_PRO_NUM_VAR",
	IINF_ANA_PRO_NUM_VAR_BIN:                   "IINF_ANA_PRO_NUM_VAR_BIN",
	IINF_ANA_PRO_NUM_VAR_CONT:                  "IINF_ANA_PRO_NUM_VAR_CONT",
	IINF_ANA_PRO_NUM_VAR_EQ:                    "IINF_ANA_PRO_NUM_VAR_EQ",
	IINF_ANA_PRO_NUM_VAR_FR:                    "IINF_ANA_PRO_NUM_VAR_FR",
	IINF_ANA_PRO_NUM_VAR_INT:                   "IINF_ANA_PRO_NUM_VAR_INT",
	IINF_ANA_PRO_NUM_VAR_LO:                    "IINF_ANA_PRO_NUM_VAR_LO",
	IINF_ANA_PRO_NUM_VAR_RA:                    "IINF_ANA_PRO_NUM_VAR_RA",
	IINF_ANA_PRO_NUM_VAR_UP:                    "IINF_ANA_PRO_NUM_VAR_UP",
	IINF_INTPNT_FACTOR_DIM_DENSE:               "IINF_INTPNT_FACTOR_DIM_DENSE",
	IINF_INTPNT_ITER:                           "IINF_INTPNT_ITER",
	IINF_INTPNT_NUM_THREADS:                    "IINF_INTPNT_NUM_THREADS",
	IINF_INTPNT_SOLVE_DUAL:                     "IINF_INTPNT_SOLVE_DUAL",
	IINF_MIO_ABSGAP_SATISFIED:                  "IINF_MIO_ABSGAP_SATISFIED",
	IINF_MIO_CLIQUE_TABLE_SIZE:                 "IINF_MIO_CLIQUE_TABLE_SIZE",
	IINF_MIO_CONSTRUCT_SOLUTION:                "IINF_MIO_CONSTRUCT_SOLUTION",
	IINF_MIO_INITIAL_FEASIBLE_SOLUTION:         "IINF_MIO_INITIAL_FEASIBLE_SOLUTION",
	IINF_MIO_NODE_DEPTH:                        "IINF_MIO_NODE_DEPTH",
	IINF_MIO_NUM_ACTIVE_NODES:                  "IINF_MIO_NUM_ACTIVE_NODES",
	IINF_MIO_NUM_ACTIVE_ROOT_CUTS:              "IINF_MIO_NUM_ACTIVE_ROOT_CUTS",
	IINF_MIO_NUM_BRANCH:                        "IINF_MIO_NUM_BRANCH",
	IINF_MIO_NUM_INT_SOLUTIONS:                 "IINF_MIO_NUM_INT_SOLUTIONS",
	IINF_MIO_NUM_RELAX:                         "IINF_MIO_NUM_RELAX",
	IINF_MIO_NUM_REPEATED_PRESOLVE:             "IINF_MIO_NUM_REPEATED_PRESOLVE",
	IINF_MIO_NUM_RESTARTS:                      "IINF_MIO_NUM_RESTARTS",
	IINF_MIO_NUM_ROOT_CUT_ROUNDS:               "IINF_MIO_NUM_ROOT_CUT_ROUNDS",
	IINF_MIO_NUM_SELECTED_CLIQUE_CUTS:          "IINF_MIO_NUM_SELECTED_CLIQUE_CUTS",
	IINF_MIO_NUM_SELECTED_CMIR_CUTS:            "IINF_MIO_NUM_SELECTED_CMIR_CUTS",
	IINF_MIO_NUM_SELECTED_GOMORY_CUTS:          "IINF_MIO_NUM_SELECTED_GOMORY_CUTS",
	IINF_MIO_NUM_SELECTED_IMPLIED_BOUND_CUTS:   "IINF_MIO_NUM_SELECTED_IMPLIED_BOUND_CUTS",
	IINF_MIO_NUM_SELECTED_KNAPSACK_COVER_CUTS:  "IINF_MIO_NUM_SELECTED_KNAPSACK_COVER_CUTS",
	IINF_MIO_NUM_SELECTED_LIPRO_CUTS:           "IINF_MIO_NUM_SELECTED_LIPRO_CUTS",
	IINF_MIO_NUM_SEPARATED_CLIQUE_CUTS:         "IINF_MIO_NUM_SEPARATED_CLIQUE_CUTS",
	IINF_MIO_NUM_SEPARATED_CMIR_CUTS:           "IINF_MIO_NUM_SEPARATED_CMIR_CUTS",
	IINF_MIO_NUM_SEPARATED_GOMORY_CUTS:         "IINF_MIO_NUM_SEPARATED_GOMORY_CUTS",
	IINF_MIO_NUM_SEPARATED_IMPLIED_BOUND_CUTS:  "IINF_MIO_NUM_SEPARATED_IMPLIED_BOUND_CUTS",
	IINF_MIO_NUM_SEPARATED_KNAPSACK_COVER_CUTS: "IINF_MIO_NUM_SEPARATED_KNAPSACK_COVER_CUTS",
	IINF_MIO_NUM_SEPARATED_LIPRO_CUTS:          "IINF_MIO_NUM_SEPARATED_LIPRO_CUTS",
	IINF_MIO_NUM_SOLVED_NODES:                  "IINF_MIO_NUM_SOLVED_NODES",
	IINF_MIO_NUMBIN:                            "IINF_MIO_NUMBIN",
	IINF_MIO_NUMBINCONEVAR:                     "IINF_MIO_NUMBINCONEVAR",
	IINF_MIO_NUMCON:                            "IINF_MIO_NUMCON",
	IINF_MIO_NUMCONE:                           "IINF_MIO_NUMCONE",
	IINF_MIO_NUMCONEVAR:                        "IINF_MIO_NUMCONEVAR",
	IINF_MIO_NUMCONT:                           "IINF_MIO_NUMCONT",
	IINF_MIO_NUMCONTCONEVAR:                    "IINF_MIO_NUMCONTCONEVAR",
	IINF_MIO_NUMDEXPCONES:                      "IINF_MIO_NUMDEXPCONES",
	IINF_MIO_NUMDJC:                            "IINF_MIO_NUMDJC",
	IINF_MIO_NUMDPOWCONES:                      "IINF_MIO_NUMDPOWCONES",
	IINF_MIO_NUMINT:                            "IINF_MIO_NUMINT",
	IINF_MIO_NUMINTCONEVAR:                     "IINF_MIO_NUMINTCONEVAR",
	IINF_MIO_NUMPEXPCONES:                      "IINF_MIO_NUMPEXPCONES",
	IINF_MIO_NUMPPOWCONES:                      "IINF_MIO_NUMPPOWCONES",
	IINF_MIO_NUMQCONES:                         "IINF_MIO_NUMQCONES",
	IINF_MIO_NUMRQCONES:                        "IINF_MIO_NUMRQCONES",
	IINF_MIO_NUMVAR:                            "IINF_MIO_NUMVAR",
	IINF_MIO_OBJ_BOUND_DEFINED:                 "IINF_MIO_OBJ_BOUND_DEFINED",
	IINF_MIO_PRESOLVED_NUMBIN:                  "IINF_MIO_PRESOLVED_NUMBIN",
	IINF_MIO_PRESOLVED_NUMBINCONEVAR:           "IINF_MIO_PRESOLVED_NUMBINCONEVAR",
	IINF_MIO_PRESOLVED_NUMCON:                  "IINF_MIO_PRESOLVED_NUMCON",
	IINF_MIO_PRESOLVED_NUMCONE:                 "IINF_MIO_PRESOLVED_NUMCONE",
	IINF_MIO_PRESOLVED_NUMCONEVAR:              "IINF_MIO_PRESOLVED_NUMCONEVAR",
	IINF_MIO_PRESOLVED_NUMCONT:                 "IINF_MIO_PRESOLVED_NUMCONT",
	IINF_MIO_PRESOLVED_NUMCONTCONEVAR:          "IINF_MIO_PRESOLVED_NUMCONTCONEVAR",
	IINF_MIO_PRESOLVED_NUMDEXPCONES:            "IINF_MIO_PRESOLVED_NUMDEXPCONES",
	IINF_MIO_PRESOLVED_NUMDJC:                  "IINF_MIO_PRESOLVED_NUMDJC",
	IINF_MIO_PRESOLVED_NUMDPOWCONES:            "IINF_MIO_PRESOLVED_NUMDPOWCONES",
	IINF_MIO_PRESOLVED_NUMINT:                  "IINF_MIO_PRESOLVED_NUMINT",
	IINF_MIO_PRESOLVED_NUMINTCONEVAR:           "IINF_MIO_PRESOLVED_NUMINTCONEVAR",
	IINF_MIO_PRESOLVED_NUMPEXPCONES:            "IINF_MIO_PRESOLVED_NUMPEXPCONES",
	IINF_MIO_PRESOLVED_NUMPPOWCONES:            "IINF_MIO_PRESOLVED_NUMPPOWCONES",
	IINF_MIO_PRESOLVED_NUMQCONES:               "IINF_MIO_PRESOLVED_NUMQCONES",
	IINF_MIO_PRESOLVED_NUMRQCONES:              "IINF_MIO_PRESOLVED_NUMRQCONES",
	IINF_MIO_PRESOLVED_NUMVAR:                  "IINF_MIO_PRESOLVED_NUMVAR",
	IINF_MIO_RELGAP_SATISFIED:                  "IINF_MIO_RELGAP_SATISFIED",
	IINF_MIO_TOTAL_NUM_SELECTED_CUTS:           "IINF_MIO_TOTAL_NUM_SELECTED_CUTS",
	IINF_MIO_TOTAL_NUM_SEPARATED_CUTS:          "IINF_MIO_TOTAL_NUM_SEPARATED_CUTS",
	IINF_MIO_USER_OBJ_CUT:                      "IINF_MIO_USER_OBJ_CUT",
	IINF_OPT_NUMCON:                            "IINF_OPT_NUMCON",
	IINF_OPT_NUMVAR:                            "IINF_OPT_NUMVAR",
	IINF_OPTIMIZE_RESPONSE:                     "IINF_OPTIMIZE_RESPONSE",
	IINF_PRESOLVE_NUM_PRIMAL_PERTURBATIONS:     "IINF_PRESOLVE_NUM_PRIMAL_PERTURBATIONS",
	IINF_PURIFY_DUAL_SUCCESS:                   "IINF_PURIFY_DUAL_SUCCESS",
	IINF_PURIFY_PRIMAL_SUCCESS:                 "IINF_PURIFY_PRIMAL_SUCCESS",
	IINF_RD_NUMBARVAR:                          "IINF_RD_NUMBARVAR",
	IINF_RD_NUMCON:                             "IINF_RD_NUMCON",
	IINF_RD_NUMCONE:                            "IINF_RD_NUMCONE",
	IINF_RD_NUMINTVAR:                          "IINF_RD_NUMINTVAR",
	IINF_RD_NUMQ:                               "IINF_RD_NUMQ",
	IINF_RD_NUMVAR:                             "IINF_RD_NUMVAR",
	IINF_RD_PROTYPE:                            "IINF_RD_PROTYPE",
	IINF_SIM_DUAL_DEG_ITER:                     "IINF_SIM_DUAL_DEG_ITER",
	IINF_SIM_DUAL_HOTSTART:                     "IINF_SIM_DUAL_HOTSTART",
	IINF_SIM_DUAL_HOTSTART_LU:                  "IINF_SIM_DUAL_HOTSTART_LU",
	IINF_SIM_DUAL_INF_ITER:                     "IINF_SIM_DUAL_INF_ITER",
	IINF_SIM_DUAL_ITER:                         "IINF_SIM_DUAL_ITER",
	IINF_SIM_NUMCON:                            "IINF_SIM_NUMCON",
	IINF_SIM_NUMVAR:                            "IINF_SIM_NUMVAR",
	IINF_SIM_PRIMAL_DEG_ITER:                   "IINF_SIM_PRIMAL_DEG_ITER",
	IINF_SIM_PRIMAL_HOTSTART:                   "IINF_SIM_PRIMAL_HOTSTART",
	IINF_SIM_PRIMAL_HOTSTART_LU:                "IINF_SIM_PRIMAL_HOTSTART_LU",
	IINF_SIM_PRIMAL_INF_ITER:                   "IINF_SIM_PRIMAL_INF_ITER",
	IINF_SIM_PRIMAL_ITER:                       "IINF_SIM_PRIMAL_ITER",
	IINF_SIM_SOLVE_DUAL:                        "IINF_SIM_SOLVE_DUAL",
	IINF_SOL_BAS_PROSTA:                        "IINF_SOL_BAS_PROSTA",
	IINF_SOL_BAS_SOLSTA:                        "IINF_SOL_BAS_SOLSTA",
	IINF_SOL_ITG_PROSTA:                        "IINF_SOL_ITG_PROSTA",
	IINF_SOL_ITG_SOLSTA:                        "IINF_SOL_ITG_SOLSTA",
	IINF_SOL_ITR_PROSTA:                        "IINF_SOL_ITR_PROSTA",
	IINF_SOL_ITR_SOLSTA:                        "IINF_SOL_ITR_SOLSTA",
	IINF_STO_NUM_A_REALLOC:                     "IINF_STO_NUM_A_REALLOC",
}

func (e IInfItem) String() string {
	if v, ok := _IInfItem_map[e]; ok {
		return v
	}
	return "IInfItem(" + strconv.FormatInt(int64(e), 10) + ")"
}
