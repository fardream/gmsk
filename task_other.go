// Automatically generated by github.com/fardream/gen-gmsk
// function deinitions

package gmsk

// #include <stdlib.h> // for C.free
// #include <mosek.h>
import "C"

import (
	"unsafe"

	"github.com/fardream/gmsk/res"
)

// AnalyzeNames is wrapping [MSK_analyzenames]
//
// [MSK_analyzenames] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichstream: MSKstreamtypee
//   - nametype: MSKnametypee
//
// [MSK_analyzenames]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.analyzenames
func (task *Task) AnalyzeNames(
	whichstream StreamType,
	nametype NameType,
) res.Code {
	return res.Code(
		C.MSK_analyzenames(
			task.task,
			C.MSKstreamtypee(whichstream),
			C.MSKnametypee(nametype),
		),
	)
}

// AnalyzeProblem is wrapping [MSK_analyzeproblem]
//
// [MSK_analyzeproblem] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichstream: MSKstreamtypee
//
// [MSK_analyzeproblem]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.analyzeproblem
func (task *Task) AnalyzeProblem(
	whichstream StreamType,
) res.Code {
	return res.Code(
		C.MSK_analyzeproblem(
			task.task,
			C.MSKstreamtypee(whichstream),
		),
	)
}

// AnalyzeSolution is wrapping [MSK_analyzesolution]
//
// [MSK_analyzesolution] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichstream: MSKstreamtypee
//   - whichsol: MSKsoltypee
//
// [MSK_analyzesolution]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.analyzesolution
func (task *Task) AnalyzeSolution(
	whichstream StreamType,
	whichsol SolType,
) res.Code {
	return res.Code(
		C.MSK_analyzesolution(
			task.task,
			C.MSKstreamtypee(whichstream),
			C.MSKsoltypee(whichsol),
		),
	)
}

// Basiscond is wrapping [MSK_basiscond]
//
// [MSK_basiscond] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - nrmbasis: MSKrealt *
//   - nrminvbasis: MSKrealt *
//
// [MSK_basiscond]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.basiscond
func (task *Task) Basiscond(
	nrmbasis *float64,
	nrminvbasis *float64,
) res.Code {
	return res.Code(
		C.MSK_basiscond(
			task.task,
			(*C.MSKrealt)(nrmbasis),
			(*C.MSKrealt)(nrminvbasis),
		),
	)
}

// BkToStr is wrapping [MSK_bktostr]
//
// [MSK_bktostr] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - bk: MSKboundkeye
//   - str: char *
//
// [MSK_bktostr]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.bktostr
func (task *Task) BkToStr(
	bk BoundKey,
) (r res.Code, str string) {
	c_str := (*C.char)(C.calloc(MAX_STR_LEN+1, 1))
	defer C.free(unsafe.Pointer(c_str))

	r = res.Code(
		C.MSK_bktostr(
			task.task,
			C.MSKboundkeye(bk),
			c_str,
		),
	)

	if r.IsOk() {
		str = C.GoString(c_str)
	}

	return
}

// CheckMemtask is wrapping [MSK_checkmemtask]
//
// [MSK_checkmemtask] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - file: const char *
//   - line: MSKint32t
//
// [MSK_checkmemtask]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.checkmemtask
func (task *Task) CheckMemtask(
	file string,
	line int32,
) res.Code {
	c_file := C.CString(file)
	defer C.free(unsafe.Pointer(c_file))

	return res.Code(
		C.MSK_checkmemtask(
			task.task,
			c_file,
			C.MSKint32t(line),
		),
	)
}

// Chgconbound is wrapping [MSK_chgconbound]
//
// [MSK_chgconbound] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - i: MSKint32t
//   - lower: MSKint32t
//   - finite: MSKint32t
//   - value: MSKrealt
//
// [MSK_chgconbound]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.chgconbound
func (task *Task) Chgconbound(
	i int32,
	lower int32,
	finite int32,
	value float64,
) res.Code {
	return res.Code(
		C.MSK_chgconbound(
			task.task,
			C.MSKint32t(i),
			C.MSKint32t(lower),
			C.MSKint32t(finite),
			C.MSKrealt(value),
		),
	)
}

// Chgvarbound is wrapping [MSK_chgvarbound]
//
// [MSK_chgvarbound] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - j: MSKint32t
//   - lower: MSKint32t
//   - finite: MSKint32t
//   - value: MSKrealt
//
// [MSK_chgvarbound]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.chgvarbound
func (task *Task) Chgvarbound(
	j int32,
	lower int32,
	finite int32,
	value float64,
) res.Code {
	return res.Code(
		C.MSK_chgvarbound(
			task.task,
			C.MSKint32t(j),
			C.MSKint32t(lower),
			C.MSKint32t(finite),
			C.MSKrealt(value),
		),
	)
}

// Commitchanges is wrapping [MSK_commitchanges]
//
// [MSK_commitchanges] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//
// [MSK_commitchanges]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.commitchanges
func (task *Task) Commitchanges() res.Code {
	return res.Code(
		C.MSK_commitchanges(
			task.task,
		),
	)
}

// ConetypeToStr is wrapping [MSK_conetypetostr]
//
// [MSK_conetypetostr] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - ct: MSKconetypee
//   - str: char *
//
// Deprecated: [MSK_conetypetostr]/ConetypeToStr is deprecated by mosek and will be removed in a future release.
//
// [MSK_conetypetostr]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.conetypetostr
func (task *Task) ConetypeToStr(
	ct ConeType,
) (r res.Code, str string) {
	c_str := (*C.char)(C.calloc(MAX_STR_LEN+1, 1))
	defer C.free(unsafe.Pointer(c_str))

	r = res.Code(
		C.MSK_conetypetostr(
			task.task,
			C.MSKconetypee(ct),
			c_str,
		),
	)

	if r.IsOk() {
		str = C.GoString(c_str)
	}

	return
}

// DeleteSolution is wrapping [MSK_deletesolution]
//
// [MSK_deletesolution] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//
// [MSK_deletesolution]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.deletesolution
func (task *Task) DeleteSolution(
	whichsol SolType,
) res.Code {
	return res.Code(
		C.MSK_deletesolution(
			task.task,
			C.MSKsoltypee(whichsol),
		),
	)
}

// DualSensitivity is wrapping [MSK_dualsensitivity]
//
// [MSK_dualsensitivity] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - numj: MSKint32t
//   - subj: const MSKint32t *
//   - leftpricej: MSKrealt *
//   - rightpricej: MSKrealt *
//   - leftrangej: MSKrealt *
//   - rightrangej: MSKrealt *
//
// [MSK_dualsensitivity]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.dualsensitivity
func (task *Task) DualSensitivity(
	numj int32,
	subj *int32,
	leftpricej *float64,
	rightpricej *float64,
	leftrangej *float64,
	rightrangej *float64,
) res.Code {
	return res.Code(
		C.MSK_dualsensitivity(
			task.task,
			C.MSKint32t(numj),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(leftpricej),
			(*C.MSKrealt)(rightpricej),
			(*C.MSKrealt)(leftrangej),
			(*C.MSKrealt)(rightrangej),
		),
	)
}

// EmptyAfeBarFRow is wrapping [MSK_emptyafebarfrow]
//
// [MSK_emptyafebarfrow] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - afeidx: MSKint64t
//
// [MSK_emptyafebarfrow]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.emptyafebarfrow
func (task *Task) EmptyAfeBarFRow(
	afeidx int64,
) res.Code {
	return res.Code(
		C.MSK_emptyafebarfrow(
			task.task,
			C.MSKint64t(afeidx),
		),
	)
}

// EmptyAfeBarFRowList is wrapping [MSK_emptyafebarfrowlist]
//
// [MSK_emptyafebarfrowlist] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - numafeidx: MSKint64t
//   - afeidxlist: const MSKint64t *
//
// [MSK_emptyafebarfrowlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.emptyafebarfrowlist
func (task *Task) EmptyAfeBarFRowList(
	numafeidx int64,
	afeidxlist *int64,
) res.Code {
	return res.Code(
		C.MSK_emptyafebarfrowlist(
			task.task,
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidxlist),
		),
	)
}

// EmptyAfeFCol is wrapping [MSK_emptyafefcol]
//
// [MSK_emptyafefcol] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - varidx: MSKint32t
//
// [MSK_emptyafefcol]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.emptyafefcol
func (task *Task) EmptyAfeFCol(
	varidx int32,
) res.Code {
	return res.Code(
		C.MSK_emptyafefcol(
			task.task,
			C.MSKint32t(varidx),
		),
	)
}

// EmptyAfeFColList is wrapping [MSK_emptyafefcollist]
//
// [MSK_emptyafefcollist] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - numvaridx: MSKint64t
//   - varidx: const MSKint32t *
//
// [MSK_emptyafefcollist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.emptyafefcollist
func (task *Task) EmptyAfeFColList(
	numvaridx int64,
	varidx *int32,
) res.Code {
	return res.Code(
		C.MSK_emptyafefcollist(
			task.task,
			C.MSKint64t(numvaridx),
			(*C.MSKint32t)(varidx),
		),
	)
}

// EmptyAfeFRow is wrapping [MSK_emptyafefrow]
//
// [MSK_emptyafefrow] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - afeidx: MSKint64t
//
// [MSK_emptyafefrow]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.emptyafefrow
func (task *Task) EmptyAfeFRow(
	afeidx int64,
) res.Code {
	return res.Code(
		C.MSK_emptyafefrow(
			task.task,
			C.MSKint64t(afeidx),
		),
	)
}

// EmptyAfeFRowList is wrapping [MSK_emptyafefrowlist]
//
// [MSK_emptyafefrowlist] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - numafeidx: MSKint64t
//   - afeidx: const MSKint64t *
//
// [MSK_emptyafefrowlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.emptyafefrowlist
func (task *Task) EmptyAfeFRowList(
	numafeidx int64,
	afeidx *int64,
) res.Code {
	return res.Code(
		C.MSK_emptyafefrowlist(
			task.task,
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidx),
		),
	)
}

// EvaluateAccs is wrapping [MSK_evaluateaccs]
//
// [MSK_evaluateaccs] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - activity: MSKrealt *
//
// [MSK_evaluateaccs]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.evaluateaccs
func (task *Task) EvaluateAccs(
	whichsol SolType,
	activity *float64,
) res.Code {
	return res.Code(
		C.MSK_evaluateaccs(
			task.task,
			C.MSKsoltypee(whichsol),
			(*C.MSKrealt)(activity),
		),
	)
}

// Infeasibilityreport is wrapping [MSK_infeasibilityreport]
//
// [MSK_infeasibilityreport] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichstream: MSKstreamtypee
//   - whichsol: MSKsoltypee
//
// [MSK_infeasibilityreport]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.infeasibilityreport
func (task *Task) Infeasibilityreport(
	whichstream StreamType,
	whichsol SolType,
) res.Code {
	return res.Code(
		C.MSK_infeasibilityreport(
			task.task,
			C.MSKstreamtypee(whichstream),
			C.MSKsoltypee(whichsol),
		),
	)
}

// Initbasissolve is wrapping [MSK_initbasissolve]
//
// [MSK_initbasissolve] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - basis: MSKint32t *
//
// [MSK_initbasissolve]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.initbasissolve
func (task *Task) Initbasissolve(
	basis *int32,
) res.Code {
	return res.Code(
		C.MSK_initbasissolve(
			task.task,
			(*C.MSKint32t)(basis),
		),
	)
}

// InputData is wrapping [MSK_inputdata] and
// sets the data for objective, linear constraints, and variables.
//
// [MSK_inputdata] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - maxnumcon: MSKint32t
//   - maxnumvar: MSKint32t
//   - numcon: MSKint32t
//   - numvar: MSKint32t
//   - c: const MSKrealt *
//   - cfix: MSKrealt
//   - aptrb: const MSKint32t *
//   - aptre: const MSKint32t *
//   - asub: const MSKint32t *
//   - aval: const MSKrealt *
//   - bkc: const MSKboundkeye *
//   - blc: const MSKrealt *
//   - buc: const MSKrealt *
//   - bkx: const MSKboundkeye *
//   - blx: const MSKrealt *
//   - bux: const MSKrealt *
//
// [MSK_inputdata]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.inputdata
func (task *Task) InputData(
	maxnumcon int32,
	maxnumvar int32,
	numcon int32,
	numvar int32,
	c *float64,
	cfix float64,
	aptrb *int32,
	aptre *int32,
	asub *int32,
	aval *float64,
	bkc *BoundKey,
	blc *float64,
	buc *float64,
	bkx *BoundKey,
	blx *float64,
	bux *float64,
) res.Code {
	return res.Code(
		C.MSK_inputdata(
			task.task,
			C.MSKint32t(maxnumcon),
			C.MSKint32t(maxnumvar),
			C.MSKint32t(numcon),
			C.MSKint32t(numvar),
			(*C.MSKrealt)(c),
			C.MSKrealt(cfix),
			(*C.MSKint32t)(aptrb),
			(*C.MSKint32t)(aptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
			(*C.MSKboundkeye)(bkc),
			(*C.MSKrealt)(blc),
			(*C.MSKrealt)(buc),
			(*C.MSKboundkeye)(bkx),
			(*C.MSKrealt)(blx),
			(*C.MSKrealt)(bux),
		),
	)
}

// InputData64 is wrapping [MSK_inputdata64] and
// sets the data for objective, linear constraints, and variables.
//
// [MSK_inputdata64] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - maxnumcon: MSKint32t
//   - maxnumvar: MSKint32t
//   - numcon: MSKint32t
//   - numvar: MSKint32t
//   - c: const MSKrealt *
//   - cfix: MSKrealt
//   - aptrb: const MSKint64t *
//   - aptre: const MSKint64t *
//   - asub: const MSKint32t *
//   - aval: const MSKrealt *
//   - bkc: const MSKboundkeye *
//   - blc: const MSKrealt *
//   - buc: const MSKrealt *
//   - bkx: const MSKboundkeye *
//   - blx: const MSKrealt *
//   - bux: const MSKrealt *
//
// [MSK_inputdata64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.inputdata64
func (task *Task) InputData64(
	maxnumcon int32,
	maxnumvar int32,
	numcon int32,
	numvar int32,
	c *float64,
	cfix float64,
	aptrb *int64,
	aptre *int64,
	asub *int32,
	aval *float64,
	bkc *BoundKey,
	blc *float64,
	buc *float64,
	bkx *BoundKey,
	blx *float64,
	bux *float64,
) res.Code {
	return res.Code(
		C.MSK_inputdata64(
			task.task,
			C.MSKint32t(maxnumcon),
			C.MSKint32t(maxnumvar),
			C.MSKint32t(numcon),
			C.MSKint32t(numvar),
			(*C.MSKrealt)(c),
			C.MSKrealt(cfix),
			(*C.MSKint64t)(aptrb),
			(*C.MSKint64t)(aptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
			(*C.MSKboundkeye)(bkc),
			(*C.MSKrealt)(blc),
			(*C.MSKrealt)(buc),
			(*C.MSKboundkeye)(bkx),
			(*C.MSKrealt)(blx),
			(*C.MSKrealt)(bux),
		),
	)
}

// LinkFiletotaskstream is wrapping [MSK_linkfiletotaskstream]
//
// [MSK_linkfiletotaskstream] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichstream: MSKstreamtypee
//   - filename: const char *
//   - append: MSKint32t
//
// [MSK_linkfiletotaskstream]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.linkfiletotaskstream
func (task *Task) LinkFiletotaskstream(
	whichstream StreamType,
	filename string,
	append int32,
) res.Code {
	c_filename := C.CString(filename)
	defer C.free(unsafe.Pointer(c_filename))

	return res.Code(
		C.MSK_linkfiletotaskstream(
			task.task,
			C.MSKstreamtypee(whichstream),
			c_filename,
			C.MSKint32t(append),
		),
	)
}

// OnesolutionSummary is wrapping [MSK_onesolutionsummary]
//
// [MSK_onesolutionsummary] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichstream: MSKstreamtypee
//   - whichsol: MSKsoltypee
//
// [MSK_onesolutionsummary]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.onesolutionsummary
func (task *Task) OnesolutionSummary(
	whichstream StreamType,
	whichsol SolType,
) res.Code {
	return res.Code(
		C.MSK_onesolutionsummary(
			task.task,
			C.MSKstreamtypee(whichstream),
			C.MSKsoltypee(whichsol),
		),
	)
}

// Optimize is wrapping [MSK_optimize]
//
// [MSK_optimize] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//
// [MSK_optimize]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.optimize
func (task *Task) Optimize() res.Code {
	return res.Code(
		C.MSK_optimize(
			task.task,
		),
	)
}

// OptimizeRmt is wrapping [MSK_optimizermt] and
// offloads optimization to a remote server.
//
// [MSK_optimizermt] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - address: const char *
//   - accesstoken: const char *
//   - trmcode: MSKrescodee *
//
// [MSK_optimizermt]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.optimizermt
func (task *Task) OptimizeRmt(
	address string,
	accesstoken string,
) (r, trmcode res.Code) {
	c_address := C.CString(address)
	defer C.free(unsafe.Pointer(c_address))

	c_accesstoken := C.CString(accesstoken)
	defer C.free(unsafe.Pointer(c_accesstoken))

	r = res.Code(
		C.MSK_optimizermt(
			task.task,
			c_address,
			c_accesstoken,
			(*C.MSKrescodee)(&trmcode),
		),
	)

	return
}

// OptimizerSummary is wrapping [MSK_optimizersummary]
//
// [MSK_optimizersummary] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichstream: MSKstreamtypee
//
// [MSK_optimizersummary]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.optimizersummary
func (task *Task) OptimizerSummary(
	whichstream StreamType,
) res.Code {
	return res.Code(
		C.MSK_optimizersummary(
			task.task,
			C.MSKstreamtypee(whichstream),
		),
	)
}

// OptimizeTrm is wrapping [MSK_optimizetrm] and
// optimizes the problem.
//
// [MSK_optimizetrm] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - trmcode: MSKrescodee *
//
// [MSK_optimizetrm]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.optimizetrm
func (task *Task) OptimizeTrm() (r, trmcode res.Code) {
	r = res.Code(
		C.MSK_optimizetrm(
			task.task,
			(*C.MSKrescodee)(&trmcode),
		),
	)

	return
}

// PrimalRepair is wrapping [MSK_primalrepair]
//
// [MSK_primalrepair] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - wlc: const MSKrealt *
//   - wuc: const MSKrealt *
//   - wlx: const MSKrealt *
//   - wux: const MSKrealt *
//
// [MSK_primalrepair]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.primalrepair
func (task *Task) PrimalRepair(
	wlc *float64,
	wuc *float64,
	wlx *float64,
	wux *float64,
) res.Code {
	return res.Code(
		C.MSK_primalrepair(
			task.task,
			(*C.MSKrealt)(wlc),
			(*C.MSKrealt)(wuc),
			(*C.MSKrealt)(wlx),
			(*C.MSKrealt)(wux),
		),
	)
}

// PrimalSensitivity is wrapping [MSK_primalsensitivity]
//
// [MSK_primalsensitivity] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - numi: MSKint32t
//   - subi: const MSKint32t *
//   - marki: const MSKmarke *
//   - numj: MSKint32t
//   - subj: const MSKint32t *
//   - markj: const MSKmarke *
//   - leftpricei: MSKrealt *
//   - rightpricei: MSKrealt *
//   - leftrangei: MSKrealt *
//   - rightrangei: MSKrealt *
//   - leftpricej: MSKrealt *
//   - rightpricej: MSKrealt *
//   - leftrangej: MSKrealt *
//   - rightrangej: MSKrealt *
//
// [MSK_primalsensitivity]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.primalsensitivity
func (task *Task) PrimalSensitivity(
	numi int32,
	subi *int32,
	marki *Mark,
	numj int32,
	subj *int32,
	markj *Mark,
	leftpricei *float64,
	rightpricei *float64,
	leftrangei *float64,
	rightrangei *float64,
	leftpricej *float64,
	rightpricej *float64,
	leftrangej *float64,
	rightrangej *float64,
) res.Code {
	return res.Code(
		C.MSK_primalsensitivity(
			task.task,
			C.MSKint32t(numi),
			(*C.MSKint32t)(subi),
			(*C.MSKmarke)(marki),
			C.MSKint32t(numj),
			(*C.MSKint32t)(subj),
			(*C.MSKmarke)(markj),
			(*C.MSKrealt)(leftpricei),
			(*C.MSKrealt)(rightpricei),
			(*C.MSKrealt)(leftrangei),
			(*C.MSKrealt)(rightrangei),
			(*C.MSKrealt)(leftpricej),
			(*C.MSKrealt)(rightpricej),
			(*C.MSKrealt)(leftrangej),
			(*C.MSKrealt)(rightrangej),
		),
	)
}

// PrintParam is wrapping [MSK_printparam]
//
// [MSK_printparam] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//
// [MSK_printparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.printparam
func (task *Task) PrintParam() res.Code {
	return res.Code(
		C.MSK_printparam(
			task.task,
		),
	)
}

// ProbtypeToStr is wrapping [MSK_probtypetostr]
//
// [MSK_probtypetostr] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - probtype: MSKproblemtypee
//   - str: char *
//
// [MSK_probtypetostr]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.probtypetostr
func (task *Task) ProbtypeToStr(
	probtype ProblemType,
) (r res.Code, str string) {
	c_str := (*C.char)(C.calloc(MAX_STR_LEN+1, 1))
	defer C.free(unsafe.Pointer(c_str))

	r = res.Code(
		C.MSK_probtypetostr(
			task.task,
			C.MSKproblemtypee(probtype),
			c_str,
		),
	)

	if r.IsOk() {
		str = C.GoString(c_str)
	}

	return
}

// ProStaToStr is wrapping [MSK_prostatostr]
//
// [MSK_prostatostr] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - problemsta: MSKprostae
//   - str: char *
//
// [MSK_prostatostr]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.prostatostr
func (task *Task) ProStaToStr(
	problemsta ProSta,
) (r res.Code, str string) {
	c_str := (*C.char)(C.calloc(MAX_STR_LEN+1, 1))
	defer C.free(unsafe.Pointer(c_str))

	r = res.Code(
		C.MSK_prostatostr(
			task.task,
			C.MSKprostae(problemsta),
			c_str,
		),
	)

	if r.IsOk() {
		str = C.GoString(c_str)
	}

	return
}

// ReadBsolution is wrapping [MSK_readbsolution]
//
// [MSK_readbsolution] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - filename: const char *
//   - compress: MSKcompresstypee
//
// [MSK_readbsolution]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.readbsolution
func (task *Task) ReadBsolution(
	filename string,
	compress CompressType,
) res.Code {
	c_filename := C.CString(filename)
	defer C.free(unsafe.Pointer(c_filename))

	return res.Code(
		C.MSK_readbsolution(
			task.task,
			c_filename,
			C.MSKcompresstypee(compress),
		),
	)
}

// ReadData is wrapping [MSK_readdata]
//
// [MSK_readdata] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - filename: const char *
//
// [MSK_readdata]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.readdata
func (task *Task) ReadData(
	filename string,
) res.Code {
	c_filename := C.CString(filename)
	defer C.free(unsafe.Pointer(c_filename))

	return res.Code(
		C.MSK_readdata(
			task.task,
			c_filename,
		),
	)
}

// ReadDataautoformat is wrapping [MSK_readdataautoformat]
//
// [MSK_readdataautoformat] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - filename: const char *
//
// [MSK_readdataautoformat]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.readdataautoformat
func (task *Task) ReadDataautoformat(
	filename string,
) res.Code {
	c_filename := C.CString(filename)
	defer C.free(unsafe.Pointer(c_filename))

	return res.Code(
		C.MSK_readdataautoformat(
			task.task,
			c_filename,
		),
	)
}

// ReadDataformat is wrapping [MSK_readdataformat]
//
// [MSK_readdataformat] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - filename: const char *
//   - format: MSKdataformate
//   - compress: MSKcompresstypee
//
// [MSK_readdataformat]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.readdataformat
func (task *Task) ReadDataformat(
	filename string,
	format DataFormat,
	compress CompressType,
) res.Code {
	c_filename := C.CString(filename)
	defer C.free(unsafe.Pointer(c_filename))

	return res.Code(
		C.MSK_readdataformat(
			task.task,
			c_filename,
			C.MSKdataformate(format),
			C.MSKcompresstypee(compress),
		),
	)
}

// ReadJsonsol is wrapping [MSK_readjsonsol]
//
// [MSK_readjsonsol] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - filename: const char *
//
// [MSK_readjsonsol]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.readjsonsol
func (task *Task) ReadJsonsol(
	filename string,
) res.Code {
	c_filename := C.CString(filename)
	defer C.free(unsafe.Pointer(c_filename))

	return res.Code(
		C.MSK_readjsonsol(
			task.task,
			c_filename,
		),
	)
}

// ReadJsonstring is wrapping [MSK_readjsonstring]
//
// [MSK_readjsonstring] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - data: const char *
//
// [MSK_readjsonstring]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.readjsonstring
func (task *Task) ReadJsonstring(
	data string,
) res.Code {
	c_data := C.CString(data)
	defer C.free(unsafe.Pointer(c_data))

	return res.Code(
		C.MSK_readjsonstring(
			task.task,
			c_data,
		),
	)
}

// ReadLpstring is wrapping [MSK_readlpstring]
//
// [MSK_readlpstring] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - data: const char *
//
// [MSK_readlpstring]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.readlpstring
func (task *Task) ReadLpstring(
	data string,
) res.Code {
	c_data := C.CString(data)
	defer C.free(unsafe.Pointer(c_data))

	return res.Code(
		C.MSK_readlpstring(
			task.task,
			c_data,
		),
	)
}

// ReadOpfstring is wrapping [MSK_readopfstring]
//
// [MSK_readopfstring] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - data: const char *
//
// [MSK_readopfstring]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.readopfstring
func (task *Task) ReadOpfstring(
	data string,
) res.Code {
	c_data := C.CString(data)
	defer C.free(unsafe.Pointer(c_data))

	return res.Code(
		C.MSK_readopfstring(
			task.task,
			c_data,
		),
	)
}

// ReadParamFile is wrapping [MSK_readparamfile]
//
// [MSK_readparamfile] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - filename: const char *
//
// [MSK_readparamfile]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.readparamfile
func (task *Task) ReadParamFile(
	filename string,
) res.Code {
	c_filename := C.CString(filename)
	defer C.free(unsafe.Pointer(c_filename))

	return res.Code(
		C.MSK_readparamfile(
			task.task,
			c_filename,
		),
	)
}

// ReadPtfstring is wrapping [MSK_readptfstring]
//
// [MSK_readptfstring] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - data: const char *
//
// [MSK_readptfstring]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.readptfstring
func (task *Task) ReadPtfstring(
	data string,
) res.Code {
	c_data := C.CString(data)
	defer C.free(unsafe.Pointer(c_data))

	return res.Code(
		C.MSK_readptfstring(
			task.task,
			c_data,
		),
	)
}

// ReadSolution is wrapping [MSK_readsolution]
//
// [MSK_readsolution] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - filename: const char *
//
// [MSK_readsolution]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.readsolution
func (task *Task) ReadSolution(
	whichsol SolType,
	filename string,
) res.Code {
	c_filename := C.CString(filename)
	defer C.free(unsafe.Pointer(c_filename))

	return res.Code(
		C.MSK_readsolution(
			task.task,
			C.MSKsoltypee(whichsol),
			c_filename,
		),
	)
}

// ReadSolutionFile is wrapping [MSK_readsolutionfile]
//
// [MSK_readsolutionfile] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - filename: const char *
//
// [MSK_readsolutionfile]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.readsolutionfile
func (task *Task) ReadSolutionFile(
	filename string,
) res.Code {
	c_filename := C.CString(filename)
	defer C.free(unsafe.Pointer(c_filename))

	return res.Code(
		C.MSK_readsolutionfile(
			task.task,
			c_filename,
		),
	)
}

// ReadSummary is wrapping [MSK_readsummary]
//
// [MSK_readsummary] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichstream: MSKstreamtypee
//
// [MSK_readsummary]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.readsummary
func (task *Task) ReadSummary(
	whichstream StreamType,
) res.Code {
	return res.Code(
		C.MSK_readsummary(
			task.task,
			C.MSKstreamtypee(whichstream),
		),
	)
}

// ReadTask is wrapping [MSK_readtask]
//
// [MSK_readtask] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - filename: const char *
//
// [MSK_readtask]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.readtask
func (task *Task) ReadTask(
	filename string,
) res.Code {
	c_filename := C.CString(filename)
	defer C.free(unsafe.Pointer(c_filename))

	return res.Code(
		C.MSK_readtask(
			task.task,
			c_filename,
		),
	)
}

// RemoveBarvars is wrapping [MSK_removebarvars]
//
// [MSK_removebarvars] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - num: MSKint32t
//   - subset: const MSKint32t *
//
// [MSK_removebarvars]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.removebarvars
func (task *Task) RemoveBarvars(
	num int32,
	subset *int32,
) res.Code {
	return res.Code(
		C.MSK_removebarvars(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subset),
		),
	)
}

// RemoveCones is wrapping [MSK_removecones]
//
// [MSK_removecones] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - num: MSKint32t
//   - subset: const MSKint32t *
//
// Deprecated: [MSK_removecones]/RemoveCones is deprecated by mosek and will be removed in a future release.
//
// [MSK_removecones]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.removecones
func (task *Task) RemoveCones(
	num int32,
	subset *int32,
) res.Code {
	return res.Code(
		C.MSK_removecones(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subset),
		),
	)
}

// RemoveCons is wrapping [MSK_removecons]
//
// [MSK_removecons] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - num: MSKint32t
//   - subset: const MSKint32t *
//
// [MSK_removecons]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.removecons
func (task *Task) RemoveCons(
	num int32,
	subset *int32,
) res.Code {
	return res.Code(
		C.MSK_removecons(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subset),
		),
	)
}

// RemoveVars is wrapping [MSK_removevars]
//
// [MSK_removevars] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - num: MSKint32t
//   - subset: const MSKint32t *
//
// [MSK_removevars]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.removevars
func (task *Task) RemoveVars(
	num int32,
	subset *int32,
) res.Code {
	return res.Code(
		C.MSK_removevars(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subset),
		),
	)
}

// Resizetask is wrapping [MSK_resizetask]
//
// [MSK_resizetask] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - maxnumcon: MSKint32t
//   - maxnumvar: MSKint32t
//   - maxnumcone: MSKint32t
//   - maxnumanz: MSKint64t
//   - maxnumqnz: MSKint64t
//
// [MSK_resizetask]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.resizetask
func (task *Task) Resizetask(
	maxnumcon int32,
	maxnumvar int32,
	maxnumcone int32,
	maxnumanz int64,
	maxnumqnz int64,
) res.Code {
	return res.Code(
		C.MSK_resizetask(
			task.task,
			C.MSKint32t(maxnumcon),
			C.MSKint32t(maxnumvar),
			C.MSKint32t(maxnumcone),
			C.MSKint64t(maxnumanz),
			C.MSKint64t(maxnumqnz),
		),
	)
}

// Sensitivityreport is wrapping [MSK_sensitivityreport]
//
// [MSK_sensitivityreport] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichstream: MSKstreamtypee
//
// [MSK_sensitivityreport]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.sensitivityreport
func (task *Task) Sensitivityreport(
	whichstream StreamType,
) res.Code {
	return res.Code(
		C.MSK_sensitivityreport(
			task.task,
			C.MSKstreamtypee(whichstream),
		),
	)
}

// SetDefaults is wrapping [MSK_setdefaults]
//
// [MSK_setdefaults] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//
// [MSK_setdefaults]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.setdefaults
func (task *Task) SetDefaults() res.Code {
	return res.Code(
		C.MSK_setdefaults(
			task.task,
		),
	)
}

// SkToStr is wrapping [MSK_sktostr]
//
// [MSK_sktostr] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - sk: MSKstakeye
//   - str: char *
//
// [MSK_sktostr]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.sktostr
func (task *Task) SkToStr(
	sk StaKey,
) (r res.Code, str string) {
	c_str := (*C.char)(C.calloc(MAX_STR_LEN+1, 1))
	defer C.free(unsafe.Pointer(c_str))

	r = res.Code(
		C.MSK_sktostr(
			task.task,
			C.MSKstakeye(sk),
			c_str,
		),
	)

	if r.IsOk() {
		str = C.GoString(c_str)
	}

	return
}

// SolStaToStr is wrapping [MSK_solstatostr]
//
// [MSK_solstatostr] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - solutionsta: MSKsolstae
//   - str: char *
//
// [MSK_solstatostr]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.solstatostr
func (task *Task) SolStaToStr(
	solutionsta SolSta,
) (r res.Code, str string) {
	c_str := (*C.char)(C.calloc(MAX_STR_LEN+1, 1))
	defer C.free(unsafe.Pointer(c_str))

	r = res.Code(
		C.MSK_solstatostr(
			task.task,
			C.MSKsolstae(solutionsta),
			c_str,
		),
	)

	if r.IsOk() {
		str = C.GoString(c_str)
	}

	return
}

// SolutionDef is wrapping [MSK_solutiondef] and
// checks if solution is defined.
//
// [MSK_solutiondef] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - isdef: MSKbooleant *
//
// [MSK_solutiondef]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.solutiondef
func (task *Task) SolutionDef(
	whichsol SolType,
) (r res.Code, isdef bool) {
	c_isdef := C.MSKbooleant(0)

	r = res.Code(
		C.MSK_solutiondef(
			task.task,
			C.MSKsoltypee(whichsol),
			&c_isdef,
		),
	)

	if r.IsOk() {
		isdef = intToBool(c_isdef)
	}

	return
}

// SolutionSummary is wrapping [MSK_solutionsummary] and
// prints the summary of the solution to the given stream.
//
// [MSK_solutionsummary] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichstream: MSKstreamtypee
//
// [MSK_solutionsummary]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.solutionsummary
func (task *Task) SolutionSummary(
	whichstream StreamType,
) res.Code {
	return res.Code(
		C.MSK_solutionsummary(
			task.task,
			C.MSKstreamtypee(whichstream),
		),
	)
}

// Solvewithbasis is wrapping [MSK_solvewithbasis]
//
// [MSK_solvewithbasis] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - transp: MSKbooleant
//   - numnz: MSKint32t
//   - sub: MSKint32t *
//   - val: MSKrealt *
//   - numnzout: MSKint32t *
//
// [MSK_solvewithbasis]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.solvewithbasis
func (task *Task) Solvewithbasis(
	transp bool,
	numnz int32,
	sub *int32,
	val *float64,
	numnzout *int32,
) res.Code {
	return res.Code(
		C.MSK_solvewithbasis(
			task.task,
			boolToInt(transp),
			C.MSKint32t(numnz),
			(*C.MSKint32t)(sub),
			(*C.MSKrealt)(val),
			(*C.MSKint32t)(numnzout),
		),
	)
}

// Strtoconetype is wrapping [MSK_strtoconetype]
//
// [MSK_strtoconetype] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - str: const char *
//   - conetype: MSKconetypee *
//
// Deprecated: [MSK_strtoconetype]/Strtoconetype is deprecated by mosek and will be removed in a future release.
//
// [MSK_strtoconetype]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.strtoconetype
func (task *Task) Strtoconetype(
	str string,
	conetype *ConeType,
) res.Code {
	c_str := C.CString(str)
	defer C.free(unsafe.Pointer(c_str))

	return res.Code(
		C.MSK_strtoconetype(
			task.task,
			c_str,
			(*C.MSKconetypee)(conetype),
		),
	)
}

// Strtosk is wrapping [MSK_strtosk]
//
// [MSK_strtosk] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - str: const char *
//   - sk: MSKstakeye *
//
// [MSK_strtosk]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.strtosk
func (task *Task) Strtosk(
	str string,
	sk *StaKey,
) res.Code {
	c_str := C.CString(str)
	defer C.free(unsafe.Pointer(c_str))

	return res.Code(
		C.MSK_strtosk(
			task.task,
			c_str,
			(*C.MSKstakeye)(sk),
		),
	)
}

// Toconic is wrapping [MSK_toconic]
//
// [MSK_toconic] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//
// Deprecated: [MSK_toconic]/Toconic is deprecated by mosek and will be removed in a future release.
//
// [MSK_toconic]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.toconic
func (task *Task) Toconic() res.Code {
	return res.Code(
		C.MSK_toconic(
			task.task,
		),
	)
}

// UnlinkFuncfromtaskstream is wrapping [MSK_unlinkfuncfromtaskstream]
//
// [MSK_unlinkfuncfromtaskstream] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichstream: MSKstreamtypee
//
// [MSK_unlinkfuncfromtaskstream]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.unlinkfuncfromtaskstream
func (task *Task) UnlinkFuncfromtaskstream(
	whichstream StreamType,
) res.Code {
	return res.Code(
		C.MSK_unlinkfuncfromtaskstream(
			task.task,
			C.MSKstreamtypee(whichstream),
		),
	)
}

// UpdatesolutionInfo is wrapping [MSK_updatesolutioninfo]
//
// [MSK_updatesolutioninfo] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//
// [MSK_updatesolutioninfo]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.updatesolutioninfo
func (task *Task) UpdatesolutionInfo(
	whichsol SolType,
) res.Code {
	return res.Code(
		C.MSK_updatesolutioninfo(
			task.task,
			C.MSKsoltypee(whichsol),
		),
	)
}

// Whichparam is wrapping [MSK_whichparam]
//
// [MSK_whichparam] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - parname: const char *
//   - partype: MSKparametertypee *
//   - param: MSKint32t *
//
// [MSK_whichparam]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.whichparam
func (task *Task) Whichparam(
	parname string,
	partype *ParameterType,
	param *int32,
) res.Code {
	c_parname := C.CString(parname)
	defer C.free(unsafe.Pointer(c_parname))

	return res.Code(
		C.MSK_whichparam(
			task.task,
			c_parname,
			(*C.MSKparametertypee)(partype),
			(*C.MSKint32t)(param),
		),
	)
}

// WriteBsolution is wrapping [MSK_writebsolution]
//
// [MSK_writebsolution] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - filename: const char *
//   - compress: MSKcompresstypee
//
// [MSK_writebsolution]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.writebsolution
func (task *Task) WriteBsolution(
	filename string,
	compress CompressType,
) res.Code {
	c_filename := C.CString(filename)
	defer C.free(unsafe.Pointer(c_filename))

	return res.Code(
		C.MSK_writebsolution(
			task.task,
			c_filename,
			C.MSKcompresstypee(compress),
		),
	)
}

// WriteData is wrapping [MSK_writedata]
//
// [MSK_writedata] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - filename: const char *
//
// [MSK_writedata]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.writedata
func (task *Task) WriteData(
	filename string,
) res.Code {
	c_filename := C.CString(filename)
	defer C.free(unsafe.Pointer(c_filename))

	return res.Code(
		C.MSK_writedata(
			task.task,
			c_filename,
		),
	)
}

// WriteJsonsol is wrapping [MSK_writejsonsol]
//
// [MSK_writejsonsol] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - filename: const char *
//
// [MSK_writejsonsol]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.writejsonsol
func (task *Task) WriteJsonsol(
	filename string,
) res.Code {
	c_filename := C.CString(filename)
	defer C.free(unsafe.Pointer(c_filename))

	return res.Code(
		C.MSK_writejsonsol(
			task.task,
			c_filename,
		),
	)
}

// WriteParamFile is wrapping [MSK_writeparamfile]
//
// [MSK_writeparamfile] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - filename: const char *
//
// [MSK_writeparamfile]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.writeparamfile
func (task *Task) WriteParamFile(
	filename string,
) res.Code {
	c_filename := C.CString(filename)
	defer C.free(unsafe.Pointer(c_filename))

	return res.Code(
		C.MSK_writeparamfile(
			task.task,
			c_filename,
		),
	)
}

// WriteSolution is wrapping [MSK_writesolution]
//
// [MSK_writesolution] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - filename: const char *
//
// [MSK_writesolution]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.writesolution
func (task *Task) WriteSolution(
	whichsol SolType,
	filename string,
) res.Code {
	c_filename := C.CString(filename)
	defer C.free(unsafe.Pointer(c_filename))

	return res.Code(
		C.MSK_writesolution(
			task.task,
			C.MSKsoltypee(whichsol),
			c_filename,
		),
	)
}

// WriteSolutionFile is wrapping [MSK_writesolutionfile]
//
// [MSK_writesolutionfile] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - filename: const char *
//
// [MSK_writesolutionfile]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.writesolutionfile
func (task *Task) WriteSolutionFile(
	filename string,
) res.Code {
	c_filename := C.CString(filename)
	defer C.free(unsafe.Pointer(c_filename))

	return res.Code(
		C.MSK_writesolutionfile(
			task.task,
			c_filename,
		),
	)
}

// WriteTask is wrapping [MSK_writetask]
//
// [MSK_writetask] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - filename: const char *
//
// [MSK_writetask]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.writetask
func (task *Task) WriteTask(
	filename string,
) res.Code {
	c_filename := C.CString(filename)
	defer C.free(unsafe.Pointer(c_filename))

	return res.Code(
		C.MSK_writetask(
			task.task,
			c_filename,
		),
	)
}
