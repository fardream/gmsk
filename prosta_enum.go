// Automatically generated by github.com/fardream/gen-gmsk
// enum for MSKprosta_enum/ProSta

package gmsk

import "strconv"

// ProSta is MSKprosta_enum.
//
// Problem status keys
type ProSta uint32

const (
	PRO_STA_UNKNOWN                  ProSta = 0 // Unknown problem status.
	PRO_STA_PRIM_AND_DUAL_FEAS       ProSta = 1 // The problem is primal and dual feasible.
	PRO_STA_PRIM_FEAS                ProSta = 2 // The problem is primal feasible.
	PRO_STA_DUAL_FEAS                ProSta = 3 // The problem is dual feasible.
	PRO_STA_PRIM_INFEAS              ProSta = 4 // The problem is primal infeasible.
	PRO_STA_DUAL_INFEAS              ProSta = 5 // The problem is dual infeasible.
	PRO_STA_PRIM_AND_DUAL_INFEAS     ProSta = 6 // The problem is primal and dual infeasible.
	PRO_STA_ILL_POSED                ProSta = 7 // The problem is ill-posed. For example, it may be primal and dual feasible but have a positive duality gap.
	PRO_STA_PRIM_INFEAS_OR_UNBOUNDED ProSta = 8 // The problem is either primal infeasible or unbounded. This may occur for mixed-integer problems.
)

var _ProSta_map = map[ProSta]string{
	PRO_STA_UNKNOWN:                  "PRO_STA_UNKNOWN",
	PRO_STA_PRIM_AND_DUAL_FEAS:       "PRO_STA_PRIM_AND_DUAL_FEAS",
	PRO_STA_PRIM_FEAS:                "PRO_STA_PRIM_FEAS",
	PRO_STA_DUAL_FEAS:                "PRO_STA_DUAL_FEAS",
	PRO_STA_PRIM_INFEAS:              "PRO_STA_PRIM_INFEAS",
	PRO_STA_DUAL_INFEAS:              "PRO_STA_DUAL_INFEAS",
	PRO_STA_PRIM_AND_DUAL_INFEAS:     "PRO_STA_PRIM_AND_DUAL_INFEAS",
	PRO_STA_ILL_POSED:                "PRO_STA_ILL_POSED",
	PRO_STA_PRIM_INFEAS_OR_UNBOUNDED: "PRO_STA_PRIM_INFEAS_OR_UNBOUNDED",
}

func (e ProSta) String() string {
	if v, ok := _ProSta_map[e]; ok {
		return v
	}
	return "ProSta(" + strconv.FormatInt(int64(e), 10) + ")"
}
