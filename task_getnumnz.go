// Automatically generated by github.com/fardream/gen-gmsk
// function deinitions

package gmsk

// #include <stdlib.h> // for C.free
// #include <mosek.h>
import "C"

import (
	"github.com/fardream/gmsk/res"
)

// GetAccFNumnz is wrapping [MSK_getaccfnumnz],
// Obtains the total number of nonzeros in the ACC implied F matrix.
//
// Returns:
//
//   - `accfnnz` Number of nonzeros in the F matrix implied by ACCs.
//
// [MSK_getaccfnumnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getaccfnumnz
func (task *Task) GetAccFNumnz() (accfnnz int64, r error) {
	r = res.Code(
		C.MSK_getaccfnumnz(
			task.task,
			(*C.MSKint64t)(&accfnnz),
		),
	).ToError()

	return
}

// GetAColNumNz is wrapping [MSK_getacolnumnz],
// Obtains the number of non-zero elements in one column of the linear constraint matrix
//
// Arguments:
//
//   - `i` Index of the column.
//
// Returns:
//
//   - `nzj` Number of non-zeros in the j'th column of (A).
//
// [MSK_getacolnumnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getacolnumnz
func (task *Task) GetAColNumNz(
	i int32,
) (nzj int32, r error) {
	r = res.Code(
		C.MSK_getacolnumnz(
			task.task,
			C.MSKint32t(i),
			(*C.MSKint32t)(&nzj),
		),
	).ToError()

	return
}

// GetAColSliceNumNz is wrapping [MSK_getacolslicenumnz],
// Obtains the number of non-zeros in a slice of columns of the coefficient matrix.
//
// Arguments:
//
//   - `first` Index of the first column in the sequence.
//   - `last` Index of the last column plus one in the sequence.
//
// Returns:
//
//   - `numnz` Number of non-zeros in the slice.
//
// [MSK_getacolslicenumnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getacolslicenumnz
func (task *Task) GetAColSliceNumNz(
	first int32,
	last int32,
) (numnz int32, r error) {
	r = res.Code(
		C.MSK_getacolslicenumnz(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKint32t)(&numnz),
		),
	).ToError()

	return
}

// GetAColSliceNumNz64 is wrapping [MSK_getacolslicenumnz64]
//
// [MSK_getacolslicenumnz64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getacolslicenumnz64
func (task *Task) GetAColSliceNumNz64(
	first int32,
	last int32,
) (numnz int64, r error) {
	r = res.Code(
		C.MSK_getacolslicenumnz64(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKint64t)(&numnz),
		),
	).ToError()

	return
}

// GetAfeFNumNz is wrapping [MSK_getafefnumnz],
// Obtains the total number of nonzeros in F.
//
// Returns:
//
//   - `numnz` Number of nonzeros in F.
//
// [MSK_getafefnumnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getafefnumnz
func (task *Task) GetAfeFNumNz() (numnz int64, r error) {
	r = res.Code(
		C.MSK_getafefnumnz(
			task.task,
			(*C.MSKint64t)(&numnz),
		),
	).ToError()

	return
}

// GetAfeFRowNumNz is wrapping [MSK_getafefrownumnz],
// Obtains the number of nonzeros in a row of F.
//
// Arguments:
//
//   - `afeidx` Row index.
//
// Returns:
//
//   - `numnz` Number of non-zeros in the row.
//
// [MSK_getafefrownumnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getafefrownumnz
func (task *Task) GetAfeFRowNumNz(
	afeidx int64,
) (numnz int32, r error) {
	r = res.Code(
		C.MSK_getafefrownumnz(
			task.task,
			C.MSKint64t(afeidx),
			(*C.MSKint32t)(&numnz),
		),
	).ToError()

	return
}

// GetAPieceNumNz is wrapping [MSK_getapiecenumnz],
// Obtains the number non-zeros in a rectangular piece of the linear constraint matrix.
//
// Arguments:
//
//   - `firsti` Index of the first row in the rectangular piece.
//   - `lasti` Index of the last row plus one in the rectangular piece.
//   - `firstj` Index of the first column in the rectangular piece.
//   - `lastj` Index of the last column plus one in the rectangular piece.
//
// Returns:
//
//   - `numnz` Number of non-zero elements in the rectangular piece of the linear constraint matrix.
//
// [MSK_getapiecenumnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getapiecenumnz
func (task *Task) GetAPieceNumNz(
	firsti int32,
	lasti int32,
	firstj int32,
	lastj int32,
) (numnz int32, r error) {
	r = res.Code(
		C.MSK_getapiecenumnz(
			task.task,
			C.MSKint32t(firsti),
			C.MSKint32t(lasti),
			C.MSKint32t(firstj),
			C.MSKint32t(lastj),
			(*C.MSKint32t)(&numnz),
		),
	).ToError()

	return
}

// GetARowNumNz is wrapping [MSK_getarownumnz],
// Obtains the number of non-zero elements in one row of the linear constraint matrix
//
// Arguments:
//
//   - `i` Index of the row.
//
// Returns:
//
//   - `nzi` Number of non-zeros in the i'th row of `A`.
//
// [MSK_getarownumnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getarownumnz
func (task *Task) GetARowNumNz(
	i int32,
) (nzi int32, r error) {
	r = res.Code(
		C.MSK_getarownumnz(
			task.task,
			C.MSKint32t(i),
			(*C.MSKint32t)(&nzi),
		),
	).ToError()

	return
}

// GetARowSliceNumNz is wrapping [MSK_getarowslicenumnz],
// Obtains the number of non-zeros in a slice of rows of the coefficient matrix.
//
// Arguments:
//
//   - `first` Index of the first row in the sequence.
//   - `last` Index of the last row plus one in the sequence.
//
// Returns:
//
//   - `numnz` Number of non-zeros in the slice.
//
// [MSK_getarowslicenumnz]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getarowslicenumnz
func (task *Task) GetARowSliceNumNz(
	first int32,
	last int32,
) (numnz int32, r error) {
	r = res.Code(
		C.MSK_getarowslicenumnz(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKint32t)(&numnz),
		),
	).ToError()

	return
}

// GetARowSliceNumNz64 is wrapping [MSK_getarowslicenumnz64]
//
// [MSK_getarowslicenumnz64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.getarowslicenumnz64
func (task *Task) GetARowSliceNumNz64(
	first int32,
	last int32,
) (numnz int64, r error) {
	r = res.Code(
		C.MSK_getarowslicenumnz64(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKint64t)(&numnz),
		),
	).ToError()

	return
}
