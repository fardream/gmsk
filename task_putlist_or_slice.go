// Automatically generated by github.com/fardream/gen-gmsk
// function deinitions

package gmsk

// #include <stdlib.h> // for C.free
// #include <mosek.h>
import "C"

import (
	"github.com/fardream/gmsk/res"
)

// PutAccList is wrapping [MSK_putacclist],
// Puts a number of affine conic constraints.
//
// Arguments:
//
//   - `accidxs` Affine conic constraint indices.
//   - `domidxs` Domain indices.
//   - `afeidxlist` List of affine expression indexes.
//   - `b` The vector of constant terms added to affine expressions. Optional, can be NULL.
//
// [MSK_putacclist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putacclist
func (task *Task) PutAccList(
	numaccs int64,
	accidxs *int64,
	domidxs *int64,
	numafeidx int64,
	afeidxlist *int64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_putacclist(
			task.task,
			C.MSKint64t(numaccs),
			(*C.MSKint64t)(accidxs),
			(*C.MSKint64t)(domidxs),
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidxlist),
			(*C.MSKrealt)(b),
		),
	)
}

// PutAColList is wrapping [MSK_putacollist],
// Replaces all elements in several columns the linear constraint matrix.
//
// Arguments:
//
//   - `sub` Indexes of columns that should be replaced.
//   - `ptrb` Array of pointers to the first element in the columns.
//   - `ptre` Array of pointers to the last element plus one in the columns.
//   - `asub` Row indexes
//   - `aval` Coefficient values.
//
// [MSK_putacollist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putacollist
func (task *Task) PutAColList(
	num int32,
	sub *int32,
	ptrb *int32,
	ptre *int32,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putacollist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKint32t)(ptrb),
			(*C.MSKint32t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// PutAColList64 is wrapping [MSK_putacollist64]
//
// [MSK_putacollist64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putacollist64
func (task *Task) PutAColList64(
	num int32,
	sub *int32,
	ptrb *int64,
	ptre *int64,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putacollist64(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKint64t)(ptrb),
			(*C.MSKint64t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// PutAColSlice is wrapping [MSK_putacolslice],
// Replaces all elements in a sequence of columns the linear constraint matrix.
//
// Arguments:
//
//   - `first` First column in the slice.
//   - `last` Last column plus one in the slice.
//   - `ptrb` Array of pointers to the first element in the columns.
//   - `ptre` Array of pointers to the last element plus one in the columns.
//   - `asub` Row indexes
//   - `aval` Coefficient values.
//
// [MSK_putacolslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putacolslice
func (task *Task) PutAColSlice(
	first int32,
	last int32,
	ptrb *int32,
	ptre *int32,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putacolslice(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKint32t)(ptrb),
			(*C.MSKint32t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// PutAfeBarfEntryList is wrapping [MSK_putafebarfentrylist],
// Inputs a list of entries in barF.
//
// Arguments:
//
//   - `afeidx` Row indexes of barF.
//   - `barvaridx` Semidefinite variable indexes.
//   - `numterm` Number of terms in the weighted sums.
//   - `ptrterm` Pointer to the terms forming each entry.
//   - `termidx` Concatenated element indexes in matrix storage.
//   - `termweight` Concatenated weights in the weighted sum.
//
// [MSK_putafebarfentrylist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putafebarfentrylist
func (task *Task) PutAfeBarfEntryList(
	numafeidx int64,
	afeidx *int64,
	barvaridx *int32,
	numterm *int64,
	ptrterm *int64,
	lenterm int64,
	termidx *int64,
	termweight *float64,
) res.Code {
	return res.Code(
		C.MSK_putafebarfentrylist(
			task.task,
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidx),
			(*C.MSKint32t)(barvaridx),
			(*C.MSKint64t)(numterm),
			(*C.MSKint64t)(ptrterm),
			C.MSKint64t(lenterm),
			(*C.MSKint64t)(termidx),
			(*C.MSKrealt)(termweight),
		),
	)
}

// PutAfeFEntryList is wrapping [MSK_putafefentrylist],
// Replaces a list of entries in F.
//
// Arguments:
//
//   - `afeidx` Row indices in F.
//   - `varidx` Column indices in F.
//   - `val` Values of the entries in F.
//
// [MSK_putafefentrylist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putafefentrylist
func (task *Task) PutAfeFEntryList(
	numentr int64,
	afeidx *int64,
	varidx *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_putafefentrylist(
			task.task,
			C.MSKint64t(numentr),
			(*C.MSKint64t)(afeidx),
			(*C.MSKint32t)(varidx),
			(*C.MSKrealt)(val),
		),
	)
}

// PutAfeFRowList is wrapping [MSK_putafefrowlist],
// Replaces all elements in a number of rows of the F matrix in the affine expressions.
//
// Arguments:
//
//   - `afeidx` Row indices.
//   - `numnzrow` Number of non-zeros in each row.
//   - `ptrrow` Pointer to the first nonzero in each row.
//   - `varidx` Column indexes of non-zero values.
//   - `val` New non-zero values in the rows.
//
// [MSK_putafefrowlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putafefrowlist
func (task *Task) PutAfeFRowList(
	numafeidx int64,
	afeidx *int64,
	numnzrow *int32,
	ptrrow *int64,
	lenidxval int64,
	varidx *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_putafefrowlist(
			task.task,
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidx),
			(*C.MSKint32t)(numnzrow),
			(*C.MSKint64t)(ptrrow),
			C.MSKint64t(lenidxval),
			(*C.MSKint32t)(varidx),
			(*C.MSKrealt)(val),
		),
	)
}

// PutAfeGList is wrapping [MSK_putafeglist],
// Replaces a list of elements in the g vector in the affine expressions.
//
// Arguments:
//
//   - `afeidx` Indices of entries in g.
//   - `g` New values for the elements of g.
//
// [MSK_putafeglist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putafeglist
func (task *Task) PutAfeGList(
	numafeidx int64,
	afeidx *int64,
	g *float64,
) res.Code {
	return res.Code(
		C.MSK_putafeglist(
			task.task,
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidx),
			(*C.MSKrealt)(g),
		),
	)
}

// PutAfeGSlice is wrapping [MSK_putafegslice],
// Modifies a slice of the vector g.
//
// Arguments:
//
//   - `first` First index in the sequence.
//   - `last` Last index plus 1 in the sequence.
//   - `slice` The slice of g as a dense vector.
//
// [MSK_putafegslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putafegslice
func (task *Task) PutAfeGSlice(
	first int64,
	last int64,
	slice *float64,
) res.Code {
	return res.Code(
		C.MSK_putafegslice(
			task.task,
			C.MSKint64t(first),
			C.MSKint64t(last),
			(*C.MSKrealt)(slice),
		),
	)
}

// PutAijList is wrapping [MSK_putaijlist],
// Changes one or more coefficients in the linear constraint matrix.
//
// Arguments:
//
//   - `subi` Constraint (row) indices.
//   - `subj` Variable (column) indices.
//   - `valij` New coefficient values.
//
// [MSK_putaijlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putaijlist
func (task *Task) PutAijList(
	num int32,
	subi *int32,
	subj *int32,
	valij *float64,
) res.Code {
	return res.Code(
		C.MSK_putaijlist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(valij),
		),
	)
}

// PutAijList64 is wrapping [MSK_putaijlist64]
//
// [MSK_putaijlist64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putaijlist64
func (task *Task) PutAijList64(
	num int64,
	subi *int32,
	subj *int32,
	valij *float64,
) res.Code {
	return res.Code(
		C.MSK_putaijlist64(
			task.task,
			C.MSKint64t(num),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(valij),
		),
	)
}

// PutARowList is wrapping [MSK_putarowlist],
// Replaces all elements in several rows of the linear constraint matrix.
//
// Arguments:
//
//   - `sub` Indexes of rows or columns that should be replaced.
//   - `ptrb` Array of pointers to the first element in the rows.
//   - `ptre` Array of pointers to the last element plus one in the rows.
//   - `asub` Variable indexes.
//   - `aval` Coefficient values.
//
// [MSK_putarowlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putarowlist
func (task *Task) PutARowList(
	num int32,
	sub *int32,
	ptrb *int32,
	ptre *int32,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putarowlist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKint32t)(ptrb),
			(*C.MSKint32t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// PutARowList64 is wrapping [MSK_putarowlist64]
//
// [MSK_putarowlist64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putarowlist64
func (task *Task) PutARowList64(
	num int32,
	sub *int32,
	ptrb *int64,
	ptre *int64,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putarowlist64(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKint64t)(ptrb),
			(*C.MSKint64t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// PutARowSlice is wrapping [MSK_putarowslice],
// Replaces all elements in several rows the linear constraint matrix.
//
// Arguments:
//
//   - `first` First row in the slice.
//   - `last` Last row plus one in the slice.
//   - `ptrb` Array of pointers to the first element in the rows.
//   - `ptre` Array of pointers to the last element plus one in the rows.
//   - `asub` Column indexes of new elements.
//   - `aval` Coefficient values.
//
// [MSK_putarowslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putarowslice
func (task *Task) PutARowSlice(
	first int32,
	last int32,
	ptrb *int32,
	ptre *int32,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putarowslice(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKint32t)(ptrb),
			(*C.MSKint32t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// PutBaraIjList is wrapping [MSK_putbaraijlist],
// Inputs list of elements of barA.
//
// Arguments:
//
//   - `subi` Row index of barA.
//   - `subj` Column index of barA.
//   - `alphaptrb` Start entries for terms in the weighted sum.
//   - `alphaptre` End entries for terms in the weighted sum.
//   - `matidx` Element indexes in matrix storage.
//   - `weights` Weights in the weighted sum.
//
// [MSK_putbaraijlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putbaraijlist
func (task *Task) PutBaraIjList(
	num int32,
	subi *int32,
	subj *int32,
	alphaptrb *int64,
	alphaptre *int64,
	matidx *int64,
	weights *float64,
) res.Code {
	return res.Code(
		C.MSK_putbaraijlist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKint64t)(alphaptrb),
			(*C.MSKint64t)(alphaptre),
			(*C.MSKint64t)(matidx),
			(*C.MSKrealt)(weights),
		),
	)
}

// PutBaraRowList is wrapping [MSK_putbararowlist],
// Replace a set of rows of barA
//
// Arguments:
//
//   - `subi` Row indexes of barA.
//   - `ptrb` Start of rows in barA.
//   - `ptre` End of rows in barA.
//   - `subj` Column index of barA.
//   - `nummat` Number of entries in weighted sum of matrixes.
//   - `matidx` Matrix indexes for weighted sum of matrixes.
//   - `weights` Weights for weighted sum of matrixes.
//
// [MSK_putbararowlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putbararowlist
func (task *Task) PutBaraRowList(
	num int32,
	subi *int32,
	ptrb *int64,
	ptre *int64,
	subj *int32,
	nummat *int64,
	matidx *int64,
	weights *float64,
) res.Code {
	return res.Code(
		C.MSK_putbararowlist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subi),
			(*C.MSKint64t)(ptrb),
			(*C.MSKint64t)(ptre),
			(*C.MSKint32t)(subj),
			(*C.MSKint64t)(nummat),
			(*C.MSKint64t)(matidx),
			(*C.MSKrealt)(weights),
		),
	)
}

// PutCList is wrapping [MSK_putclist],
// Modifies a part of the linear objective coefficients.
//
// Arguments:
//
//   - `subj` Indices of variables for which objective coefficients should be changed.
//   - `val` New numerical values for the objective coefficients that should be modified.
//
// [MSK_putclist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putclist
func (task *Task) PutCList(
	num int32,
	subj *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_putclist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(val),
		),
	)
}

// PutConBoundList is wrapping [MSK_putconboundlist],
// Changes the bounds of a list of constraints.
//
// Arguments:
//
//   - `sub` List of constraint indexes.
//   - `bkc` Bound keys for the constraints.
//   - `blc` Lower bounds for the constraints.
//   - `buc` Upper bounds for the constraints.
//
// [MSK_putconboundlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putconboundlist
func (task *Task) PutConBoundList(
	num int32,
	sub *int32,
	bkc *BoundKey,
	blc *float64,
	buc *float64,
) res.Code {
	return res.Code(
		C.MSK_putconboundlist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKboundkeye)(bkc),
			(*C.MSKrealt)(blc),
			(*C.MSKrealt)(buc),
		),
	)
}

// PutConBoundSlice is wrapping [MSK_putconboundslice],
// Changes the bounds for a slice of the constraints.
//
// Arguments:
//
//   - `first` First index in the sequence.
//   - `last` Last index plus 1 in the sequence.
//   - `bkc` Bound keys for the constraints.
//   - `blc` Lower bounds for the constraints.
//   - `buc` Upper bounds for the constraints.
//
// [MSK_putconboundslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putconboundslice
func (task *Task) PutConBoundSlice(
	first int32,
	last int32,
	bkc *BoundKey,
	blc *float64,
	buc *float64,
) res.Code {
	return res.Code(
		C.MSK_putconboundslice(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKboundkeye)(bkc),
			(*C.MSKrealt)(blc),
			(*C.MSKrealt)(buc),
		),
	)
}

// PutConBoundSliceConst is wrapping [MSK_putconboundsliceconst],
// Changes the bounds for a slice of the constraints.
//
// Arguments:
//
//   - `first` First index in the sequence.
//   - `last` Last index plus 1 in the sequence.
//   - `bkc` New bound key for all constraints in the slice.
//   - `blc` New lower bound for all constraints in the slice.
//   - `buc` New upper bound for all constraints in the slice.
//
// [MSK_putconboundsliceconst]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putconboundsliceconst
func (task *Task) PutConBoundSliceConst(
	first int32,
	last int32,
	bkc BoundKey,
	blc float64,
	buc float64,
) res.Code {
	return res.Code(
		C.MSK_putconboundsliceconst(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			C.MSKboundkeye(bkc),
			C.MSKrealt(blc),
			C.MSKrealt(buc),
		),
	)
}

// PutCSlice is wrapping [MSK_putcslice],
// Modifies a slice of the linear objective coefficients.
//
// Arguments:
//
//   - `first` First element in the slice of c.
//   - `last` Last element plus 1 of the slice in c to be changed.
//   - `slice` New numerical values for the objective coefficients that should be modified.
//
// [MSK_putcslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putcslice
func (task *Task) PutCSlice(
	first int32,
	last int32,
	slice *float64,
) res.Code {
	return res.Code(
		C.MSK_putcslice(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(slice),
		),
	)
}

// PutDjcSlice is wrapping [MSK_putdjcslice],
// Inputs a slice of disjunctive constraints.
//
// Arguments:
//
//   - `idxfirst` Index of the first disjunctive constraint in the slice.
//   - `idxlast` Index of the last disjunctive constraint in the slice plus 1.
//   - `domidxlist` List of domain indexes.
//   - `afeidxlist` List of affine expression indexes.
//   - `b` The vector of constant terms added to affine expressions. Optional, may be NULL.
//   - `termsizelist` List of term sizes.
//   - `termsindjc` Number of terms in each of the disjunctive constraints in the slice.
//
// [MSK_putdjcslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putdjcslice
func (task *Task) PutDjcSlice(
	idxfirst int64,
	idxlast int64,
	numdomidx int64,
	domidxlist *int64,
	numafeidx int64,
	afeidxlist *int64,
	b *float64,
	numterms int64,
	termsizelist *int64,
	termsindjc *int64,
) res.Code {
	return res.Code(
		C.MSK_putdjcslice(
			task.task,
			C.MSKint64t(idxfirst),
			C.MSKint64t(idxlast),
			C.MSKint64t(numdomidx),
			(*C.MSKint64t)(domidxlist),
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidxlist),
			(*C.MSKrealt)(b),
			C.MSKint64t(numterms),
			(*C.MSKint64t)(termsizelist),
			(*C.MSKint64t)(termsindjc),
		),
	)
}

// PutSkcSlice is wrapping [MSK_putskcslice],
// Sets the status keys for a slice of the constraints.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `first` First index in the sequence.
//   - `last` Last index plus 1 in the sequence.
//   - `skc` Status keys for the constraints.
//
// [MSK_putskcslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putskcslice
func (task *Task) PutSkcSlice(
	whichsol SolType,
	first int32,
	last int32,
	skc *StaKey,
) res.Code {
	return res.Code(
		C.MSK_putskcslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKstakeye)(skc),
		),
	)
}

// PutSkxSlice is wrapping [MSK_putskxslice],
// Sets the status keys for a slice of the variables.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `first` First index in the sequence.
//   - `last` Last index plus 1 in the sequence.
//   - `skx` Status keys for the variables.
//
// [MSK_putskxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putskxslice
func (task *Task) PutSkxSlice(
	whichsol SolType,
	first int32,
	last int32,
	skx *StaKey,
) res.Code {
	return res.Code(
		C.MSK_putskxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKstakeye)(skx),
		),
	)
}

// PutSlcSlice is wrapping [MSK_putslcslice],
// Sets a slice of the slc vector for a solution.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `first` First index in the sequence.
//   - `last` Last index plus 1 in the sequence.
//   - `slc` Dual variables corresponding to the lower bounds on the constraints.
//
// [MSK_putslcslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putslcslice
func (task *Task) PutSlcSlice(
	whichsol SolType,
	first int32,
	last int32,
	slc *float64,
) res.Code {
	return res.Code(
		C.MSK_putslcslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(slc),
		),
	)
}

// PutSlxSlice is wrapping [MSK_putslxslice],
// Sets a slice of the slx vector for a solution.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `first` First index in the sequence.
//   - `last` Last index plus 1 in the sequence.
//   - `slx` Dual variables corresponding to the lower bounds on the variables.
//
// [MSK_putslxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putslxslice
func (task *Task) PutSlxSlice(
	whichsol SolType,
	first int32,
	last int32,
	slx *float64,
) res.Code {
	return res.Code(
		C.MSK_putslxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(slx),
		),
	)
}

// PutSnxSlice is wrapping [MSK_putsnxslice],
// Sets a slice of the snx vector for a solution.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `first` First index in the sequence.
//   - `last` Last index plus 1 in the sequence.
//   - `snx` Dual variables corresponding to the conic constraints on the variables.
//
// [MSK_putsnxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putsnxslice
func (task *Task) PutSnxSlice(
	whichsol SolType,
	first int32,
	last int32,
	snx *float64,
) res.Code {
	return res.Code(
		C.MSK_putsnxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(snx),
		),
	)
}

// PutSucSlice is wrapping [MSK_putsucslice],
// Sets a slice of the suc vector for a solution.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `first` First index in the sequence.
//   - `last` Last index plus 1 in the sequence.
//   - `suc` Dual variables corresponding to the upper bounds on the constraints.
//
// [MSK_putsucslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putsucslice
func (task *Task) PutSucSlice(
	whichsol SolType,
	first int32,
	last int32,
	suc *float64,
) res.Code {
	return res.Code(
		C.MSK_putsucslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(suc),
		),
	)
}

// PutSuxSlice is wrapping [MSK_putsuxslice],
// Sets a slice of the sux vector for a solution.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `first` First index in the sequence.
//   - `last` Last index plus 1 in the sequence.
//   - `sux` Dual variables corresponding to the upper bounds on the variables.
//
// [MSK_putsuxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putsuxslice
func (task *Task) PutSuxSlice(
	whichsol SolType,
	first int32,
	last int32,
	sux *float64,
) res.Code {
	return res.Code(
		C.MSK_putsuxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(sux),
		),
	)
}

// PutVarBoundList is wrapping [MSK_putvarboundlist],
// Changes the bounds of a list of variables.
//
// Arguments:
//
//   - `sub` List of variable indexes.
//   - `bkx` Bound keys for the variables.
//   - `blx` Lower bounds for the variables.
//   - `bux` Upper bounds for the variables.
//
// [MSK_putvarboundlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putvarboundlist
func (task *Task) PutVarBoundList(
	num int32,
	sub *int32,
	bkx *BoundKey,
	blx *float64,
	bux *float64,
) res.Code {
	return res.Code(
		C.MSK_putvarboundlist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKboundkeye)(bkx),
			(*C.MSKrealt)(blx),
			(*C.MSKrealt)(bux),
		),
	)
}

// PutVarBoundSlice is wrapping [MSK_putvarboundslice],
// Changes the bounds for a slice of the variables.
//
// Arguments:
//
//   - `first` First index in the sequence.
//   - `last` Last index plus 1 in the sequence.
//   - `bkx` Bound keys for the variables.
//   - `blx` Lower bounds for the variables.
//   - `bux` Upper bounds for the variables.
//
// [MSK_putvarboundslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putvarboundslice
func (task *Task) PutVarBoundSlice(
	first int32,
	last int32,
	bkx *BoundKey,
	blx *float64,
	bux *float64,
) res.Code {
	return res.Code(
		C.MSK_putvarboundslice(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKboundkeye)(bkx),
			(*C.MSKrealt)(blx),
			(*C.MSKrealt)(bux),
		),
	)
}

// PutVarBoundSliceConst is wrapping [MSK_putvarboundsliceconst],
// Changes the bounds for a slice of the variables.
//
// Arguments:
//
//   - `first` First index in the sequence.
//   - `last` Last index plus 1 in the sequence.
//   - `bkx` New bound key for all variables in the slice.
//   - `blx` New lower bound for all variables in the slice.
//   - `bux` New upper bound for all variables in the slice.
//
// [MSK_putvarboundsliceconst]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putvarboundsliceconst
func (task *Task) PutVarBoundSliceConst(
	first int32,
	last int32,
	bkx BoundKey,
	blx float64,
	bux float64,
) res.Code {
	return res.Code(
		C.MSK_putvarboundsliceconst(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			C.MSKboundkeye(bkx),
			C.MSKrealt(blx),
			C.MSKrealt(bux),
		),
	)
}

// PutVarTypeList is wrapping [MSK_putvartypelist],
// Sets the variable type for one or more variables.
//
// Arguments:
//
//   - `subj` A list of variable indexes for which the variable type should be changed.
//   - `vartype` A list of variable types.
//
// [MSK_putvartypelist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putvartypelist
func (task *Task) PutVarTypeList(
	num int32,
	subj *int32,
	vartype *VariableType,
) res.Code {
	return res.Code(
		C.MSK_putvartypelist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subj),
			(*C.MSKvariabletypee)(vartype),
		),
	)
}

// PutXcSlice is wrapping [MSK_putxcslice],
// Sets a slice of the xc vector for a solution.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `first` First index in the sequence.
//   - `last` Last index plus 1 in the sequence.
//   - `xc` Primal constraint solution.
//
// [MSK_putxcslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putxcslice
func (task *Task) PutXcSlice(
	whichsol SolType,
	first int32,
	last int32,
	xc *float64,
) res.Code {
	return res.Code(
		C.MSK_putxcslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(xc),
		),
	)
}

// PutXxSlice is wrapping [MSK_putxxslice],
// Sets a slice of the xx vector for a solution.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `first` First index in the sequence.
//   - `last` Last index plus 1 in the sequence.
//   - `xx` Primal variable solution.
//
// [MSK_putxxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putxxslice
func (task *Task) PutXxSlice(
	whichsol SolType,
	first int32,
	last int32,
	xx *float64,
) res.Code {
	return res.Code(
		C.MSK_putxxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(xx),
		),
	)
}

// PutYSlice is wrapping [MSK_putyslice],
// Sets a slice of the y vector for a solution.
//
// Arguments:
//
//   - `whichsol` Selects a solution.
//   - `first` First index in the sequence.
//   - `last` Last index plus 1 in the sequence.
//   - `y` Vector of dual variables corresponding to the constraints.
//
// [MSK_putyslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putyslice
func (task *Task) PutYSlice(
	whichsol SolType,
	first int32,
	last int32,
	y *float64,
) res.Code {
	return res.Code(
		C.MSK_putyslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(y),
		),
	)
}
