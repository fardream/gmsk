// Automatically generated by github.com/fardream/gen-gmsk
// function deinitions

package gmsk

// #include <stdlib.h> // for C.free
// #include <mosek.h>
import "C"

import (
	"github.com/fardream/gmsk/res"
)

// PutAccList is wrapping [MSK_putacclist]
//
// [MSK_putacclist] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - numaccs: MSKint64t
//   - accidxs: const MSKint64t *
//   - domidxs: const MSKint64t *
//   - numafeidx: MSKint64t
//   - afeidxlist: const MSKint64t *
//   - b: const MSKrealt *
//
// [MSK_putacclist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putacclist
func (task *Task) PutAccList(
	numaccs int64,
	accidxs *int64,
	domidxs *int64,
	numafeidx int64,
	afeidxlist *int64,
	b *float64,
) res.Code {
	return res.Code(
		C.MSK_putacclist(
			task.task,
			C.MSKint64t(numaccs),
			(*C.MSKint64t)(accidxs),
			(*C.MSKint64t)(domidxs),
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidxlist),
			(*C.MSKrealt)(b),
		),
	)
}

// PutAColList is wrapping [MSK_putacollist]
//
// [MSK_putacollist] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - ptrb: const MSKint32t *
//   - ptre: const MSKint32t *
//   - asub: const MSKint32t *
//   - aval: const MSKrealt *
//
// [MSK_putacollist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putacollist
func (task *Task) PutAColList(
	num int32,
	sub *int32,
	ptrb *int32,
	ptre *int32,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putacollist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKint32t)(ptrb),
			(*C.MSKint32t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// PutAColList64 is wrapping [MSK_putacollist64]
//
// [MSK_putacollist64] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - ptrb: const MSKint64t *
//   - ptre: const MSKint64t *
//   - asub: const MSKint32t *
//   - aval: const MSKrealt *
//
// [MSK_putacollist64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putacollist64
func (task *Task) PutAColList64(
	num int32,
	sub *int32,
	ptrb *int64,
	ptre *int64,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putacollist64(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKint64t)(ptrb),
			(*C.MSKint64t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// PutAColSlice is wrapping [MSK_putacolslice]
//
// [MSK_putacolslice] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - ptrb: const MSKint32t *
//   - ptre: const MSKint32t *
//   - asub: const MSKint32t *
//   - aval: const MSKrealt *
//
// [MSK_putacolslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putacolslice
func (task *Task) PutAColSlice(
	first int32,
	last int32,
	ptrb *int32,
	ptre *int32,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putacolslice(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKint32t)(ptrb),
			(*C.MSKint32t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// PutAfeBarFEntryList is wrapping [MSK_putafebarfentrylist]
//
// [MSK_putafebarfentrylist] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - numafeidx: MSKint64t
//   - afeidx: const MSKint64t *
//   - barvaridx: const MSKint32t *
//   - numterm: const MSKint64t *
//   - ptrterm: const MSKint64t *
//   - lenterm: MSKint64t
//   - termidx: const MSKint64t *
//   - termweight: const MSKrealt *
//
// [MSK_putafebarfentrylist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putafebarfentrylist
func (task *Task) PutAfeBarFEntryList(
	numafeidx int64,
	afeidx *int64,
	barvaridx *int32,
	numterm *int64,
	ptrterm *int64,
	lenterm int64,
	termidx *int64,
	termweight *float64,
) res.Code {
	return res.Code(
		C.MSK_putafebarfentrylist(
			task.task,
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidx),
			(*C.MSKint32t)(barvaridx),
			(*C.MSKint64t)(numterm),
			(*C.MSKint64t)(ptrterm),
			C.MSKint64t(lenterm),
			(*C.MSKint64t)(termidx),
			(*C.MSKrealt)(termweight),
		),
	)
}

// PutAfeFEntryList is wrapping [MSK_putafefentrylist] and
// sets a portion of the affine expression F matrix.
//
// [MSK_putafefentrylist] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - numentr: MSKint64t
//   - afeidx: const MSKint64t *
//   - varidx: const MSKint32t *
//   - val: const MSKrealt *
//
// [MSK_putafefentrylist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putafefentrylist
func (task *Task) PutAfeFEntryList(
	numentr int64,
	afeidx *int64,
	varidx *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_putafefentrylist(
			task.task,
			C.MSKint64t(numentr),
			(*C.MSKint64t)(afeidx),
			(*C.MSKint32t)(varidx),
			(*C.MSKrealt)(val),
		),
	)
}

// PutAfeFRowList is wrapping [MSK_putafefrowlist]
//
// [MSK_putafefrowlist] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - numafeidx: MSKint64t
//   - afeidx: const MSKint64t *
//   - numnzrow: const MSKint32t *
//   - ptrrow: const MSKint64t *
//   - lenidxval: MSKint64t
//   - varidx: const MSKint32t *
//   - val: const MSKrealt *
//
// [MSK_putafefrowlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putafefrowlist
func (task *Task) PutAfeFRowList(
	numafeidx int64,
	afeidx *int64,
	numnzrow *int32,
	ptrrow *int64,
	lenidxval int64,
	varidx *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_putafefrowlist(
			task.task,
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidx),
			(*C.MSKint32t)(numnzrow),
			(*C.MSKint64t)(ptrrow),
			C.MSKint64t(lenidxval),
			(*C.MSKint32t)(varidx),
			(*C.MSKrealt)(val),
		),
	)
}

// PutAfeGList is wrapping [MSK_putafeglist]
//
// [MSK_putafeglist] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - numafeidx: MSKint64t
//   - afeidx: const MSKint64t *
//   - g: const MSKrealt *
//
// [MSK_putafeglist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putafeglist
func (task *Task) PutAfeGList(
	numafeidx int64,
	afeidx *int64,
	g *float64,
) res.Code {
	return res.Code(
		C.MSK_putafeglist(
			task.task,
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidx),
			(*C.MSKrealt)(g),
		),
	)
}

// PutAfeGSlice is wrapping [MSK_putafegslice] and
// sets a slice of values in g.
//
// [MSK_putafegslice] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - first: MSKint64t
//   - last: MSKint64t
//   - slice: const MSKrealt *
//
// [MSK_putafegslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putafegslice
func (task *Task) PutAfeGSlice(
	first int64,
	last int64,
	slice *float64,
) res.Code {
	return res.Code(
		C.MSK_putafegslice(
			task.task,
			C.MSKint64t(first),
			C.MSKint64t(last),
			(*C.MSKrealt)(slice),
		),
	)
}

// PutAijList is wrapping [MSK_putaijlist] and
// sets a list of constraint matrix A by index.
//
// [MSK_putaijlist] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - num: MSKint32t
//   - subi: const MSKint32t *
//   - subj: const MSKint32t *
//   - valij: const MSKrealt *
//
// [MSK_putaijlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putaijlist
func (task *Task) PutAijList(
	num int32,
	subi *int32,
	subj *int32,
	valij *float64,
) res.Code {
	return res.Code(
		C.MSK_putaijlist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(valij),
		),
	)
}

// PutAijList64 is wrapping [MSK_putaijlist64]
//
// [MSK_putaijlist64] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - num: MSKint64t
//   - subi: const MSKint32t *
//   - subj: const MSKint32t *
//   - valij: const MSKrealt *
//
// [MSK_putaijlist64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putaijlist64
func (task *Task) PutAijList64(
	num int64,
	subi *int32,
	subj *int32,
	valij *float64,
) res.Code {
	return res.Code(
		C.MSK_putaijlist64(
			task.task,
			C.MSKint64t(num),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(valij),
		),
	)
}

// PutARowList is wrapping [MSK_putarowlist]
//
// [MSK_putarowlist] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - ptrb: const MSKint32t *
//   - ptre: const MSKint32t *
//   - asub: const MSKint32t *
//   - aval: const MSKrealt *
//
// [MSK_putarowlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putarowlist
func (task *Task) PutARowList(
	num int32,
	sub *int32,
	ptrb *int32,
	ptre *int32,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putarowlist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKint32t)(ptrb),
			(*C.MSKint32t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// PutARowList64 is wrapping [MSK_putarowlist64]
//
// [MSK_putarowlist64] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - ptrb: const MSKint64t *
//   - ptre: const MSKint64t *
//   - asub: const MSKint32t *
//   - aval: const MSKrealt *
//
// [MSK_putarowlist64]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putarowlist64
func (task *Task) PutARowList64(
	num int32,
	sub *int32,
	ptrb *int64,
	ptre *int64,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putarowlist64(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKint64t)(ptrb),
			(*C.MSKint64t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// PutARowSlice is wrapping [MSK_putarowslice]
//
// [MSK_putarowslice] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - ptrb: const MSKint32t *
//   - ptre: const MSKint32t *
//   - asub: const MSKint32t *
//   - aval: const MSKrealt *
//
// [MSK_putarowslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putarowslice
func (task *Task) PutARowSlice(
	first int32,
	last int32,
	ptrb *int32,
	ptre *int32,
	asub *int32,
	aval *float64,
) res.Code {
	return res.Code(
		C.MSK_putarowslice(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKint32t)(ptrb),
			(*C.MSKint32t)(ptre),
			(*C.MSKint32t)(asub),
			(*C.MSKrealt)(aval),
		),
	)
}

// PutBarAijList is wrapping [MSK_putbaraijlist]
//
// [MSK_putbaraijlist] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - num: MSKint32t
//   - subi: const MSKint32t *
//   - subj: const MSKint32t *
//   - alphaptrb: const MSKint64t *
//   - alphaptre: const MSKint64t *
//   - matidx: const MSKint64t *
//   - weights: const MSKrealt *
//
// [MSK_putbaraijlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putbaraijlist
func (task *Task) PutBarAijList(
	num int32,
	subi *int32,
	subj *int32,
	alphaptrb *int64,
	alphaptre *int64,
	matidx *int64,
	weights *float64,
) res.Code {
	return res.Code(
		C.MSK_putbaraijlist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subi),
			(*C.MSKint32t)(subj),
			(*C.MSKint64t)(alphaptrb),
			(*C.MSKint64t)(alphaptre),
			(*C.MSKint64t)(matidx),
			(*C.MSKrealt)(weights),
		),
	)
}

// PutBarARowList is wrapping [MSK_putbararowlist]
//
// [MSK_putbararowlist] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - num: MSKint32t
//   - subi: const MSKint32t *
//   - ptrb: const MSKint64t *
//   - ptre: const MSKint64t *
//   - subj: const MSKint32t *
//   - nummat: const MSKint64t *
//   - matidx: const MSKint64t *
//   - weights: const MSKrealt *
//
// [MSK_putbararowlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putbararowlist
func (task *Task) PutBarARowList(
	num int32,
	subi *int32,
	ptrb *int64,
	ptre *int64,
	subj *int32,
	nummat *int64,
	matidx *int64,
	weights *float64,
) res.Code {
	return res.Code(
		C.MSK_putbararowlist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subi),
			(*C.MSKint64t)(ptrb),
			(*C.MSKint64t)(ptre),
			(*C.MSKint32t)(subj),
			(*C.MSKint64t)(nummat),
			(*C.MSKint64t)(matidx),
			(*C.MSKrealt)(weights),
		),
	)
}

// PutCList is wrapping [MSK_putclist]
//
// [MSK_putclist] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - num: MSKint32t
//   - subj: const MSKint32t *
//   - val: const MSKrealt *
//
// [MSK_putclist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putclist
func (task *Task) PutCList(
	num int32,
	subj *int32,
	val *float64,
) res.Code {
	return res.Code(
		C.MSK_putclist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subj),
			(*C.MSKrealt)(val),
		),
	)
}

// PutConboundList is wrapping [MSK_putconboundlist]
//
// [MSK_putconboundlist] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - bkc: const MSKboundkeye *
//   - blc: const MSKrealt *
//   - buc: const MSKrealt *
//
// [MSK_putconboundlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putconboundlist
func (task *Task) PutConboundList(
	num int32,
	sub *int32,
	bkc *BoundKey,
	blc *float64,
	buc *float64,
) res.Code {
	return res.Code(
		C.MSK_putconboundlist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKboundkeye)(bkc),
			(*C.MSKrealt)(blc),
			(*C.MSKrealt)(buc),
		),
	)
}

// PutConboundSlice is wrapping [MSK_putconboundslice] and
// sets a list of constraint bounds.
//
// [MSK_putconboundslice] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - bkc: const MSKboundkeye *
//   - blc: const MSKrealt *
//   - buc: const MSKrealt *
//
// [MSK_putconboundslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putconboundslice
func (task *Task) PutConboundSlice(
	first int32,
	last int32,
	bkc *BoundKey,
	blc *float64,
	buc *float64,
) res.Code {
	return res.Code(
		C.MSK_putconboundslice(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKboundkeye)(bkc),
			(*C.MSKrealt)(blc),
			(*C.MSKrealt)(buc),
		),
	)
}

// PutConboundSliceConst is wrapping [MSK_putconboundsliceconst] and
// sets a slice of constraint bounds to the same constant value.
//
// [MSK_putconboundsliceconst] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - bkc: MSKboundkeye
//   - blc: MSKrealt
//   - buc: MSKrealt
//
// [MSK_putconboundsliceconst]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putconboundsliceconst
func (task *Task) PutConboundSliceConst(
	first int32,
	last int32,
	bkc BoundKey,
	blc float64,
	buc float64,
) res.Code {
	return res.Code(
		C.MSK_putconboundsliceconst(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			C.MSKboundkeye(bkc),
			C.MSKrealt(blc),
			C.MSKrealt(buc),
		),
	)
}

// PutCSlice is wrapping [MSK_putcslice]
//
// [MSK_putcslice] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - slice: const MSKrealt *
//
// [MSK_putcslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putcslice
func (task *Task) PutCSlice(
	first int32,
	last int32,
	slice *float64,
) res.Code {
	return res.Code(
		C.MSK_putcslice(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(slice),
		),
	)
}

// PutDjcSlice is wrapping [MSK_putdjcslice]
//
// [MSK_putdjcslice] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - idxfirst: MSKint64t
//   - idxlast: MSKint64t
//   - numdomidx: MSKint64t
//   - domidxlist: const MSKint64t *
//   - numafeidx: MSKint64t
//   - afeidxlist: const MSKint64t *
//   - b: const MSKrealt *
//   - numterms: MSKint64t
//   - termsizelist: const MSKint64t *
//   - termsindjc: const MSKint64t *
//
// [MSK_putdjcslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putdjcslice
func (task *Task) PutDjcSlice(
	idxfirst int64,
	idxlast int64,
	numdomidx int64,
	domidxlist *int64,
	numafeidx int64,
	afeidxlist *int64,
	b *float64,
	numterms int64,
	termsizelist *int64,
	termsindjc *int64,
) res.Code {
	return res.Code(
		C.MSK_putdjcslice(
			task.task,
			C.MSKint64t(idxfirst),
			C.MSKint64t(idxlast),
			C.MSKint64t(numdomidx),
			(*C.MSKint64t)(domidxlist),
			C.MSKint64t(numafeidx),
			(*C.MSKint64t)(afeidxlist),
			(*C.MSKrealt)(b),
			C.MSKint64t(numterms),
			(*C.MSKint64t)(termsizelist),
			(*C.MSKint64t)(termsindjc),
		),
	)
}

// PutSkcSlice is wrapping [MSK_putskcslice]
//
// [MSK_putskcslice] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - skc: const MSKstakeye *
//
// [MSK_putskcslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putskcslice
func (task *Task) PutSkcSlice(
	whichsol SolType,
	first int32,
	last int32,
	skc *StaKey,
) res.Code {
	return res.Code(
		C.MSK_putskcslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKstakeye)(skc),
		),
	)
}

// PutSkxSlice is wrapping [MSK_putskxslice]
//
// [MSK_putskxslice] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - skx: const MSKstakeye *
//
// [MSK_putskxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putskxslice
func (task *Task) PutSkxSlice(
	whichsol SolType,
	first int32,
	last int32,
	skx *StaKey,
) res.Code {
	return res.Code(
		C.MSK_putskxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKstakeye)(skx),
		),
	)
}

// PutSlcSlice is wrapping [MSK_putslcslice]
//
// [MSK_putslcslice] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - slc: const MSKrealt *
//
// [MSK_putslcslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putslcslice
func (task *Task) PutSlcSlice(
	whichsol SolType,
	first int32,
	last int32,
	slc *float64,
) res.Code {
	return res.Code(
		C.MSK_putslcslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(slc),
		),
	)
}

// PutSlxSlice is wrapping [MSK_putslxslice]
//
// [MSK_putslxslice] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - slx: const MSKrealt *
//
// [MSK_putslxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putslxslice
func (task *Task) PutSlxSlice(
	whichsol SolType,
	first int32,
	last int32,
	slx *float64,
) res.Code {
	return res.Code(
		C.MSK_putslxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(slx),
		),
	)
}

// PutSnxSlice is wrapping [MSK_putsnxslice]
//
// [MSK_putsnxslice] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - snx: const MSKrealt *
//
// [MSK_putsnxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putsnxslice
func (task *Task) PutSnxSlice(
	whichsol SolType,
	first int32,
	last int32,
	snx *float64,
) res.Code {
	return res.Code(
		C.MSK_putsnxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(snx),
		),
	)
}

// PutSucSlice is wrapping [MSK_putsucslice]
//
// [MSK_putsucslice] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - suc: const MSKrealt *
//
// [MSK_putsucslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putsucslice
func (task *Task) PutSucSlice(
	whichsol SolType,
	first int32,
	last int32,
	suc *float64,
) res.Code {
	return res.Code(
		C.MSK_putsucslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(suc),
		),
	)
}

// PutSuxSlice is wrapping [MSK_putsuxslice]
//
// [MSK_putsuxslice] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - sux: const MSKrealt *
//
// [MSK_putsuxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putsuxslice
func (task *Task) PutSuxSlice(
	whichsol SolType,
	first int32,
	last int32,
	sux *float64,
) res.Code {
	return res.Code(
		C.MSK_putsuxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(sux),
		),
	)
}

// PutVarboundList is wrapping [MSK_putvarboundlist]
//
// [MSK_putvarboundlist] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - num: MSKint32t
//   - sub: const MSKint32t *
//   - bkx: const MSKboundkeye *
//   - blx: const MSKrealt *
//   - bux: const MSKrealt *
//
// [MSK_putvarboundlist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putvarboundlist
func (task *Task) PutVarboundList(
	num int32,
	sub *int32,
	bkx *BoundKey,
	blx *float64,
	bux *float64,
) res.Code {
	return res.Code(
		C.MSK_putvarboundlist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(sub),
			(*C.MSKboundkeye)(bkx),
			(*C.MSKrealt)(blx),
			(*C.MSKrealt)(bux),
		),
	)
}

// PutVarboundSlice is wrapping [MSK_putvarboundslice] and
// sets the bound for a slice of variables using 3 vectors.
//
// [MSK_putvarboundslice] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - bkx: const MSKboundkeye *
//   - blx: const MSKrealt *
//   - bux: const MSKrealt *
//
// [MSK_putvarboundslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putvarboundslice
func (task *Task) PutVarboundSlice(
	first int32,
	last int32,
	bkx *BoundKey,
	blx *float64,
	bux *float64,
) res.Code {
	return res.Code(
		C.MSK_putvarboundslice(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKboundkeye)(bkx),
			(*C.MSKrealt)(blx),
			(*C.MSKrealt)(bux),
		),
	)
}

// PutVarboundSliceConst is wrapping [MSK_putvarboundsliceconst] and
// set the bound for a slice of variables to the same value.
//
// [MSK_putvarboundsliceconst] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - first: MSKint32t
//   - last: MSKint32t
//   - bkx: MSKboundkeye
//   - blx: MSKrealt
//   - bux: MSKrealt
//
// [MSK_putvarboundsliceconst]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putvarboundsliceconst
func (task *Task) PutVarboundSliceConst(
	first int32,
	last int32,
	bkx BoundKey,
	blx float64,
	bux float64,
) res.Code {
	return res.Code(
		C.MSK_putvarboundsliceconst(
			task.task,
			C.MSKint32t(first),
			C.MSKint32t(last),
			C.MSKboundkeye(bkx),
			C.MSKrealt(blx),
			C.MSKrealt(bux),
		),
	)
}

// PutVarTypeList is wrapping [MSK_putvartypelist] and
// sets the type of a list of variables.
//
// [MSK_putvartypelist] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - num: MSKint32t
//   - subj: const MSKint32t *
//   - vartype: const MSKvariabletypee *
//
// [MSK_putvartypelist]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putvartypelist
func (task *Task) PutVarTypeList(
	num int32,
	subj *int32,
	vartype *VariableType,
) res.Code {
	return res.Code(
		C.MSK_putvartypelist(
			task.task,
			C.MSKint32t(num),
			(*C.MSKint32t)(subj),
			(*C.MSKvariabletypee)(vartype),
		),
	)
}

// PutXcSlice is wrapping [MSK_putxcslice]
//
// [MSK_putxcslice] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - xc: const MSKrealt *
//
// [MSK_putxcslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putxcslice
func (task *Task) PutXcSlice(
	whichsol SolType,
	first int32,
	last int32,
	xc *float64,
) res.Code {
	return res.Code(
		C.MSK_putxcslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(xc),
		),
	)
}

// PutXxSlice is wrapping [MSK_putxxslice] and
// sets the initial solution for a slice.
//
// [MSK_putxxslice] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - xx: const MSKrealt *
//
// [MSK_putxxslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putxxslice
func (task *Task) PutXxSlice(
	whichsol SolType,
	first int32,
	last int32,
	xx *float64,
) res.Code {
	return res.Code(
		C.MSK_putxxslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(xx),
		),
	)
}

// PutYSlice is wrapping [MSK_putyslice]
//
// [MSK_putyslice] returns MSKrescodee and has following parameters
//   - task: MSKtask_t
//   - whichsol: MSKsoltypee
//   - first: MSKint32t
//   - last: MSKint32t
//   - y: const MSKrealt *
//
// [MSK_putyslice]: https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.task.putyslice
func (task *Task) PutYSlice(
	whichsol SolType,
	first int32,
	last int32,
	y *float64,
) res.Code {
	return res.Code(
		C.MSK_putyslice(
			task.task,
			C.MSKsoltypee(whichsol),
			C.MSKint32t(first),
			C.MSKint32t(last),
			(*C.MSKrealt)(y),
		),
	)
}
